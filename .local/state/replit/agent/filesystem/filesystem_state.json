{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Golf 9 Card Game\n\n## Overview\n\nGolf 9 is a multiplayer card game application built with React and Express. Players compete to achieve the lowest score across multiple rounds by strategically managing a 3x3 grid of cards. The game supports solo play against AI, local pass-and-play multiplayer, and online multiplayer modes.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Product Roadmap to Market\n\n### Current Status: Phase 2 Complete - Settings & Cosmetics Systems Operational\n- Core game mechanics and AI fully functional\n- UI/UX for game play complete with proper contrast\n- Database integration ready with user progression systems\n- Settings & Accessibility system fully implemented and functional\n- Cosmetic system with purchase/equip mechanics working\n- Player profile with real-time cosmetic data integration\n\n### Phase 1: User System & Progression (COMPLETED ✓)\n1. **Authentication System** ✓\n   - Replit OAuth integration (Google, X/Twitter, Apple, Email available)\n   - User profile creation and management\n   - Session management with PostgreSQL storage\n\n2. **Currency & XP Systems** ✓\n   - Coins earned per game completion\n   - XP progression based on performance\n   - Level-up rewards and unlocks\n   - Real-time progression tracking\n\n3. **Statistics & Profile** ✓\n   - Comprehensive game statistics tracking\n   - Player profile with equipped cosmetics display\n   - Achievement system with unlock rewards\n   - User stats API with game completion integration\n\n### Phase 2: Enhanced Experience (COMPLETED ✓)\n4. **Settings & Accessibility** ✓\n   - Complete audio controls (sound effects, music, volume sliders)\n   - Accessibility options (reduced motion, high contrast, large text)\n   - Haptic feedback controls for mobile devices\n   - Gameplay preferences (auto end turn, show hints)\n   - Real-time settings persistence with database storage\n\n5. **Cosmetic System** ✓\n   - Cosmetics database with rarity system (common, rare, epic, legendary)\n   - Purchase system with coin costs and level requirements\n   - Equipment system to activate cosmetics\n   - Card backs, avatars, and table themes\n   - Sample cosmetic items seeded and functional\n   - Complete UI for browsing, purchasing, and equipping\n\n### Phase 3: Online Multiplayer (2-3 weeks)\n6. **Real-time Multiplayer**\n   - WebSocket-based game rooms\n   - Matchmaking system\n   - Friend system and invites\n   - Spectator mode\n\n7. **Social Features**\n   - Chat system\n   - Friend challenges\n   - Tournament mode\n   - Social sharing\n\n### Requirements Summary:\n- **APIs Needed**: Google OAuth, Facebook OAuth, (optional: Apple, Discord)\n- **Infrastructure**: Real-time WebSocket server, push notifications\n- **Database**: User profiles, game history, statistics, cosmetics\n- **Audio Assets**: Sound effects library\n- **Legal**: Privacy policy, terms of service for app stores\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development and building\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: React hooks and context for local state, TanStack Query for server state management\n- **UI Library**: Radix UI components with shadcn/ui styling system\n- **Styling**: Tailwind CSS with custom CSS variables for theming\n- **Game Logic**: Custom hooks (`useGameLogic`) manage game state and AI behavior\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Development Setup**: Vite middleware integration for hot module replacement in development\n- **Storage Interface**: Abstracted storage layer with in-memory implementation (expandable to database)\n- **Session Management**: PostgreSQL session store with connect-pg-simple\n- **API Structure**: RESTful endpoints with `/api` prefix\n\n### Data Layer\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect\n- **Schema Management**: Shared schema definitions between client and server\n- **Data Models**: Users with gaming profiles (level, experience, currency) and game rooms with multiplayer support\n- **Validation**: Zod schemas for type-safe data validation\n\n### Game Engine\n- **Core Logic**: Complete card game implementation with deck management, scoring, and rule validation\n- **AI System**: Intelligent computer opponents with decision-making algorithms\n- **Game States**: State machine handling setup, peek phase, playing, round-end, and game-end phases\n- **Multiplayer Support**: Real-time game room management with player synchronization\n\n### UI Components\n- **Design System**: shadcn/ui components with custom game-specific styling\n- **Responsive Design**: Mobile-first approach with breakpoint-based layouts\n- **Game Interface**: Specialized components for cards, grids, and game tables\n- **Accessibility**: Proper ARIA labels and keyboard navigation support\n\n## External Dependencies\n\n### Database & Storage\n- **Neon Database**: PostgreSQL serverless database for production data storage\n- **Drizzle ORM**: Type-safe database operations and migrations\n\n### UI & Styling\n- **Radix UI**: Headless, accessible component primitives\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: SVG icon library\n\n### Development Tools\n- **Vite**: Build tool and development server\n- **TypeScript**: Static type checking\n- **ESBuild**: Fast JavaScript bundler for production builds\n\n### Runtime Libraries\n- **TanStack Query**: Server state management and caching\n- **React Hook Form**: Form handling and validation\n- **Wouter**: Lightweight routing library\n- **Date-fns**: Date manipulation utilities","size_bytes":5584},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // Golf 9 Game Colors\n        \"game-green\": \"var(--game-green)\",\n        \"game-felt\": \"var(--game-felt)\",\n        \"game-gold\": \"var(--game-gold)\",\n        \"game-cream\": \"var(--game-cream)\",\n        \"card-back\": \"var(--card-back)\",\n        \"highlight-blue\": \"var(--highlight-blue)\",\n        \"highlight-green\": \"var(--highlight-green)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3109},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { seedDatabase } from \"./seedData\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Seed database with initial data\n  try {\n    await seedDatabase();\n    log(\"Database seeded successfully\");\n  } catch (error) {\n    log(\"Warning: Database seeding failed, continuing startup...\");\n    console.error(\"Database seeding error:\", error);\n  }\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2369},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":4220},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { type StakeBracket, type GameRoom } from \"@shared/schema\";\n\n// Helper function to create a shuffled deck\nfunction createShuffledDeck() {\n  const suits = ['hearts', 'diamonds', 'clubs', 'spades'];\n  const values = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\n  const deck = [];\n  \n  // Create two standard decks (104 cards for Golf)\n  for (let deckNum = 0; deckNum < 2; deckNum++) {\n    for (const suit of suits) {\n      for (const value of values) {\n        let points = 0;\n        if (value === 'K') points = 0;  // King is 0 points\n        else if (value === 'A') points = 1;\n        else if (value === 'J' || value === 'Q') points = 10;\n        else points = parseInt(value);\n        \n        deck.push({\n          id: `${deckNum}-${suit}-${value}`,\n          suit,\n          value,\n          points,\n          faceUp: false\n        });\n      }\n    }\n  }\n  \n  // Shuffle the deck\n  for (let i = deck.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [deck[i], deck[j]] = [deck[j], deck[i]];\n  }\n  \n  return deck;\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // User progression routes\n  app.get('/api/user/stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const stats = await storage.getUserStats(userId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching user stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch user stats\" });\n    }\n  });\n\n  app.get('/api/user/history', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const limit = parseInt(req.query.limit as string) || 10;\n      const history = await storage.getUserGameHistory(userId, limit);\n      res.json(history);\n    } catch (error) {\n      console.error(\"Error fetching game history:\", error);\n      res.status(500).json({ message: \"Failed to fetch game history\" });\n    }\n  });\n\n  // Game completion endpoint - awards XP and coins\n  app.post('/api/game/complete', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { \n        gameMode, \n        playerCount, \n        rounds, \n        finalScore, \n        placement, \n        won,\n        gameDuration \n      } = req.body;\n\n      // Calculate XP and coin rewards\n      const baseXP = 10;\n      const winBonus = won ? 20 : 0;\n      const placementBonus = Math.max(0, (5 - placement) * 5); // 1st: 20, 2nd: 15, 3rd: 10, 4th: 5\n      const xpEarned = baseXP + winBonus + placementBonus;\n\n      const baseCoins = 5;\n      const coinBonus = won ? 10 : 0;\n      const coinsEarned = baseCoins + coinBonus;\n\n      // Add game to history\n      await storage.addGameToHistory({\n        userId,\n        gameMode,\n        playerCount,\n        rounds,\n        finalScore,\n        placement,\n        won,\n        xpEarned,\n        coinsEarned,\n        gameDuration\n      });\n\n      // Update user stats\n      const currentStats = await storage.getUserStats(userId);\n      await storage.updateUserStats(userId, {\n        gamesPlayed: (currentStats?.gamesPlayed || 0) + 1,\n        gamesWon: (currentStats?.gamesWon || 0) + (won ? 1 : 0),\n        gamesLost: (currentStats?.gamesLost || 0) + (won ? 0 : 1),\n        totalScore: (currentStats?.totalScore || 0) + finalScore,\n        bestScore: currentStats?.bestScore ? Math.min(currentStats.bestScore, finalScore) : finalScore,\n        currentWinStreak: won ? (currentStats?.currentWinStreak || 0) + 1 : 0,\n        longestWinStreak: won ? Math.max(currentStats?.longestWinStreak || 0, (currentStats?.currentWinStreak || 0) + 1) : currentStats?.longestWinStreak || 0,\n        perfectGames: (currentStats?.perfectGames || 0) + (finalScore === 0 ? 1 : 0),\n      });\n\n      // Award currency and XP\n      await storage.addCurrency(userId, coinsEarned);\n      const updatedUser = await storage.addExperience(userId, xpEarned);\n\n      res.json({ \n        xpEarned, \n        coinsEarned, \n        newLevel: updatedUser.level,\n        newExperience: updatedUser.experience,\n        newCurrency: updatedUser.currency\n      });\n    } catch (error) {\n      console.error(\"Error completing game:\", error);\n      res.status(500).json({ message: \"Failed to complete game\" });\n    }\n  });\n\n  // Achievement routes\n  app.get('/api/achievements', isAuthenticated, async (req: any, res) => {\n    try {\n      const achievements = await storage.getAllAchievements();\n      res.json(achievements);\n    } catch (error) {\n      console.error(\"Error fetching achievements:\", error);\n      res.status(500).json({ message: \"Failed to fetch achievements\" });\n    }\n  });\n\n  app.get('/api/user/achievements', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const userAchievements = await storage.getUserAchievements(userId);\n      res.json(userAchievements);\n    } catch (error) {\n      console.error(\"Error fetching user achievements:\", error);\n      res.status(500).json({ message: \"Failed to fetch user achievements\" });\n    }\n  });\n\n\n  // Cosmetics routes\n  app.get('/api/cosmetics/:category?', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const category = req.params.category;\n      \n      // Get all cosmetics (filtered by category if provided)\n      const allCosmetics = await storage.getAllCosmetics();\n      const cosmetics = category \n        ? allCosmetics.filter(c => c.type === category)\n        : allCosmetics;\n      \n      // Get user's owned cosmetics\n      const userCosmetics = await storage.getUserCosmetics(userId);\n      \n      // Combine cosmetic data with ownership info\n      const cosmeticsWithOwnership = cosmetics.map(cosmetic => {\n        const userCosmetic = userCosmetics.find(uc => uc.cosmeticId === cosmetic.id);\n        return {\n          ...cosmetic,\n          owned: !!userCosmetic,\n          equipped: userCosmetic?.equipped || false\n        };\n      });\n      \n      res.json(cosmeticsWithOwnership);\n    } catch (error) {\n      console.error(\"Error fetching cosmetics:\", error);\n      res.status(500).json({ message: \"Failed to fetch cosmetics\" });\n    }\n  });\n\n  app.get('/api/user/cosmetics', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const userCosmetics = await storage.getUserCosmetics(userId);\n      const allCosmetics = await storage.getAllCosmetics();\n      \n      // Add cosmetic details to user cosmetics\n      const cosmeticsWithDetails = userCosmetics.map(uc => {\n        const cosmetic = allCosmetics.find(c => c.id === uc.cosmeticId);\n        return {\n          ...uc,\n          name: cosmetic?.name || '',\n          type: cosmetic?.type || '',\n          imageUrl: cosmetic?.imageUrl || ''\n        };\n      });\n      \n      res.json(cosmeticsWithDetails);\n    } catch (error) {\n      console.error(\"Error fetching user cosmetics:\", error);\n      res.status(500).json({ message: \"Failed to fetch user cosmetics\" });\n    }\n  });\n\n  app.post('/api/cosmetics/:cosmeticId/purchase', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { cosmeticId } = req.params;\n      \n      // Get cosmetic details\n      const allCosmetics = await storage.getAllCosmetics();\n      const cosmetic = allCosmetics.find(c => c.id === cosmeticId);\n      \n      if (!cosmetic) {\n        return res.status(404).json({ message: \"Cosmetic not found\" });\n      }\n      \n      // Check if user can afford it\n      const user = await storage.getUser(userId);\n      if (!user || (user.currency ?? 0) < cosmetic.cost) {\n        return res.status(400).json({ message: \"Insufficient coins\" });\n      }\n      \n      // Check if user meets level requirement\n      if ((user.level ?? 1) < (cosmetic.unlockLevel ?? 1)) {\n        return res.status(400).json({ message: \"Level requirement not met\" });\n      }\n      \n      // Check if already owned\n      const userCosmetics = await storage.getUserCosmetics(userId);\n      if (userCosmetics.some(uc => uc.cosmeticId === cosmeticId)) {\n        return res.status(400).json({ message: \"Already owned\" });\n      }\n      \n      // Purchase cosmetic\n      await storage.spendCurrency(userId, cosmetic.cost);\n      const userCosmetic = await storage.purchaseCosmetic({\n        userId,\n        cosmeticId,\n      });\n      \n      res.json(userCosmetic);\n    } catch (error) {\n      console.error(\"Error purchasing cosmetic:\", error);\n      res.status(500).json({ message: \"Failed to purchase cosmetic\" });\n    }\n  });\n\n  app.post('/api/cosmetics/:cosmeticId/equip', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { cosmeticId } = req.params;\n      \n      await storage.equipCosmetic(userId, cosmeticId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error equipping cosmetic:\", error);\n      res.status(500).json({ message: \"Failed to equip cosmetic\" });\n    }\n  });\n\n  // Game room routes\n  app.get('/api/rooms/active/:stakeBracket', async (req, res) => {\n    try {\n      const { stakeBracket } = req.params;\n      \n      // Validate stake bracket\n      const validBrackets = ['free', 'low', 'medium', 'high', 'premium'];\n      if (!validBrackets.includes(stakeBracket)) {\n        return res.status(400).json({ message: \"Invalid stake bracket\" });\n      }\n      \n      const rooms = await storage.getActiveRoomsByStake(stakeBracket as any);\n      res.json(rooms);\n    } catch (error) {\n      console.error(\"Error fetching active rooms:\", error);\n      res.status(500).json({ message: \"Failed to fetch active rooms\" });\n    }\n  });\n  \n  // Create room endpoint - initializes game table immediately\n  app.post('/api/rooms/create', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const userName = req.user.claims.email || req.user.claims.name || 'Player';\n      const { \n        stakeBracket = 'free',\n        rounds = 9,\n        maxPlayers = 4 \n      } = req.body;\n      \n      // Generate a unique room code\n      const roomCode = Math.random().toString(36).substring(2, 8).toUpperCase();\n      \n      // Initialize empty game table state with host in seat 0\n      const initialGameState = {\n        state: 'waiting', // Waiting for players to fill seats\n        currentRound: 0,\n        currentTurn: 0,\n        currentPlayerIndex: 0,\n        deck: [],\n        discardPile: [],\n        tableSlots: Array(maxPlayers).fill(null).map((_, index) => ({\n          seatNumber: index,\n          isEmpty: index > 0, // Host takes seat 0, others empty\n          playerId: index === 0 ? userId : null,\n          playerName: index === 0 ? userName : null,\n          cards: [],\n          score: 0,\n          roundScores: [],\n          isReady: false,\n          isActive: index === 0\n        })),\n        settings: {\n          rounds,\n          playerCount: maxPlayers,\n          stakeBracket\n        }\n      };\n      \n      // Create room with host as first player and game state initialized\n      const room = await storage.createGameRoom({\n        code: roomCode,\n        hostId: userId,\n        players: [{ \n          id: userId, \n          name: userName,\n          isHost: true,\n          joinedAt: new Date().toISOString(),\n          connected: true,\n          lastSeen: new Date().toISOString(),\n          connectionId: null\n        }],\n        settings: { \n          rounds, \n          playerCount: maxPlayers,\n          stakeBracket,\n          createdAt: new Date().toISOString()\n        },\n        stakeBracket,\n        status: 'inGame_waiting', // Room is immediately at the table waiting for players\n        gameState: initialGameState\n      });\n      \n      // Log room creation with mode\n      console.log(`[CREATE_MODE] roomId=${roomCode}, mode=online, seatsOpen=${maxPlayers - 1}`);\n      console.log(`Room ${roomCode} created by ${userName} with stake ${stakeBracket} - game table initialized`);\n      \n      // Broadcast updated Active Rooms list to all subscribers matching the stake bracket\n      const broadcastFn = (global as any).broadcastRoomUpdate;\n      if (broadcastFn) {\n        // This will automatically filter and send to relevant subscribers\n        await broadcastFn('created', room);\n      }\n      \n      // Return a game snapshot for immediate navigation to game view\n      const gameSnapshot = {\n        code: roomCode,\n        hostId: userId,\n        status: 'inGame_waiting',\n        players: room.players,\n        gameState: initialGameState,\n        settings: room.settings,\n        stakeBracket\n      };\n      \n      res.json({\n        success: true,\n        room,\n        gameSnapshot,\n        message: `Game table created - Room ${roomCode}`\n      });\n    } catch (error) {\n      console.error(\"Error creating room:\", error);\n      res.status(500).json({ \n        success: false,\n        message: \"Failed to create room\",\n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  // Get room details by code\n  app.get('/api/rooms/:code', async (req, res) => {\n    try {\n      const { code } = req.params;\n      \n      const room = await storage.getGameRoom(code);\n      if (!room) {\n        return res.status(404).json({ message: \"Room not found\" });\n      }\n      \n      // Serialize BigInt values to strings\n      res.json(serializeRoom(room));\n    } catch (error) {\n      console.error(\"Error fetching room details:\", error);\n      res.status(500).json({ message: \"Failed to fetch room details\" });\n    }\n  });\n\n  // Join room endpoint - Seat Claim\n  app.post('/api/rooms/:code/join', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const userName = req.user.claims.email || req.user.claims.name || 'Player';\n      const { code } = req.params;\n      \n      // Re-read latest table state\n      const room = await storage.getGameRoom(code);\n      if (!room) {\n        return res.status(404).json({ message: \"Room not found\" });\n      }\n      \n      const players = room.players as any[];\n      const gameState = room.gameState as any;\n      const maxPlayers = room.maxPlayers || 4;\n      \n      // Check if player already seated (idempotent)\n      const existingPlayer = players.find(p => p.id === userId);\n      if (existingPlayer) {\n        // Already seated - return current state (idempotent)\n        const gameSnapshot = {\n          code: room.code,\n          hostId: room.hostId,\n          status: room.status,\n          players: room.players,\n          gameState: room.gameState,\n          settings: room.settings,\n          stakeBracket: room.stakeBracket,\n          version: room.version ? room.version.toString() : '1'\n        };\n        console.log(`[JOIN_ATTEMPT] roomId=${code}, before seats=${players.length}, result=already_seated, after seats=${players.length}`);\n        return res.json({\n          success: true,\n          alreadySeated: true,\n          gameSnapshot,\n          seatNumber: existingPlayer.seatNumber || 0,\n          message: \"Already seated at this table\"\n        });\n      }\n      \n      // Check if room is full\n      const seatsOpen = maxPlayers - players.length;\n      if (seatsOpen <= 0) {\n        // Room is full - return error with latest snapshot\n        const gameSnapshot = {\n          code: room.code,\n          hostId: room.hostId,\n          status: room.status,\n          players: room.players,\n          gameState: room.gameState,\n          settings: room.settings,\n          stakeBracket: room.stakeBracket,\n          version: room.version ? room.version.toString() : '1'\n        };\n        console.log(`[JOIN_ATTEMPT] roomId=${code}, before seats=${players.length}, result=full, after seats=${players.length}`);\n        return res.status(400).json({ \n          success: false,\n          message: \"Table is full - no seats available\",\n          gameSnapshot\n        });\n      }\n      \n      // Find next available seat and claim it atomically\n      let seatNumber = -1;\n      if (gameState && gameState.tableSlots) {\n        for (let i = 0; i < gameState.tableSlots.length; i++) {\n          if (gameState.tableSlots[i].isEmpty) {\n            seatNumber = i;\n            // Claim the seat atomically\n            gameState.tableSlots[i] = {\n              seatNumber: i,\n              isEmpty: false,\n              playerId: userId,\n              playerName: userName,\n              cards: [],\n              score: 0,\n              roundScores: [],\n              isReady: false,\n              isActive: true\n            };\n            break;\n          }\n        }\n      }\n      \n      // Verify seat was actually claimed\n      if (seatNumber === -1) {\n        const gameSnapshot = {\n          code: room.code,\n          hostId: room.hostId,\n          status: room.status,\n          players: room.players,\n          gameState: room.gameState,\n          settings: room.settings,\n          stakeBracket: room.stakeBracket,\n          version: room.version ? room.version.toString() : '1'\n        };\n        console.log(`[JOIN_ATTEMPT] roomId=${code}, before seats=${players.length}, result=no_seat, after seats=${players.length}`);\n        return res.status(400).json({ \n          success: false,\n          message: \"No seats available\",\n          gameSnapshot\n        });\n      }\n      \n      // Add player to players array with connection state\n      players.push({ \n        id: userId, \n        name: userName,\n        seatNumber,\n        joinedAt: new Date().toISOString(),\n        connected: true,\n        lastSeen: new Date().toISOString(),\n        connectionId: null\n      });\n      \n      // Increment version for optimistic concurrency\n      const newVersion = (room.version ? BigInt(room.version) : BigInt(1)) + BigInt(1);\n      \n      // Check if room is now full and auto-start game\n      let roomStatus = room.status;\n      if (players.length === maxPlayers && roomStatus === 'inGame_waiting') {\n        console.log(`[AUTO_START] Room ${code} is full, starting game automatically`);\n        roomStatus = 'inGame_active';\n        \n        // Initialize the actual game state (deck, deal cards, etc.)\n        const deck = createShuffledDeck();\n        \n        // Deal 9 cards to each player\n        for (let i = 0; i < gameState.tableSlots.length; i++) {\n          if (!gameState.tableSlots[i].isEmpty) {\n            gameState.tableSlots[i].cards = [];\n            for (let j = 0; j < 9; j++) {\n              gameState.tableSlots[i].cards.push({\n                ...deck.pop(),\n                isRevealed: false,\n                position: j\n              });\n            }\n          }\n        }\n        \n        // Initialize game state\n        gameState.state = 'active';\n        gameState.deck = deck;\n        gameState.discardPile = [deck.pop()];\n        gameState.currentPlayerIndex = 0;\n        gameState.gamePhase = 'peek';\n      }\n      \n      // Update room with new player and incremented version\n      const updatedRoom = await storage.updateGameRoom(code, {\n        players,\n        gameState,\n        status: roomStatus,\n        version: newVersion\n      });\n      \n      if (!updatedRoom) {\n        return res.status(500).json({ message: \"Failed to update room\" });\n      }\n      \n      // Create full game snapshot with version (serialize BigInt)\n      const gameSnapshot = {\n        code: updatedRoom.code,\n        hostId: updatedRoom.hostId,\n        status: updatedRoom.status,\n        players: updatedRoom.players,\n        gameState: updatedRoom.gameState,\n        settings: updatedRoom.settings,\n        stakeBracket: updatedRoom.stakeBracket,\n        version: updatedRoom.version ? updatedRoom.version.toString() : '1'\n      };\n      \n      console.log(`[JOIN_ATTEMPT] roomId=${code}, before seats=${room.players.length}, result=ok, after seats=${players.length}`);\n      \n      // Broadcast to Active Rooms subscribers\n      const broadcastFn = (global as any).broadcastRoomUpdate;\n      if (broadcastFn) {\n        await broadcastFn('updated', updatedRoom);\n      }\n      \n      // Broadcast room snapshot to all room subscribers\n      const broadcastSnapshotFn = (global as any).broadcastRoomSnapshot;\n      if (broadcastSnapshotFn) {\n        await broadcastSnapshotFn(code, updatedRoom);\n      }\n      \n      res.json({\n        success: true,\n        gameSnapshot,\n        seatNumber,\n        message: `Joined table at seat ${seatNumber}`\n      });\n      \n    } catch (error) {\n      console.error(\"Error joining room:\", error);\n      res.status(500).json({ message: \"Failed to join room\" });\n    }\n  });\n\n  // Game action endpoint - server authoritative\n  app.post('/api/rooms/:code/action', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { code } = req.params;\n      const { action, ...actionData } = req.body;\n      \n      const room = await storage.getGameRoom(code);\n      if (!room) {\n        return res.status(404).json({ success: false, message: \"Room not found\" });\n      }\n      \n      // Verify player is in the room\n      const players = room.players as any[];\n      const player = players.find(p => p.id === userId);\n      if (!player) {\n        return res.status(403).json({ success: false, message: \"Not in this room\" });\n      }\n      \n      // Get current game state\n      let gameState = room.gameState as any;\n      if (!gameState) {\n        return res.status(400).json({ success: false, message: \"Game not started\" });\n      }\n      \n      // Process the action based on type - ALL actions must update state and broadcast\n      let updated = false;\n      const version = room.version ? BigInt(room.version) : BigInt(1);\n      \n      // Verify it's the player's turn (except for peek phase where all players peek)\n      const currentPlayerSlot = gameState.tableSlots[gameState.currentPlayerIndex];\n      const isPlayerTurn = currentPlayerSlot?.playerId === userId;\n      \n      switch (action) {\n        case 'draw_card':\n          if (!isPlayerTurn && gameState.gamePhase !== 'peek') {\n            return res.status(400).json({ success: false, message: \"Not your turn\" });\n          }\n          \n          // Draw a card from the deck\n          if (gameState.deck && gameState.deck.length > 0) {\n            gameState.drawnCard = gameState.deck.pop();\n            gameState.drawnCard.faceUp = true; // Drawn card is visible\n            updated = true;\n            console.log(`[GAME_ACTION] ${action} by ${userId} in room ${code} - deck now has ${gameState.deck.length} cards`);\n          }\n          break;\n          \n        case 'select_grid_position':\n          if (!isPlayerTurn && gameState.gamePhase !== 'peek') {\n            return res.status(400).json({ success: false, message: \"Not your turn\" });\n          }\n          \n          // Store the selected position for card replacement\n          gameState.selectedPosition = actionData.position;\n          updated = true;\n          console.log(`[GAME_ACTION] ${action} at position ${actionData.position} by ${userId} in room ${code}`);\n          break;\n          \n        case 'keep_drawn_card':\n          if (!isPlayerTurn) {\n            return res.status(400).json({ success: false, message: \"Not your turn\" });\n          }\n          \n          // Replace selected card with drawn card\n          if (gameState.drawnCard && gameState.selectedPosition !== undefined) {\n            const playerSlot = gameState.tableSlots.find((s: any) => s.playerId === userId);\n            if (playerSlot && playerSlot.cards && playerSlot.cards[gameState.selectedPosition]) {\n              // Move old card to discard pile\n              const oldCard = playerSlot.cards[gameState.selectedPosition];\n              oldCard.faceUp = true; // Discarded cards are face up\n              gameState.discardPile.push(oldCard);\n              \n              // Replace with drawn card\n              playerSlot.cards[gameState.selectedPosition] = {\n                ...gameState.drawnCard,\n                isRevealed: true,\n                faceUp: false, // In player's grid, cards are face down but revealed to them\n                position: gameState.selectedPosition\n              };\n              \n              gameState.drawnCard = null;\n              gameState.selectedPosition = undefined;\n              updated = true;\n              console.log(`[GAME_ACTION] ${action} by ${userId} - replaced card at position ${gameState.selectedPosition}`);\n            }\n          }\n          break;\n          \n        case 'keep_revealed_card':\n          if (!isPlayerTurn) {\n            return res.status(400).json({ success: false, message: \"Not your turn\" });\n          }\n          \n          // Keep card from discard pile\n          if (gameState.discardPile && gameState.discardPile.length > 0 && gameState.selectedPosition !== undefined) {\n            const playerSlot = gameState.tableSlots.find((s: any) => s.playerId === userId);\n            if (playerSlot && playerSlot.cards && playerSlot.cards[gameState.selectedPosition]) {\n              const revealedCard = gameState.discardPile.pop();\n              \n              // Move old card to discard pile\n              const oldCard = playerSlot.cards[gameState.selectedPosition];\n              oldCard.faceUp = true;\n              gameState.discardPile.push(oldCard);\n              \n              // Replace with revealed card\n              playerSlot.cards[gameState.selectedPosition] = {\n                ...revealedCard,\n                isRevealed: true,\n                faceUp: false,\n                position: gameState.selectedPosition\n              };\n              \n              gameState.selectedPosition = undefined;\n              updated = true;\n              console.log(`[GAME_ACTION] ${action} by ${userId} - took card from discard pile`);\n            }\n          }\n          break;\n          \n        case 'discard_drawn_card':\n          if (!isPlayerTurn) {\n            return res.status(400).json({ success: false, message: \"Not your turn\" });\n          }\n          \n          // Discard the drawn card without keeping it\n          if (gameState.drawnCard) {\n            gameState.drawnCard.faceUp = true;\n            gameState.discardPile.push(gameState.drawnCard);\n            gameState.drawnCard = null;\n            gameState.selectedPosition = undefined;\n            updated = true;\n            console.log(`[GAME_ACTION] ${action} by ${userId} - discarded drawn card`);\n          }\n          break;\n          \n        case 'peek_card':\n          // During peek phase, players can only peek at their own cards\n          if (gameState.gamePhase === 'peek') {\n            const playerSlot = gameState.tableSlots.find((s: any) => s.playerId === userId);\n            if (playerSlot && playerSlot.cards && playerSlot.cards[actionData.index]) {\n              // Mark card as revealed for this player\n              playerSlot.cards[actionData.index].isRevealed = true;\n              updated = true;\n              \n              // Check if player has peeked at 2 cards\n              const revealedCount = playerSlot.cards.filter((c: any) => c.isRevealed).length;\n              console.log(`[GAME_ACTION] ${action} at index ${actionData.index} by ${userId} - revealed ${revealedCount} cards`);\n              \n              // Auto-advance if all players have peeked\n              if (revealedCount >= 2) {\n                // Check if all players have peeked\n                const allPeeked = gameState.tableSlots\n                  .filter((s: any) => !s.isEmpty)\n                  .every((s: any) => s.cards.filter((c: any) => c.isRevealed).length >= 2);\n                \n                if (allPeeked) {\n                  gameState.gamePhase = 'playing';\n                  gameState.currentPlayerIndex = 0;\n                  console.log(`[GAME_ACTION] All players peeked - starting playing phase`);\n                }\n              }\n            }\n          }\n          break;\n          \n        case 'end_turn':\n          if (!isPlayerTurn) {\n            return res.status(400).json({ success: false, message: \"Not your turn\" });\n          }\n          \n          // Move to next player\n          const activePlayers = gameState.tableSlots.filter((s: any) => !s.isEmpty);\n          gameState.currentPlayerIndex = (gameState.currentPlayerIndex + 1) % activePlayers.length;\n          gameState.drawnCard = null;\n          gameState.selectedPosition = undefined;\n          gameState.turnCount = (gameState.turnCount || 0) + 1;\n          updated = true;\n          console.log(`[GAME_ACTION] ${action} by ${userId} - now player ${gameState.currentPlayerIndex}'s turn`);\n          break;\n          \n        default:\n          return res.status(400).json({ success: false, message: \"Unknown action: \" + action });\n      }\n      \n      // If game state was updated, save and broadcast to ALL clients\n      if (updated) {\n        const newVersion = version + BigInt(1);\n        \n        // Save the updated game state\n        const updatedRoom = await storage.updateGameRoom(code, {\n          gameState,\n          version: newVersion\n        });\n        \n        if (updatedRoom) {\n          // Broadcast updated room snapshot to ALL room subscribers\n          const broadcastSnapshotFn = (global as any).broadcastRoomSnapshot;\n          if (broadcastSnapshotFn) {\n            await broadcastSnapshotFn(code, updatedRoom);\n            console.log(`[BROADCAST] Room ${code} snapshot v${newVersion} sent to all subscribers`);\n          }\n          \n          res.json({ \n            success: true, \n            message: \"Action processed and broadcast\",\n            version: newVersion.toString()\n          });\n        } else {\n          res.status(500).json({ \n            success: false, \n            message: \"Failed to save game state\" \n          });\n        }\n      } else {\n        res.json({ \n          success: true, \n          message: \"No state change\",\n          version: version.toString()\n        });\n      }\n    } catch (error) {\n      console.error(\"Error processing game action:\", error);\n      res.status(500).json({ success: false, message: \"Failed to process action\" });\n    }\n  });\n\n  // Leave room endpoint\n  app.post('/api/rooms/:code/leave', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { code } = req.params;\n      \n      const room = await storage.getGameRoom(code);\n      if (!room) {\n        return res.status(404).json({ message: \"Room not found\" });\n      }\n      \n      let players = room.players as any[];\n      const beforeSeats = players.length;\n      players = players.filter(p => p.id !== userId);\n      \n      // Also update game state to vacate the seat\n      const gameState = room.gameState as any;\n      if (gameState?.tableSlots) {\n        const seat = gameState.tableSlots.find((s: any) => s.playerId === userId);\n        if (seat) {\n          seat.isEmpty = true;\n          seat.playerId = null;\n          seat.playerName = null;\n          seat.isActive = false;\n        }\n      }\n      \n      // If room is now empty, delete it immediately\n      if (players.length === 0) {\n        await storage.deleteGameRoom(code);\n        console.log(`[LEAVE] roomId=${code}, seatsAfter=0, deleted=true`);\n        console.log(`[PROJECTION_REMOVE] roomId=${code}`);\n        \n        // Broadcast room removal to Active Rooms subscribers\n        const broadcastFn = (global as any).broadcastRoomUpdate;\n        if (broadcastFn && room) {\n          broadcastFn('removed', room);\n        }\n        \n        return res.json({ message: \"Left room and room deleted\" });\n      }\n      \n      // Update room with remaining players and updated game state\n      const updatedRoom = await storage.updateGameRoom(code, {\n        players,\n        gameState,\n        hostId: players[0].id // Transfer host to first remaining player\n      });\n      \n      console.log(`[LEAVE] roomId=${code}, seatsAfter=${players.length}, deleted=false`);\n      \n      // Broadcast room update to lobby\n      const broadcastFn = (global as any).broadcastRoomUpdate;\n      if (broadcastFn && updatedRoom) {\n        broadcastFn('updated', updatedRoom);\n      }\n      \n      // Broadcast room snapshot to remaining room subscribers\n      const broadcastSnapshotFn = (global as any).broadcastRoomSnapshot;\n      if (broadcastSnapshotFn && updatedRoom) {\n        await broadcastSnapshotFn(code, updatedRoom);\n      }\n      \n      res.json({ message: \"Left room successfully\", room: serializeRoom(updatedRoom) });\n    } catch (error) {\n      console.error(\"Error leaving room:\", error);\n      res.status(500).json({ message: \"Failed to leave room\" });\n    }\n  });\n\n  // Settings routes\n  app.get('/api/user/settings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      let settings = await storage.getUserSettings(userId);\n      \n      // Create default settings if none exist\n      if (!settings) {\n        settings = await storage.upsertUserSettings(userId, {});\n      }\n      \n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching user settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch user settings\" });\n    }\n  });\n\n  app.patch('/api/user/settings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const updates = req.body;\n      \n      const settings = await storage.upsertUserSettings(userId, updates);\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error updating user settings:\", error);\n      res.status(500).json({ message: \"Failed to update user settings\" });\n    }\n  });\n\n\n  const httpServer = createServer(app);\n  \n  // WebSocket server for real-time subscriptions\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  // Track subscriptions by client\n  interface ClientSubscription {\n    ws: WebSocket;\n    stakeBracket?: StakeBracket;\n    subscribedAt: Date;\n    userId?: string;\n    roomCode?: string;\n    roomId?: string; // For specific room subscriptions\n  }\n  \n  const activeSubscriptions = new Map<string, ClientSubscription>();\n  const userConnections = new Map<string, Set<string>>(); // userId -> Set of clientIds\n  const GRACE_PERIOD_MS = 30000; // 30 seconds grace period for reconnection\n  \n  wss.on('connection', (ws: WebSocket) => {\n    const clientId = Math.random().toString(36).substring(7);\n    console.log(`WebSocket client connected: ${clientId}`);\n    \n    ws.on('message', async (message: Buffer) => {\n      try {\n        const data = JSON.parse(message.toString());\n        \n        // Handle user authentication for connection tracking\n        if (data.type === 'authenticate' && data.userId) {\n          const subscription = activeSubscriptions.get(clientId) || { ws, subscribedAt: new Date() };\n          subscription.userId = data.userId;\n          activeSubscriptions.set(clientId, subscription);\n          \n          // Track user connections\n          if (!userConnections.has(data.userId)) {\n            userConnections.set(data.userId, new Set());\n          }\n          userConnections.get(data.userId)!.add(clientId);\n          \n          // If user joins a room, update their connection state\n          if (data.roomCode) {\n            subscription.roomCode = data.roomCode;\n            await updatePlayerConnectionState(data.roomCode, data.userId, true, clientId);\n          }\n        }\n        \n        if (data.type === 'subscribe_room') {\n          // Subscribe to specific room for game updates\n          const roomId = data.roomId;\n          const room = await storage.getGameRoom(roomId);\n          \n          if (room) {\n            const subscription: ClientSubscription = {\n              ws,\n              subscribedAt: new Date(),\n              roomId: roomId\n            };\n            activeSubscriptions.set(clientId, subscription);\n            \n            console.log(`Client ${clientId} subscribed to room ${roomId}`);\n            \n            // Send initial room snapshot with proper serialization\n            const snapshot = {\n              code: room.code,\n              id: room.id,\n              maxPlayers: room.maxPlayers || 4,\n              playersSeated: room.players ? (room.players as any[]).length : 0,\n              seatsOpen: (room.maxPlayers || 4) - (room.players ? (room.players as any[]).length : 0),\n              rounds: (room.settings as any)?.rounds || 9,\n              stakeBracket: room.stakeBracket,\n              status: room.status,\n              gameState: room.gameState,\n              players: room.players,\n              version: room.version ? room.version.toString() : '1',\n              currentRound: (room.gameState as any)?.currentRound || 0,\n              currentPlayerIndex: (room.gameState as any)?.currentPlayerIndex || 0\n            };\n            \n            ws.send(JSON.stringify({\n              type: 'room_snapshot',\n              snapshot,\n              timestamp: new Date().toISOString()\n            }));\n          } else {\n            ws.send(JSON.stringify({ \n              type: 'error', \n              message: 'Room not found' \n            }));\n          }\n        } else if (data.type === 'subscribe_rooms') {\n          // Subscribe to room updates\n          const subscription: ClientSubscription = {\n            ws,\n            stakeBracket: data.stakeBracket,\n            subscribedAt: new Date()\n          };\n          activeSubscriptions.set(clientId, subscription);\n          \n          // Send initial room list\n          const rooms = await getActiveRooms(data.stakeBracket);\n          ws.send(JSON.stringify({\n            type: 'rooms_snapshot',\n            rooms,\n            timestamp: new Date().toISOString()\n          }));\n          \n          console.log(`Client ${clientId} subscribed to rooms (stake: ${data.stakeBracket || 'all'})`);\n        }\n        \n        if (data.type === 'unsubscribe_rooms') {\n          activeSubscriptions.delete(clientId);\n          console.log(`Client ${clientId} unsubscribed from rooms`);\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n        ws.send(JSON.stringify({ type: 'error', message: 'Invalid message format' }));\n      }\n    });\n    \n    ws.on('close', async () => {\n      const subscription = activeSubscriptions.get(clientId);\n      \n      if (subscription?.userId && subscription?.roomCode) {\n        // Mark player as disconnected but don't remove immediately (grace period)\n        await updatePlayerConnectionState(subscription.roomCode, subscription.userId, false, clientId);\n        \n        // Remove from user connections\n        const userConns = userConnections.get(subscription.userId);\n        if (userConns) {\n          userConns.delete(clientId);\n          if (userConns.size === 0) {\n            userConnections.delete(subscription.userId);\n            \n            // Start grace period timer\n            setTimeout(async () => {\n              // Check if user reconnected\n              if (!userConnections.has(subscription.userId!)) {\n                // User didn't reconnect, clean up their seat\n                await cleanupDisconnectedPlayer(subscription.roomCode!, subscription.userId!);\n              }\n            }, GRACE_PERIOD_MS);\n          }\n        }\n      }\n      \n      activeSubscriptions.delete(clientId);\n      console.log(`WebSocket client disconnected: ${clientId}`);\n    });\n    \n    ws.on('error', (error) => {\n      console.error(`WebSocket error for client ${clientId}:`, error);\n      activeSubscriptions.delete(clientId);\n    });\n  });\n  \n  // Helper function to serialize room data (converts BigInt to string)\n  function serializeRoom(room: GameRoom): any {\n    return {\n      ...room,\n      version: room.version ? room.version.toString() : '1'\n    };\n  }\n  \n  // Helper function to get active rooms per Active Room definition\n  async function getActiveRooms(stakeBracket?: StakeBracket): Promise<GameRoom[]> {\n    // Use improved storage method that already filters per Active Room definition\n    if (stakeBracket) {\n      const rooms = await storage.getActiveRoomsByStake(stakeBracket);\n      return rooms.map(serializeRoom);\n    }\n    \n    // Get all active rooms if no stake specified\n    const allRooms = await storage.getAllActiveRooms();\n    \n    // Apply Active Room definition:\n    // Active Rooms = Tables with Open Seats\n    // 1. players ≥ 1 (at least one seated)\n    // 2. seatsOpen > 0 (not full) \n    // 3. visibility allows listing\n    // 4. Not in finished state\n    const activeRooms: GameRoom[] = [];\n    \n    for (const room of allRooms) {\n      const players = room.players as any[];\n      \n      // Delete zero-player rooms immediately\n      if (!players || players.length === 0) {\n        await storage.deleteGameRoom(room.code);\n        console.log(`Deleted empty room ${room.code} (zero players)`);\n        continue;\n      }\n      \n      // Active Room criteria check\n      const hasPlayers = players.length >= 1;\n      const maxPlayers = room.maxPlayers || 4;\n      const seatsOpen = maxPlayers - players.length;\n      const hasOpenSeats = seatsOpen > 0; // MUST have open seats to be listed\n      const visibility = room.visibility || 'public';\n      const isListable = visibility === 'public';\n      const notFinished = room.status !== 'finished';\n      \n      // Only list tables with open seats (not full)\n      if (hasPlayers && hasOpenSeats && isListable && notFinished) {\n        activeRooms.push(serializeRoom(room));\n      }\n    }\n    \n    return activeRooms;\n  }\n  \n  // Broadcast room changes to subscribers\n  async function broadcastRoomUpdate(changeType: 'created' | 'updated' | 'removed', room: GameRoom) {\n    const allRooms = await getActiveRooms();\n    \n    activeSubscriptions.forEach((subscription, clientId) => {\n      // Filter rooms based on subscription's stake bracket\n      const filteredRooms = subscription.stakeBracket \n        ? allRooms.filter(r => r.stakeBracket === subscription.stakeBracket)\n        : allRooms;\n      \n      // Check if this room change is relevant to the subscriber\n      const isRelevant = !subscription.stakeBracket || room.stakeBracket === subscription.stakeBracket;\n      \n      if (isRelevant && subscription.ws.readyState === WebSocket.OPEN) {\n        subscription.ws.send(JSON.stringify({\n          type: 'rooms_update',\n          changeType,\n          room: serializeRoom(room),\n          rooms: filteredRooms, // Already serialized from getActiveRooms\n          timestamp: new Date().toISOString()\n        }));\n      }\n    });\n  }\n  \n  // Helper function to update player connection state\n  async function updatePlayerConnectionState(roomCode: string, userId: string, connected: boolean, connectionId?: string) {\n    try {\n      const room = await storage.getGameRoom(roomCode);\n      if (!room) return;\n      \n      const players = room.players as any[];\n      const player = players.find(p => p.id === userId);\n      \n      if (player) {\n        // Update connection state\n        player.connected = connected;\n        player.lastSeen = new Date().toISOString();\n        if (connectionId) {\n          player.connectionId = connectionId;\n        }\n        \n        // Update room with new player state\n        await storage.updateGameRoom(roomCode, { players });\n        \n        // Broadcast update\n        broadcastRoomUpdate('updated', room);\n      }\n    } catch (error) {\n      console.error(`Error updating connection state for ${userId} in room ${roomCode}:`, error);\n    }\n  }\n  \n  // Helper function to clean up disconnected player after grace period\n  async function cleanupDisconnectedPlayer(roomCode: string, userId: string) {\n    try {\n      const room = await storage.getGameRoom(roomCode);\n      if (!room) return;\n      \n      let players = room.players as any[];\n      const player = players.find(p => p.id === userId);\n      \n      if (player && !player.connected) {\n        const lastSeenTime = new Date(player.lastSeen).getTime();\n        const now = Date.now();\n        \n        // Check if grace period has expired\n        if (now - lastSeenTime >= GRACE_PERIOD_MS) {\n          // Remove player from room\n          players = players.filter(p => p.id !== userId);\n          \n          // Update game state to vacate seat\n          const gameState = room.gameState as any;\n          if (gameState?.tableSlots) {\n            const seat = gameState.tableSlots.find((s: any) => s.playerId === userId);\n            if (seat) {\n              seat.isEmpty = true;\n              seat.playerId = null;\n              seat.playerName = null;\n              seat.isActive = false;\n            }\n          }\n          \n          // If room is now empty, delete it\n          if (players.length === 0) {\n            await storage.deleteGameRoom(roomCode);\n            console.log(`[Grace Period] Room ${roomCode} deleted (all players disconnected)`);\n            broadcastRoomUpdate('removed', room);\n          } else {\n            // Update room with remaining players\n            const updatedRoom = await storage.updateGameRoom(roomCode, { \n              players,\n              gameState,\n              hostId: players[0].id // Transfer host if needed\n            });\n            \n            if (updatedRoom) {\n              console.log(`[Grace Period] Player ${userId} removed from room ${roomCode} after grace period`);\n              broadcastRoomUpdate('updated', updatedRoom);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error(`Error cleaning up disconnected player ${userId} in room ${roomCode}:`, error);\n    }\n  }\n  \n  // Broadcast room snapshot to specific room subscribers\n  async function broadcastRoomSnapshot(roomCode: string, room: GameRoom) {\n    activeSubscriptions.forEach((subscription, clientId) => {\n      // Check if this client is subscribed to this specific room\n      if (subscription.roomId === roomCode && subscription.ws.readyState === WebSocket.OPEN) {\n        const snapshot = {\n          code: room.code,\n          id: room.id,\n          maxPlayers: room.maxPlayers || 4,\n          playersSeated: (room.players as any[]).length,\n          seatsOpen: (room.maxPlayers || 4) - (room.players as any[]).length,\n          rounds: (room.settings as any)?.rounds || 9,\n          stakeBracket: room.stakeBracket,\n          status: room.status,\n          gameState: room.gameState,\n          players: room.players,\n          version: room.version ? room.version.toString() : '1',\n          currentRound: (room.gameState as any)?.currentRound || 0,\n          currentPlayerIndex: (room.gameState as any)?.currentPlayerIndex || 0\n        };\n        \n        subscription.ws.send(JSON.stringify({\n          type: 'room_snapshot',\n          snapshot,\n          timestamp: new Date().toISOString()\n        }));\n      }\n    });\n  }\n  \n  // Export broadcast functions for use in other parts of the application\n  (global as any).broadcastRoomUpdate = broadcastRoomUpdate;\n  (global as any).broadcastRoomSnapshot = broadcastRoomSnapshot;\n  \n  // Periodic cleanup of phantom rooms (every 30 seconds)\n  setInterval(async () => {\n    try {\n      const allRooms = await storage.getAllActiveRooms();\n      let cleanedCount = 0;\n      \n      for (const room of allRooms) {\n        const players = room.players as any[];\n        \n        // Delete rooms with zero players\n        if (!players || players.length === 0) {\n          await storage.deleteGameRoom(room.code);\n          cleanedCount++;\n          console.log(`[Cleanup] Deleted phantom room ${room.code} (zero players)`);\n          \n          // Broadcast removal\n          broadcastRoomUpdate('removed', room);\n        }\n      }\n      \n      if (cleanedCount > 0) {\n        console.log(`[Cleanup] Removed ${cleanedCount} phantom rooms`);\n      }\n    } catch (error) {\n      console.error('[Cleanup] Error during phantom room cleanup:', error);\n    }\n  }, 30000); // Run every 30 seconds\n  \n  return httpServer;\n}","size_bytes":48713},"server/seedData.ts":{"content":"import { db } from \"./db\";\nimport { achievements, cosmetics } from \"@shared/schema\";\n\nexport async function seedAchievements() {\n  const achievementData = [\n    {\n      id: \"first_win\",\n      name: \"First Victory\",\n      description: \"Win your first game of Golf 9\",\n      icon: \"trophy\",\n      xpReward: 50,\n      coinReward: 25,\n      requirement: { type: \"wins\", count: 1 }\n    },\n    {\n      id: \"perfect_game\",\n      name: \"Perfect Score\",\n      description: \"Complete a game with a score of 0\",\n      icon: \"star\",\n      xpReward: 100,\n      coinReward: 50,\n      requirement: { type: \"perfect_score\", count: 1 }\n    },\n    {\n      id: \"streak_5\",\n      name: \"Hot Streak\",\n      description: \"Win 5 games in a row\",\n      icon: \"fire\",\n      xpReward: 75,\n      coinReward: 35,\n      requirement: { type: \"win_streak\", count: 5 }\n    },\n    {\n      id: \"games_10\",\n      name: \"Getting Started\",\n      description: \"Play 10 games\",\n      icon: \"gamepad\",\n      xpReward: 30,\n      coinReward: 15,\n      requirement: { type: \"games_played\", count: 10 }\n    },\n    {\n      id: \"level_10\",\n      name: \"Rising Star\",\n      description: \"Reach level 10\",\n      icon: \"level-up\",\n      xpReward: 150,\n      coinReward: 75,\n      requirement: { type: \"level\", count: 10 }\n    }\n  ];\n\n  await db.insert(achievements).values(achievementData).onConflictDoNothing();\n}\n\nexport async function seedCosmetics() {\n  const cosmeticData = [\n    // Card backs\n    {\n      id: \"classic_royal_blue\",\n      type: \"card_back\",\n      name: \"Classic Royal Blue\",\n      description: \"Traditional royal blue with ornate white flourishes\",\n      rarity: \"common\",\n      cost: 0,\n      unlockLevel: 1,\n      imageUrl: \"@assets/generated_images/Classic_Royal_Blue_Card_e92be256.png\"\n    },\n    {\n      id: \"crimson_gold_ornate\",\n      type: \"card_back\",\n      name: \"Crimson Gold\",\n      description: \"Deep crimson with gold geometric patterns\",\n      rarity: \"rare\",\n      cost: 50,\n      unlockLevel: 3,\n      imageUrl: \"@assets/generated_images/Crimson_Gold_Ornate_Card_0af373f8.png\"\n    },\n    {\n      id: \"emerald_celtic\",\n      type: \"card_back\",\n      name: \"Emerald Celtic\",\n      description: \"Elegant emerald green with silver Celtic knots\",\n      rarity: \"rare\",\n      cost: 75,\n      unlockLevel: 5,\n      imageUrl: \"@assets/generated_images/Emerald_Celtic_Pattern_Card_cc828358.png\"\n    },\n    {\n      id: \"midnight_geometric\",\n      type: \"card_back\",\n      name: \"Midnight Geometric\",\n      description: \"Sleek black with modern geometric silver accents\",\n      rarity: \"epic\",\n      cost: 125,\n      unlockLevel: 8,\n      imageUrl: \"@assets/generated_images/Midnight_Modern_Geometric_Card_4181dee8.png\"\n    },\n    {\n      id: \"purple_art_deco\",\n      type: \"card_back\",\n      name: \"Purple Art Deco\",\n      description: \"Deep purple with gold 1920s style flourishes\",\n      rarity: \"epic\",\n      cost: 150,\n      unlockLevel: 10,\n      imageUrl: \"@assets/generated_images/Purple_Art_Deco_Card_ca6e4c63.png\"\n    },\n    {\n      id: \"bronze_western\",\n      type: \"card_back\",\n      name: \"Bronze Western\",\n      description: \"Warm bronze with copper swirl western motifs\",\n      rarity: \"rare\",\n      cost: 100,\n      unlockLevel: 7,\n      imageUrl: \"@assets/generated_images/Bronze_Western_Style_Card_52c428e4.png\"\n    },\n    {\n      id: \"nautical_ocean\",\n      type: \"card_back\",\n      name: \"Nautical Ocean\",\n      description: \"Ocean blue with white wave patterns and rope borders\",\n      rarity: \"epic\",\n      cost: 175,\n      unlockLevel: 12,\n      imageUrl: \"@assets/generated_images/Nautical_Ocean_Wave_Card_2ddded57.png\"\n    },\n    {\n      id: \"forest_botanical\",\n      type: \"card_back\",\n      name: \"Forest Botanical\",\n      description: \"Forest green with gold leaf botanical motifs\",\n      rarity: \"epic\",\n      cost: 200,\n      unlockLevel: 15,\n      imageUrl: \"@assets/generated_images/Forest_Botanical_Luxury_Card_ccc4668d.png\"\n    },\n    {\n      id: \"cyberpunk_neon\",\n      type: \"card_back\",\n      name: \"Cyberpunk Neon\",\n      description: \"Charcoal gray with electric blue neon circuits\",\n      rarity: \"legendary\",\n      cost: 300,\n      unlockLevel: 18,\n      imageUrl: \"@assets/generated_images/Cyberpunk_Neon_Tech_Card_59d68df2.png\"\n    },\n    {\n      id: \"rose_gold_marble\",\n      type: \"card_back\",\n      name: \"Rose Gold Marble\",\n      description: \"Rose gold with pink marble texture and geometric lines\",\n      rarity: \"epic\",\n      cost: 180,\n      unlockLevel: 13,\n      imageUrl: \"@assets/generated_images/Rose_Gold_Marble_Card_a74d530a.png\"\n    },\n    {\n      id: \"antique_ivory\",\n      type: \"card_back\",\n      name: \"Antique Ivory\",\n      description: \"Vintage ivory with sepia brown ornamental details\",\n      rarity: \"rare\",\n      cost: 90,\n      unlockLevel: 6,\n      imageUrl: \"@assets/generated_images/Antique_Ivory_Heritage_Card_863ad18a.png\"\n    },\n    {\n      id: \"turquoise_tribal\",\n      type: \"card_back\",\n      name: \"Turquoise Tribal\",\n      description: \"Vibrant turquoise with silver southwestern patterns\",\n      rarity: \"epic\",\n      cost: 160,\n      unlockLevel: 11,\n      imageUrl: \"@assets/generated_images/Turquoise_Tribal_Pattern_Card_6d3a0abd.png\"\n    },\n    {\n      id: \"mahogany_baroque\",\n      type: \"card_back\",\n      name: \"Mahogany Baroque\",\n      description: \"Deep mahogany with gold filigree baroque details\",\n      rarity: \"legendary\",\n      cost: 350,\n      unlockLevel: 20,\n      imageUrl: \"@assets/generated_images/Mahogany_Baroque_Luxury_Card_e300c138.png\"\n    },\n    {\n      id: \"pearl_holographic\",\n      type: \"card_back\",\n      name: \"Pearl Holographic\",\n      description: \"Pearl white with holographic rainbow shimmer effects\",\n      rarity: \"legendary\",\n      cost: 400,\n      unlockLevel: 25,\n      imageUrl: \"@assets/generated_images/Pearl_Holographic_Modern_Card_62ae8ace.png\"\n    },\n    {\n      id: \"steel_steampunk\",\n      type: \"card_back\",\n      name: \"Steel Steampunk\",\n      description: \"Steel gray with chrome accents and industrial gears\",\n      rarity: \"legendary\",\n      cost: 250,\n      unlockLevel: 16,\n      imageUrl: \"@assets/generated_images/Steel_Steampunk_Industrial_Card_3b92933e.png\"\n    },\n    // Avatars\n    {\n      id: \"default_avatar\", \n      type: \"avatar\",\n      name: \"Default\",\n      description: \"Simple default player avatar\",\n      rarity: \"common\",\n      cost: 0,\n      unlockLevel: 1,\n      imageUrl: \"@assets/generated_images/Simple_Default_Avatar_fab5c9e0.png\"\n    },\n    {\n      id: \"professional_avatar\",\n      type: \"avatar\",\n      name: \"Professional\",\n      description: \"Confident business professional\",\n      rarity: \"rare\",\n      cost: 75,\n      unlockLevel: 5,\n      imageUrl: \"@assets/generated_images/Professional_Business_Avatar_8860d667.png\"\n    },\n    {\n      id: \"gaming_avatar\",\n      type: \"avatar\",\n      name: \"Gaming Pro\",\n      description: \"Elite gaming enthusiast with headphones\",\n      rarity: \"rare\",\n      cost: 100,\n      unlockLevel: 10,\n      imageUrl: \"@assets/generated_images/Gaming_Enthusiast_Avatar_6f97dd65.png\"\n    },\n    {\n      id: \"elegant_avatar\",\n      type: \"avatar\",\n      name: \"Elegant Gold\",\n      description: \"Sophisticated luxury avatar\",\n      rarity: \"epic\",\n      cost: 200,\n      unlockLevel: 15,\n      imageUrl: \"@assets/generated_images/Elegant_Premium_Avatar_db98b5b8.png\"\n    },\n    {\n      id: \"mysterious_avatar\",\n      type: \"avatar\",\n      name: \"Shadow Walker\",\n      description: \"Enigmatic hooded figure\",\n      rarity: \"legendary\",\n      cost: 500,\n      unlockLevel: 25,\n      imageUrl: \"@assets/generated_images/Mysterious_Shadow_Avatar_9d70c2ca.png\"\n    },\n    {\n      id: \"golfer_avatar\",\n      type: \"avatar\", \n      name: \"Pro Golfer\",\n      description: \"Professional tournament player\",\n      rarity: \"rare\",\n      cost: 75,\n      unlockLevel: 8,\n      imageUrl: \"@assets/generated_images/Professional_Golfer_Avatar_52698db1.png\"\n    },\n    {\n      id: \"beach_avatar\",\n      type: \"avatar\",\n      name: \"Beach Vibes\",\n      description: \"Tropical vacation style with sunglasses\",\n      rarity: \"rare\",\n      cost: 80,\n      unlockLevel: 7,\n      imageUrl: \"@assets/generated_images/Beach_Vacation_Avatar_19a231ab.png\"\n    },\n    {\n      id: \"poker_avatar\",\n      type: \"avatar\",\n      name: \"Casino Player\",\n      description: \"Sophisticated poker professional\",\n      rarity: \"rare\",\n      cost: 120,\n      unlockLevel: 12,\n      imageUrl: \"@assets/generated_images/Poker_Player_Avatar_692713df.png\"\n    },\n    {\n      id: \"female_pro_avatar\",\n      type: \"avatar\",\n      name: \"Executive Lady\",\n      description: \"Confident businesswoman leader\",\n      rarity: \"rare\",\n      cost: 90,\n      unlockLevel: 8,\n      imageUrl: \"@assets/generated_images/Professional_Female_Avatar_ce38d866.png\"\n    },\n    {\n      id: \"american_flag_avatar\",\n      type: \"avatar\",\n      name: \"Patriot\",\n      description: \"American flag themed avatar\",\n      rarity: \"epic\",\n      cost: 250,\n      unlockLevel: 18,\n      imageUrl: \"@assets/generated_images/American_Flag_Avatar_88ae7301.png\"\n    },\n    {\n      id: \"female_gamer_avatar\",\n      type: \"avatar\",\n      name: \"Gamer Girl\",\n      description: \"Female gaming enthusiast with headset\",\n      rarity: \"rare\",\n      cost: 110,\n      unlockLevel: 11,\n      imageUrl: \"@assets/generated_images/Female_Gamer_Avatar_d7259774.png\"\n    },\n    // Table themes\n    {\n      id: \"green_felt\",\n      type: \"table_theme\",\n      name: \"Green Felt\",\n      description: \"Classic casino-style green felt table\",\n      rarity: \"common\",\n      cost: 0,\n      unlockLevel: 1,\n      imageUrl: \"@assets/generated_images/Green_Felt_Table_Texture_2c002c0f.png\"\n    },\n    {\n      id: \"wood_mahogany\",\n      type: \"table_theme\",\n      name: \"Mahogany Wood\",\n      description: \"Luxurious mahogany wood finish\",\n      rarity: \"epic\",\n      cost: 200,\n      unlockLevel: 20,\n      imageUrl: \"@assets/generated_images/Mahogany_Wood_Table_47b7e302.png\"\n    }\n  ];\n\n  await db.insert(cosmetics).values(cosmeticData).onConflictDoNothing();\n}\n\nexport async function seedDatabase() {\n  try {\n    console.log(\"Starting database seeding...\");\n    \n    console.log(\"Seeding achievements...\");\n    await seedAchievements();\n    console.log(\"Achievements seeded successfully\");\n    \n    console.log(\"Seeding cosmetics...\");\n    await seedCosmetics();\n    console.log(\"Cosmetics seeded successfully\");\n    \n    console.log(\"Database seeded successfully\");\n  } catch (error) {\n    console.error(\"Error seeding database:\", error);\n    throw error; // Re-throw so the main startup can catch it\n  }\n}","size_bytes":10582},"server/storage.ts":{"content":"import {\n  users,\n  gameStats,\n  gameHistory,\n  achievements,\n  userAchievements,\n  cosmetics,\n  userCosmetics,\n  userSettings,\n  gameRooms,\n  type User,\n  type UpsertUser,\n  type GameStats,\n  type GameHistory,\n  type Achievement,\n  type UserAchievement,\n  type Cosmetic,\n  type UserCosmetic,\n  type UserSettings,\n  type GameRoom,\n  type InsertGameStats,\n  type InsertGameHistory,\n  type InsertUserAchievement,\n  type InsertUserCosmetic,\n  type InsertUserSettings,\n  type UpdateUserSettings,\n  type InsertGameRoom,\n  type StakeBracket,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, sql, and, gt, lt, ne } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Game progression operations\n  getUserStats(userId: string): Promise<GameStats | undefined>;\n  updateUserStats(userId: string, stats: Partial<InsertGameStats>): Promise<GameStats>;\n  addGameToHistory(gameData: InsertGameHistory): Promise<GameHistory>;\n  getUserGameHistory(userId: string, limit?: number): Promise<GameHistory[]>;\n  \n  // Achievement operations\n  getUserAchievements(userId: string): Promise<UserAchievement[]>;\n  unlockAchievement(data: InsertUserAchievement): Promise<UserAchievement>;\n  getAllAchievements(): Promise<Achievement[]>;\n  \n  // Cosmetic operations\n  getUserCosmetics(userId: string): Promise<UserCosmetic[]>;\n  purchaseCosmetic(data: InsertUserCosmetic): Promise<UserCosmetic>;\n  equipCosmetic(userId: string, cosmeticId: string): Promise<void>;\n  getAllCosmetics(): Promise<Cosmetic[]>;\n  \n  // Currency and XP operations\n  addCurrency(userId: string, amount: number): Promise<User>;\n  spendCurrency(userId: string, amount: number): Promise<User>;\n  addExperience(userId: string, amount: number): Promise<User>;\n  \n  // Settings operations\n  getUserSettings(userId: string): Promise<UserSettings | undefined>;\n  upsertUserSettings(userId: string, settings: UpdateUserSettings): Promise<UserSettings>;\n  \n  // Game room operations\n  createGameRoom(room: InsertGameRoom): Promise<GameRoom>;\n  getGameRoom(code: string): Promise<GameRoom | undefined>;\n  updateGameRoom(code: string, updates: Partial<GameRoom>): Promise<GameRoom | undefined>;\n  deleteGameRoom(code: string): Promise<void>;\n  getActiveRoomsByStake(stakeBracket: StakeBracket): Promise<GameRoom[]>;\n  getAllActiveRooms(): Promise<GameRoom[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (required for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    \n    // Check if user has default cosmetics, if not, give them\n    const userCosmeticsCount = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(userCosmetics)\n      .where(eq(userCosmetics.userId, user.id));\n    \n    if (userCosmeticsCount[0].count === 0) {\n      // Give user default cosmetics (all free ones)\n      const freeCosmetics = await db\n        .select()\n        .from(cosmetics)\n        .where(eq(cosmetics.cost, 0));\n      \n      for (const cosmetic of freeCosmetics) {\n        await db.insert(userCosmetics).values({\n          userId: user.id,\n          cosmeticId: cosmetic.id,\n          equipped: true // Equip all default cosmetics\n        });\n      }\n    }\n    \n    return user;\n  }\n\n  // Game progression operations\n  async getUserStats(userId: string): Promise<GameStats | undefined> {\n    const [stats] = await db.select().from(gameStats).where(eq(gameStats.userId, userId));\n    if (!stats) {\n      // Create initial stats for new user\n      const [newStats] = await db\n        .insert(gameStats)\n        .values({ userId })\n        .returning();\n      return newStats;\n    }\n    return stats;\n  }\n\n  async updateUserStats(userId: string, statsUpdate: Partial<InsertGameStats>): Promise<GameStats> {\n    const [updated] = await db\n      .update(gameStats)\n      .set({ ...statsUpdate, updatedAt: new Date() })\n      .where(eq(gameStats.userId, userId))\n      .returning();\n    return updated;\n  }\n\n  async addGameToHistory(gameData: InsertGameHistory): Promise<GameHistory> {\n    const [history] = await db\n      .insert(gameHistory)\n      .values(gameData)\n      .returning();\n    return history;\n  }\n\n  async getUserGameHistory(userId: string, limit = 10): Promise<GameHistory[]> {\n    return await db\n      .select()\n      .from(gameHistory)\n      .where(eq(gameHistory.userId, userId))\n      .orderBy(desc(gameHistory.createdAt))\n      .limit(limit);\n  }\n\n  // Achievement operations\n  async getUserAchievements(userId: string): Promise<UserAchievement[]> {\n    return await db\n      .select()\n      .from(userAchievements)\n      .where(eq(userAchievements.userId, userId));\n  }\n\n  async unlockAchievement(data: InsertUserAchievement): Promise<UserAchievement> {\n    const [achievement] = await db\n      .insert(userAchievements)\n      .values(data)\n      .returning();\n    return achievement;\n  }\n\n  async getAllAchievements(): Promise<Achievement[]> {\n    return await db.select().from(achievements);\n  }\n\n  // Cosmetic operations\n  async getUserCosmetics(userId: string): Promise<UserCosmetic[]> {\n    return await db\n      .select()\n      .from(userCosmetics)\n      .where(eq(userCosmetics.userId, userId));\n  }\n\n  async purchaseCosmetic(data: InsertUserCosmetic): Promise<UserCosmetic> {\n    const [cosmetic] = await db\n      .insert(userCosmetics)\n      .values(data)\n      .returning();\n    return cosmetic;\n  }\n\n  async equipCosmetic(userId: string, cosmeticId: string): Promise<void> {\n    // Get the cosmetic type\n    const [cosmetic] = await db.select().from(cosmetics).where(eq(cosmetics.id, cosmeticId));\n    if (cosmetic) {\n      // First, unequip all cosmetics of the same type for this user\n      await db\n        .update(userCosmetics)\n        .set({ equipped: false })\n        .where(and(\n          eq(userCosmetics.userId, userId),\n          sql`${userCosmetics.cosmeticId} IN (SELECT id FROM ${cosmetics} WHERE type = ${cosmetic.type})`\n        ));\n      \n      // Then equip the selected one\n      await db\n        .update(userCosmetics)\n        .set({ equipped: true })\n        .where(and(\n          eq(userCosmetics.userId, userId),\n          eq(userCosmetics.cosmeticId, cosmeticId)\n        ));\n    }\n  }\n\n  async getAllCosmetics(): Promise<Cosmetic[]> {\n    return await db.select().from(cosmetics);\n  }\n\n  // Currency and XP operations\n  async addCurrency(userId: string, amount: number): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ \n        currency: sql`${users.currency} + ${amount}`,\n        updatedAt: new Date() \n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async spendCurrency(userId: string, amount: number): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ \n        currency: sql`${users.currency} - ${amount}`,\n        updatedAt: new Date() \n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async addExperience(userId: string, amount: number): Promise<User> {\n    const currentUser = await this.getUser(userId);\n    if (!currentUser) throw new Error('User not found');\n    \n    const newExperience = (currentUser.experience || 0) + amount;\n    const newLevel = Math.floor(newExperience / 100) + 1; // Simple level calculation\n    \n    const [user] = await db\n      .update(users)\n      .set({ \n        experience: newExperience,\n        level: newLevel,\n        updatedAt: new Date() \n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  // Settings operations\n  async getUserSettings(userId: string): Promise<UserSettings | undefined> {\n    const [settings] = await db.select().from(userSettings).where(eq(userSettings.userId, userId));\n    return settings;\n  }\n\n  async upsertUserSettings(userId: string, settingsData: UpdateUserSettings): Promise<UserSettings> {\n    const [settings] = await db\n      .insert(userSettings)\n      .values({ userId, ...settingsData })\n      .onConflictDoUpdate({\n        target: userSettings.userId,\n        set: {\n          ...settingsData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return settings;\n  }\n\n  // Game room operations\n  async createGameRoom(roomData: InsertGameRoom & { status?: string; gameState?: any }): Promise<GameRoom> {\n    // Calculate player count from players array\n    const playerCount = Array.isArray(roomData.players) ? roomData.players.length : 1;\n    \n    // Default settings\n    const defaultSettings = {\n      rounds: 9,\n      playerCount: 4,\n      ...(roomData.settings ? roomData.settings : {})\n    };\n    \n    // Extract maxPlayers from settings or use default\n    const maxPlayers = defaultSettings.playerCount || 4;\n    \n    // Use raw SQL to ensure all fields are properly set\n    const result = await db.execute(sql`\n      INSERT INTO game_rooms (\n        code, \n        host_id, \n        players, \n        settings, \n        stake_bracket, \n        player_count, \n        status, \n        visibility, \n        max_players,\n        version,\n        game_state\n      )\n      VALUES (\n        ${roomData.code},\n        ${roomData.hostId},\n        ${JSON.stringify(roomData.players)}::jsonb,\n        ${JSON.stringify(defaultSettings)}::jsonb,\n        ${roomData.stakeBracket || 'free'},\n        ${playerCount},\n        ${roomData.status || 'room'},\n        'public',\n        ${maxPlayers},\n        1,\n        ${roomData.gameState ? JSON.stringify(roomData.gameState) : null}::jsonb\n      )\n      RETURNING *\n    `);\n    \n    return result.rows[0] as GameRoom;\n  }\n\n  async getGameRoom(code: string): Promise<GameRoom | undefined> {\n    const [room] = await db.select().from(gameRooms).where(eq(gameRooms.code, code));\n    return room;\n  }\n\n  async updateGameRoom(code: string, updates: Partial<GameRoom>): Promise<GameRoom | undefined> {\n    // Use drizzle's update builder instead of raw SQL for safety\n    const updateData: any = {};\n    \n    if (updates.players !== undefined) {\n      updateData.players = updates.players;\n      updateData.playerCount = updates.players.length;\n    }\n    \n    if (updates.gameState !== undefined) {\n      updateData.gameState = updates.gameState;\n    }\n    \n    if (updates.version !== undefined) {\n      updateData.version = updates.version.toString();\n    }\n    \n    if (updates.status !== undefined) {\n      updateData.status = updates.status;\n    }\n    \n    if (updates.hostId !== undefined) {\n      updateData.hostId = updates.hostId;\n    }\n    \n    if (Object.keys(updateData).length === 0) {\n      // Nothing to update\n      return await this.getGameRoom(code);\n    }\n    \n    const [result] = await db\n      .update(gameRooms)\n      .set(updateData)\n      .where(eq(gameRooms.code, code))\n      .returning();\n    return result as GameRoom;\n  }\n\n  async deleteGameRoom(code: string): Promise<void> {\n    // Delete with CASCADE to handle foreign key constraints\n    await db.execute(sql`\n      DELETE FROM game_rooms \n      WHERE code = ${code}\n    `);\n  }\n\n  async getActiveRoomsByStake(stakeBracket: StakeBracket): Promise<GameRoom[]> {\n    const rooms = await db\n      .select()\n      .from(gameRooms)\n      .where(\n        and(\n          eq(gameRooms.isActive, true),\n          eq(gameRooms.stakeBracket, stakeBracket),\n          gt(gameRooms.playerCount, 0), // Must have at least one player\n          lt(gameRooms.playerCount, gameRooms.maxPlayers), // Must have open seats (not full)\n          ne(gameRooms.status, 'finished') // Not finished games\n        )\n      );\n    \n    // Additional filtering per Active Room definition\n    // Active Rooms = Tables with Open Seats\n    const validRooms: GameRoom[] = [];\n    const GRACE_PERIOD_MS = 30000; // 30 seconds\n    const now = Date.now();\n    \n    for (const room of rooms) {\n      const players = room.players as any[];\n      \n      // Count only active seats (connected or within grace period)\n      const activeSeats = players.filter(player => {\n        if (player.connected) return true;\n        if (player.lastSeen) {\n          const lastSeenTime = new Date(player.lastSeen).getTime();\n          return (now - lastSeenTime) < GRACE_PERIOD_MS;\n        }\n        return false;\n      }).length;\n      \n      // Delete rooms with zero active seats immediately\n      if (activeSeats === 0) {\n        await this.deleteGameRoom(room.code);\n        console.log(`[Active Rooms] Deleted empty room ${room.code} (no active seats)`);\n        continue;\n      }\n      \n      // Active Room criteria:\n      // 1. activeSeats ≥ 1 (at least one active player)\n      const hasActivePlayers = activeSeats >= 1;\n      \n      // 2. seatsOpen > 0 (MUST have open seats - not full)\n      const maxPlayers = room.maxPlayers || 4;\n      const seatsOpen = maxPlayers - activeSeats; // Count open seats based on active players\n      const hasOpenSeats = seatsOpen > 0;\n      \n      // 3. visibility allows listing (default to public if not set)\n      const visibility = room.visibility || 'public';\n      const isListable = visibility === 'public';\n      \n      // Only show tables with active players and open seats\n      if (hasActivePlayers && hasOpenSeats && isListable) {\n        // Update player count to reflect only active seats\n        room.playerCount = activeSeats;\n        validRooms.push(room);\n      }\n    }\n    \n    return validRooms;\n  }\n\n  async getAllActiveRooms(): Promise<GameRoom[]> {\n    const rooms = await db\n      .select()\n      .from(gameRooms)\n      .where(eq(gameRooms.isActive, true));\n    return rooms;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":14092},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, jsonb, timestamp, index, bigint } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  \n  // Game progression fields\n  level: integer(\"level\").default(1),\n  experience: integer(\"experience\").default(0),\n  currency: integer(\"currency\").default(100), // Start with 100 coins\n  \n  // Timestamps\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Game statistics table\nexport const gameStats = pgTable(\"game_stats\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  \n  // Game completion stats\n  gamesPlayed: integer(\"games_played\").default(0),\n  gamesWon: integer(\"games_won\").default(0),\n  gamesLost: integer(\"games_lost\").default(0),\n  \n  // Score statistics\n  totalScore: integer(\"total_score\").default(0),\n  bestScore: integer(\"best_score\"),\n  averageScore: integer(\"average_score\"),\n  \n  // Streak tracking\n  currentWinStreak: integer(\"current_win_streak\").default(0),\n  longestWinStreak: integer(\"longest_win_streak\").default(0),\n  \n  // Performance metrics\n  perfectGames: integer(\"perfect_games\").default(0), // Games with score 0\n  comebackWins: integer(\"comeback_wins\").default(0), // Wins from behind\n  \n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Individual game history\nexport const gameHistory = pgTable(\"game_history\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  \n  // Game details\n  gameMode: varchar(\"game_mode\").notNull(), // 'solo', 'pass-play', 'online'\n  playerCount: integer(\"player_count\").notNull(),\n  rounds: integer(\"rounds\").notNull(),\n  \n  // Results\n  finalScore: integer(\"final_score\").notNull(),\n  placement: integer(\"placement\").notNull(), // 1st, 2nd, 3rd, 4th\n  won: boolean(\"won\").notNull(),\n  \n  // Rewards earned\n  xpEarned: integer(\"xp_earned\").notNull(),\n  coinsEarned: integer(\"coins_earned\").notNull(),\n  \n  // Game duration\n  gameDuration: integer(\"game_duration\"), // in seconds\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Achievements system\nexport const achievements = pgTable(\"achievements\", {\n  id: varchar(\"id\").primaryKey(),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  icon: varchar(\"icon\").notNull(),\n  xpReward: integer(\"xp_reward\").default(0),\n  coinReward: integer(\"coin_reward\").default(0),\n  requirement: jsonb(\"requirement\").notNull(), // Flexible achievement criteria\n});\n\n// User achievements (unlocked achievements)\nexport const userAchievements = pgTable(\"user_achievements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  achievementId: varchar(\"achievement_id\").notNull().references(() => achievements.id),\n  unlockedAt: timestamp(\"unlocked_at\").defaultNow(),\n});\n\n// Cosmetic items\nexport const cosmetics = pgTable(\"cosmetics\", {\n  id: varchar(\"id\").primaryKey(),\n  type: varchar(\"type\").notNull(), // 'card_back', 'avatar', 'table_theme'\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  rarity: varchar(\"rarity\").notNull(), // 'common', 'rare', 'epic', 'legendary'\n  cost: integer(\"cost\").notNull(), // Coin cost\n  unlockLevel: integer(\"unlock_level\").default(1),\n  imageUrl: varchar(\"image_url\"),\n});\n\n// User cosmetics (owned items)\nexport const userCosmetics = pgTable(\"user_cosmetics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  cosmeticId: varchar(\"cosmetic_id\").notNull().references(() => cosmetics.id),\n  equipped: boolean(\"equipped\").default(false),\n  purchasedAt: timestamp(\"purchased_at\").defaultNow(),\n});\n\n// User settings and preferences\nexport const userSettings = pgTable(\"user_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id).unique(),\n  \n  // Audio settings\n  soundEnabled: boolean(\"sound_enabled\").default(true),\n  musicEnabled: boolean(\"music_enabled\").default(true),\n  soundVolume: integer(\"sound_volume\").default(50), // 0-100\n  musicVolume: integer(\"music_volume\").default(30), // 0-100\n  \n  // Accessibility settings\n  reducedMotion: boolean(\"reduced_motion\").default(false),\n  highContrast: boolean(\"high_contrast\").default(false),\n  largeText: boolean(\"large_text\").default(false),\n  \n  // Haptic feedback\n  vibrationEnabled: boolean(\"vibration_enabled\").default(true),\n  \n  // Game preferences\n  autoEndTurn: boolean(\"auto_end_turn\").default(false),\n  showHints: boolean(\"show_hints\").default(true),\n  \n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const gameRooms = pgTable(\"game_rooms\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: text(\"code\").notNull().unique(),\n  hostId: varchar(\"host_id\").notNull(),\n  players: jsonb(\"players\").notNull(),\n  playerCount: integer(\"player_count\").default(0).notNull(), // Track player count for efficient queries\n  gameState: jsonb(\"game_state\"),\n  settings: jsonb(\"settings\").notNull(),\n  stakeBracket: varchar(\"stake_bracket\"), // 'free', 'low', 'medium', 'high', 'premium'\n  status: varchar(\"status\").default(\"room\"), // 'room' (pre-game), 'playing', 'finished'\n  visibility: varchar(\"visibility\").default(\"public\"), // 'public', 'private', 'friends'\n  maxPlayers: integer(\"max_players\").default(4),\n  version: bigint(\"version\", { mode: \"bigint\" }).default(BigInt(1)).notNull(), // For optimistic concurrency control\n  createdAt: text(\"created_at\").default(sql`NOW()`),\n  isActive: boolean(\"is_active\").default(true),\n});\n\n// Schema definitions for inserts\nexport const upsertUserSchema = createInsertSchema(users).pick({\n  id: true,\n  email: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n});\n\nexport const insertGameStatsSchema = createInsertSchema(gameStats).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertGameHistorySchema = createInsertSchema(gameHistory).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertGameRoomSchema = createInsertSchema(gameRooms).pick({\n  code: true,\n  hostId: true,\n  players: true,\n  settings: true,\n  stakeBracket: true,\n});\n\nexport const insertAchievementSchema = createInsertSchema(achievements);\n\nexport const insertUserAchievementSchema = createInsertSchema(userAchievements).omit({\n  id: true,\n  unlockedAt: true,\n});\n\nexport const insertCosmeticSchema = createInsertSchema(cosmetics);\n\nexport const insertUserCosmeticSchema = createInsertSchema(userCosmetics).omit({\n  id: true,\n  purchasedAt: true,\n});\n\nexport const insertUserSettingsSchema = createInsertSchema(userSettings).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const updateUserSettingsSchema = createInsertSchema(userSettings).omit({\n  id: true,\n  userId: true,\n  updatedAt: true,\n}).partial();\n\n// Type exports\nexport type UpsertUser = z.infer<typeof upsertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type GameStats = typeof gameStats.$inferSelect;\nexport type GameHistory = typeof gameHistory.$inferSelect;\nexport type GameRoom = typeof gameRooms.$inferSelect;\nexport type Achievement = typeof achievements.$inferSelect;\nexport type UserAchievement = typeof userAchievements.$inferSelect;\nexport type Cosmetic = typeof cosmetics.$inferSelect;\nexport type UserCosmetic = typeof userCosmetics.$inferSelect;\nexport type UserSettings = typeof userSettings.$inferSelect;\n\nexport type InsertGameStats = z.infer<typeof insertGameStatsSchema>;\nexport type InsertGameHistory = z.infer<typeof insertGameHistorySchema>;\nexport type InsertGameRoom = z.infer<typeof insertGameRoomSchema>;\nexport type InsertAchievement = z.infer<typeof insertAchievementSchema>;\nexport type InsertUserAchievement = z.infer<typeof insertUserAchievementSchema>;\nexport type InsertCosmetic = z.infer<typeof insertCosmeticSchema>;\nexport type InsertUserCosmetic = z.infer<typeof insertUserCosmeticSchema>;\nexport type InsertUserSettings = z.infer<typeof insertUserSettingsSchema>;\nexport type UpdateUserSettings = z.infer<typeof updateUserSettingsSchema>;\n\n// Stake bracket definitions\nexport const STAKE_BRACKETS = {\n  free: { label: \"Free\", entryFee: 0, winMultiplier: 1 },\n  low: { label: \"Low\", entryFee: 10, winMultiplier: 1.5 },\n  medium: { label: \"Medium\", entryFee: 50, winMultiplier: 2 },\n  high: { label: \"High\", entryFee: 100, winMultiplier: 3 },\n  premium: { label: \"Premium\", entryFee: 500, winMultiplier: 5 },\n} as const;\n\nexport type StakeBracket = keyof typeof STAKE_BRACKETS;\n","size_bytes":9342},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Home from \"@/pages/Home\";\nimport GameSetup from \"@/pages/GameSetup\";\nimport GameWrapper from \"@/pages/GameWrapper\";\nimport Settings from \"@/pages/Settings\";\nimport Cosmetics from \"@/pages/Cosmetics\";\nimport OnlineMultiplayer from \"@/pages/OnlineMultiplayer\";\nimport RoomView from \"@/pages/RoomView\";\nimport Landing from \"@/pages/Landing\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/setup\" component={GameSetup} />\n          <Route path=\"/game\" component={GameWrapper} />\n          <Route path=\"/settings\" component={Settings} />\n          <Route path=\"/cosmetics\" component={Cosmetics} />\n          <Route path=\"/online-multiplayer\" component={OnlineMultiplayer} />\n          <Route path=\"/room/:code\" component={RoomView} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1612},"client/src/index.css":{"content":"/* Font Awesome icons */\n@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Line clamp utility for consistent text heights */\n.line-clamp-2 {\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  \n  /* Golf 9 Theme Colors */\n  --game-green: hsl(154 100% 16%);\n  --game-felt: hsl(154 42% 20%);\n  --game-gold: hsl(210 87% 48%); /* Changed to blue for better contrast */\n  --game-cream: hsl(37 25% 98%);\n  --card-back: hsl(225 83% 53%);\n  --highlight-blue: hsl(217 91% 60%);\n  --highlight-green: hsl(159 100% 36%);\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .bg-game-green {\n    background-color: var(--game-green);\n  }\n  \n  .bg-game-felt {\n    background-color: var(--game-felt);\n  }\n  \n  .bg-game-gold {\n    background-color: var(--game-gold);\n  }\n  \n  .bg-game-cream {\n    background-color: var(--game-cream);\n  }\n  \n  .bg-card-back {\n    background-color: var(--card-back);\n  }\n  \n  .bg-highlight-blue {\n    background-color: var(--highlight-blue);\n  }\n  \n  .bg-highlight-green {\n    background-color: var(--highlight-green);\n  }\n  \n  .text-game-green {\n    color: var(--game-green);\n  }\n  \n  .text-game-felt {\n    color: var(--game-felt);\n  }\n  \n  .text-game-gold {\n    color: var(--game-gold);\n  }\n  \n  .text-game-cream {\n    color: var(--game-cream);\n  }\n  \n  .text-highlight-blue {\n    color: var(--highlight-blue);\n  }\n  \n  .text-highlight-green {\n    color: var(--highlight-green);\n  }\n  \n  .border-highlight-blue {\n    border-color: var(--highlight-blue);\n  }\n  \n  .border-highlight-green {\n    border-color: var(--highlight-green);\n  }\n}\n\n/* Card animations */\n.card-slot {\n  transition: all 0.2s ease;\n}\n\n.card-slot:hover {\n  transform: translateY(-2px);\n}\n\n.card-pile {\n  box-shadow: \n    0 2px 4px rgba(0,0,0,0.1),\n    0 4px 8px rgba(0,0,0,0.05);\n}\n\n/* Responsive card scaling */\n@media (max-width: 768px) {\n  .opponent-grid {\n    transform: scale(0.8);\n  }\n}\n\n@media (max-width: 640px) {\n  .opponent-grid {\n    transform: scale(0.7);\n  }\n}\n","size_bytes":7083},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}","size_bytes":306},"client/src/hooks/useGameLogic.ts":{"content":"import { useState, useCallback } from 'react';\nimport { GameState, GameSettings, Player, Card, GameAction } from '@/types/game';\nimport { \n  initializeGame, \n  reshuffleIfNeeded, \n  checkThreeOfAKind, \n  processThreeOfAKind,\n  calculatePlayerScore,\n  shouldEndRound,\n  getNextPlayerIndex,\n  hasPlayerFinishedPeeking,\n  getCardValue,\n  createPlayerGrid,\n  createDeck,\n  shuffleDeck\n} from '@/utils/gameLogic';\nimport { \n  makeAIDecision, \n  makeAIPlacementDecision, \n  selectAIPeekCards,\n  selectAIGridPosition\n} from '@/utils/aiLogic';\n\nexport function useGameLogic() {\n  const [gameState, setGameState] = useState<GameState | null>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const startGame = useCallback((settings: GameSettings) => {\n    const newGameState = initializeGame(settings);\n    setGameState(newGameState);\n  }, []);\n\n  const startNextRound = useCallback(() => {\n    if (!gameState) return;\n\n    setGameState(prevState => {\n      if (!prevState) return prevState;\n\n      // Calculate and add final scores for the round\n      const newState = { ...prevState };\n      newState.players.forEach(player => {\n        // Reveal all remaining unrevealed cards at round end\n        player.grid.forEach(gridCard => {\n          if (!gridCard.isRevealed && gridCard.card && !gridCard.isDisabled) {\n            gridCard.isRevealed = true;\n          }\n        });\n        \n        // Calculate and add round score to total\n        player.roundScore = calculatePlayerScore(player.grid);\n        player.totalScore += player.roundScore;\n      });\n\n      // Reset for next round\n      newState.currentRound += 1;\n      newState.roundEndTriggered = false;\n      newState.roundEndingPlayer = undefined;\n      newState.currentPlayerIndex = 0;\n      newState.gamePhase = 'peek';\n      newState.drawnCard = null;\n      newState.selectedGridPosition = null;\n      newState.extraTurn = false;\n      newState.hasRevealedCardThisTurn = false;\n\n      // Create new deck and deal cards\n      const deck = createDeck();\n      let deckIndex = 0;\n\n      // Reset all players' grids and scores\n      newState.players.forEach(player => {\n        player.grid = createPlayerGrid();\n        player.roundScore = 0;\n        player.isActive = player.id === 'player-0';\n\n        // Deal 9 cards to each player\n        for (let i = 0; i < 9; i++) {\n          player.grid[i].card = deck[deckIndex++];\n        }\n      });\n\n      // Set up new draw and discard piles\n      newState.drawPile = deck.slice(deckIndex + 1);\n      newState.discardPile = [deck[deckIndex]];\n\n      return newState;\n    });\n  }, [gameState]);\n\n  const drawCard = useCallback((source: 'draw' | 'discard') => {\n    if (!gameState || gameState.drawnCard) return;\n\n    // Prevent drawing from discard during extra turn\n    if (source === 'discard' && gameState.extraTurn) {\n      console.log('🚫 BLOCKED: Cannot draw from discard during extra turn');\n      return;\n    }\n\n    setGameState(prevState => {\n      if (!prevState) return prevState;\n\n      // Double-check the extra turn restriction in state update\n      if (source === 'discard' && prevState.extraTurn) {\n        console.log('BLOCKED: Cannot draw from discard during extra turn (state check)');\n        return prevState;\n      }\n\n      let newState = { ...prevState };\n      \n      if (source === 'draw') {\n        if (newState.drawPile.length === 0) {\n          newState = reshuffleIfNeeded(newState);\n        }\n        if (newState.drawPile.length > 0) {\n          newState.drawnCard = newState.drawPile[0];\n          newState.drawPile = newState.drawPile.slice(1);\n        }\n      } else {\n        if (newState.discardPile.length > 0) {\n          newState.drawnCard = newState.discardPile[newState.discardPile.length - 1];\n          newState.discardPile = newState.discardPile.slice(0, -1);\n        }\n      }\n\n      return newState;\n    });\n  }, [gameState]);\n\n  const selectGridPosition = useCallback((position: number) => {\n    setGameState(prevState => {\n      if (!prevState) return prevState;\n      \n      const currentPlayer = prevState.players[prevState.currentPlayerIndex];\n      \n      // Prevent selecting disabled positions\n      if (currentPlayer.grid[position].isDisabled) {\n        return prevState;\n      }\n      \n      // During playing phase, only allow revelation if:\n      // 1. Player has drawn a card\n      // 2. No card has been revealed this turn yet\n      // 3. The position is not already revealed\n      if (prevState.gamePhase === 'playing') {\n        if (!prevState.drawnCard) {\n          return prevState; // Can't select position without drawing first\n        }\n        if (prevState.hasRevealedCardThisTurn && !currentPlayer.grid[position].isRevealed) {\n          return prevState; // Already revealed a card this turn, can't reveal another\n        }\n      }\n      \n      const newState = { ...prevState };\n      newState.selectedGridPosition = position;\n      \n      // During playing phase with a drawn card, reveal the selected card so player can make informed decision\n      if (newState.gamePhase === 'playing' && newState.drawnCard) {\n        if (!currentPlayer.grid[position].isRevealed) {\n          currentPlayer.grid[position].isRevealed = true;\n          newState.hasRevealedCardThisTurn = true;\n        }\n      }\n      \n      return newState;\n    });\n  }, []);\n\n  const keepDrawnCard = useCallback(() => {\n    if (!gameState || !gameState.drawnCard || gameState.selectedGridPosition === null) return;\n\n    setGameState(prevState => {\n      if (!prevState || !prevState.drawnCard || prevState.selectedGridPosition === null) return prevState;\n\n      const newState = { ...prevState };\n      const currentPlayer = newState.players[newState.currentPlayerIndex];\n      const gridPosition = prevState.selectedGridPosition;\n      \n      // If card at position was revealed, add it to discard pile\n      if (currentPlayer.grid[gridPosition].isRevealed && currentPlayer.grid[gridPosition].card) {\n        newState.discardPile = [...newState.discardPile, currentPlayer.grid[gridPosition].card!];\n      }\n\n      // Place drawn card in grid and reveal this position (preserve isDisabled state)\n      currentPlayer.grid[gridPosition] = {\n        card: prevState.drawnCard,\n        isRevealed: true,\n        position: gridPosition,\n        isDisabled: currentPlayer.grid[gridPosition].isDisabled || false\n      };\n\n      // Process three of a kind\n      const threeOfAKindResult = processThreeOfAKind(currentPlayer.grid, newState.discardPile);\n      if (threeOfAKindResult.hasThreeOfAKind) {\n        currentPlayer.grid = threeOfAKindResult.updatedGrid;\n        newState.discardPile = threeOfAKindResult.updatedDiscardPile;\n        newState.extraTurn = true;\n        \n        // Emit event to skip automatic endTurn\n        window.dispatchEvent(new CustomEvent('skipEndTurn'));\n      }\n\n      // Check if round should end immediately after placing card\n      // BUT if player got three-of-a-kind, they get extra turn even if all cards are revealed\n      if (shouldEndRound(newState.players) && !newState.extraTurn) {\n        newState.roundEndTriggered = true;\n        newState.roundEndingPlayer = newState.currentPlayerIndex;\n        \n        // Reveal all remaining unrevealed cards when round ends\n        newState.players.forEach(player => {\n          player.grid.forEach(gridCard => {\n            if (!gridCard.isRevealed && gridCard.card && !gridCard.isDisabled) {\n              gridCard.isRevealed = true;\n            }\n          });\n        });\n      }\n\n      // Clear drawn card and selection\n      newState.drawnCard = null;\n      newState.selectedGridPosition = null;\n      newState.hasRevealedCardThisTurn = false;\n\n      return newState;\n    });\n  }, [gameState]);\n\n  const keepRevealedCard = useCallback(() => {\n    if (!gameState || !gameState.drawnCard || gameState.selectedGridPosition === null) return;\n\n    setGameState(prevState => {\n      if (!prevState || !prevState.drawnCard || prevState.selectedGridPosition === null) return prevState;\n\n      const newState = { ...prevState };\n      const currentPlayer = newState.players[newState.currentPlayerIndex];\n      const gridPosition = prevState.selectedGridPosition;\n\n      // Discard the drawn card\n      newState.discardPile = [...newState.discardPile, prevState.drawnCard];\n\n      // The grid card should already be revealed from selectGridPosition\n      // No need to reveal again here\n\n      // Process three of a kind\n      const threeOfAKindResult = processThreeOfAKind(currentPlayer.grid, newState.discardPile);\n      if (threeOfAKindResult.hasThreeOfAKind) {\n        currentPlayer.grid = threeOfAKindResult.updatedGrid;\n        newState.discardPile = threeOfAKindResult.updatedDiscardPile;\n        newState.extraTurn = true;\n        \n        // Emit event to skip automatic endTurn\n        window.dispatchEvent(new CustomEvent('skipEndTurn'));\n      }\n\n      // Check if round should end immediately after revealing card\n      // BUT if player got three-of-a-kind, they get extra turn even if all cards are revealed\n      if (shouldEndRound(newState.players) && !newState.extraTurn) {\n        newState.roundEndTriggered = true;\n        newState.roundEndingPlayer = newState.currentPlayerIndex;\n        \n        // Reveal all remaining unrevealed cards when round ends\n        newState.players.forEach(player => {\n          player.grid.forEach(gridCard => {\n            if (!gridCard.isRevealed && gridCard.card && !gridCard.isDisabled) {\n              gridCard.isRevealed = true;\n            }\n          });\n        });\n      }\n\n      // Clear drawn card and selection\n      newState.drawnCard = null;\n      newState.selectedGridPosition = null;\n      newState.hasRevealedCardThisTurn = false;\n\n      return newState;\n    });\n  }, [gameState]);\n\n  const directDiscardCard = useCallback(() => {\n    if (!gameState || !gameState.drawnCard) return;\n\n    setGameState(prevState => {\n      if (!prevState || !prevState.drawnCard) return prevState;\n\n      const newState = { ...prevState };\n      \n      // Simply discard the drawn card without revealing any grid cards\n      newState.discardPile = [...newState.discardPile, prevState.drawnCard];\n      \n      // Check if round should end immediately (though direct discard shouldn't trigger this)\n      if (shouldEndRound(newState.players)) {\n        newState.roundEndTriggered = true;\n      }\n      \n      // Clear drawn card and selection\n      newState.drawnCard = null;\n      newState.selectedGridPosition = null;\n      newState.hasRevealedCardThisTurn = false;\n\n      return newState;\n    });\n  }, [gameState]);\n\n  const peekCard = useCallback((position: number, playerIndex?: number) => {\n    if (!gameState || gameState.gamePhase !== 'peek') return;\n\n    setGameState(prevState => {\n      if (!prevState) return prevState;\n\n      const newState = { ...prevState };\n      const targetPlayerIndex = playerIndex !== undefined ? playerIndex : newState.currentPlayerIndex;\n      const targetPlayer = newState.players[targetPlayerIndex];\n      \n      // Reveal the card\n      targetPlayer.grid[position].isRevealed = true;\n\n      return newState;\n    });\n  }, [gameState]);\n\n  const endTurn = useCallback(() => {\n    if (!gameState) return;\n\n    setGameState(prevState => {\n      if (!prevState) return prevState;\n\n      let newState = { ...prevState };\n      \n      // Check if we need to transition from peek to playing phase\n      if (newState.gamePhase === 'peek') {\n        const allPlayersFinishedPeeking = newState.players.every(player => \n          hasPlayerFinishedPeeking(player)\n        );\n        \n        if (allPlayersFinishedPeeking) {\n          newState.gamePhase = 'playing';\n          newState.currentPlayerIndex = 0; // Start with player 0\n          return newState;\n        }\n      }\n      \n      // Check if round should end (only in playing phase)\n      // BUT if player got three-of-a-kind, they get extra turn even if all cards are revealed\n      if (newState.gamePhase === 'playing' && shouldEndRound(newState.players) && !newState.extraTurn) {\n        newState.roundEndTriggered = true;\n        newState.roundEndingPlayer = newState.currentPlayerIndex;\n        \n        // Reveal all remaining unrevealed cards when round ends\n        newState.players.forEach(player => {\n          player.grid.forEach(gridCard => {\n            if (!gridCard.isRevealed && gridCard.card && !gridCard.isDisabled) {\n              gridCard.isRevealed = true;\n            }\n          });\n        });\n      }\n\n      // If round ended, check if all other players have had their final turn\n      if (newState.roundEndTriggered && newState.roundEndingPlayer !== undefined) {\n        // Check if we've cycled back to the player who triggered the round end\n        // If so, the round is complete\n        if (newState.currentPlayerIndex === newState.roundEndingPlayer) {\n          // Don't advance further, round should end\n          return newState;\n        }\n      }\n\n      // If extra turn, clear it and continue to next player (extra turn is complete)\n      if (newState.extraTurn) {\n        console.log('🎯 Extra turn complete - clearing extraTurn flag and advancing to next player');\n        newState.extraTurn = false;\n        // Don't return early - let normal player advancement happen below\n      }\n\n      // Clear any drawn card and selection when advancing to next player\n      newState.drawnCard = null;\n      newState.selectedGridPosition = null;\n      newState.hasRevealedCardThisTurn = false;\n\n      // Advance to next player\n      newState.currentPlayerIndex = getNextPlayerIndex(\n        newState.currentPlayerIndex, \n        newState.players.length\n      );\n\n      return newState;\n    });\n  }, [gameState]);\n\n  const processAITurn = useCallback(async (aiPlayer: Player) => {\n    if (!gameState || isProcessing) return;\n\n    setIsProcessing(true);\n\n    try {\n      // Simulate thinking time\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      if (gameState.gamePhase === 'peek') {\n        // AI peek phase - find the AI player's index\n        const aiPlayerIndex = gameState.players.findIndex(p => p.id === aiPlayer.id);\n        const currentRevealedCount = aiPlayer.grid.filter(card => card.isRevealed).length;\n        \n        // Only peek cards if the AI hasn't finished peeking yet\n        if (currentRevealedCount < 2) {\n          const peekPositions = selectAIPeekCards(aiPlayer).slice(0, 2 - currentRevealedCount);\n          \n          for (const position of peekPositions) {\n            peekCard(position, aiPlayerIndex);\n            await new Promise(resolve => setTimeout(resolve, 500));\n          }\n        }\n        \n        // End turn after peeking\n        setTimeout(() => endTurn(), 500);\n      } else if (gameState.gamePhase === 'playing') {\n        // AI playing phase\n        const decision = makeAIDecision(gameState, aiPlayer);\n        \n        // Draw card first\n        drawCard(decision.action === 'draw-from-discard' ? 'discard' : 'draw');\n        \n        // Wait for card to be drawn and state to update, then continue with turn\n        setTimeout(() => {\n          setGameState(currentState => {\n            if (!currentState || !currentState.drawnCard) return currentState;\n            \n            const drawnCard = currentState.drawnCard;\n            const newState = { ...currentState };\n            const currentPlayer = newState.players[newState.currentPlayerIndex];\n            \n            // Check if AI has only one face-down card left\n            const faceDownCount = currentPlayer.grid.filter(card => !card.isRevealed).length;\n            \n            if (faceDownCount === 1) {\n              // AI can choose to directly discard if the drawn card is bad\n              const drawnValue = getCardValue(drawnCard);\n              if (drawnValue >= 7) { // Bad card (7, 8, 9, 10, J, Q), just discard it\n                newState.discardPile = [...newState.discardPile, drawnCard];\n                newState.drawnCard = null;\n                newState.selectedGridPosition = null;\n                setTimeout(() => endTurn(), 800);\n                return newState;\n              }\n            }\n            \n            // Use current player state for grid position selection\n            const gridPosition = decision.gridPosition ?? selectAIGridPosition(currentPlayer, drawnCard);\n            \n            // Store the original card at this position before any changes\n            const originalCard = currentPlayer.grid[gridPosition].card;\n            const wasRevealed = currentPlayer.grid[gridPosition].isRevealed;\n            \n            // Reveal the grid card if it's not already revealed\n            if (!currentPlayer.grid[gridPosition].isRevealed) {\n              currentPlayer.grid[gridPosition].isRevealed = true;\n            }\n            \n            // Make placement decision using the updated current player state\n            const shouldKeepDrawn = makeAIPlacementDecision(newState, currentPlayer, drawnCard, gridPosition);\n            \n            if (shouldKeepDrawn) {\n              // Keep drawn card - place it in grid, discard the original grid card if it exists\n              if (originalCard && (wasRevealed || currentPlayer.grid[gridPosition].isRevealed)) {\n                newState.discardPile = [...newState.discardPile, originalCard];\n              }\n              currentPlayer.grid[gridPosition] = {\n                card: drawnCard,\n                isRevealed: true,\n                position: gridPosition\n              };\n            } else {\n              // Keep revealed card - discard the drawn card\n              newState.discardPile = [...newState.discardPile, drawnCard];\n            }\n            \n            // Process three of a kind\n            const threeOfAKindResult = processThreeOfAKind(currentPlayer.grid, newState.discardPile);\n            if (threeOfAKindResult.hasThreeOfAKind) {\n              currentPlayer.grid = threeOfAKindResult.updatedGrid;\n              newState.discardPile = threeOfAKindResult.updatedDiscardPile;\n              newState.extraTurn = true;\n            }\n            \n            // Check if round should end immediately after AI action\n            // BUT if AI got three-of-a-kind, they get extra turn even if all cards are revealed\n            if (shouldEndRound(newState.players) && !newState.extraTurn) {\n              newState.roundEndTriggered = true;\n              newState.roundEndingPlayer = newState.currentPlayerIndex;\n              \n              // Reveal all remaining unrevealed cards when round ends\n              newState.players.forEach(player => {\n                player.grid.forEach(gridCard => {\n                  if (!gridCard.isRevealed && gridCard.card && !gridCard.isDisabled) {\n                    gridCard.isRevealed = true;\n                  }\n                });\n              });\n            }\n            \n            // Clear drawn card and selection\n            newState.drawnCard = null;\n            newState.selectedGridPosition = null;\n            newState.hasRevealedCardThisTurn = false;\n            \n            // End turn after a delay\n            setTimeout(() => endTurn(), 800);\n            \n            return newState;\n          });\n        }, 800);\n      }\n    } finally {\n      // Clear processing flag after a delay to ensure all actions complete\n      setTimeout(() => setIsProcessing(false), 3000);\n    }\n  }, [gameState, isProcessing, peekCard, drawCard, selectGridPosition, keepDrawnCard, keepRevealedCard, endTurn, setGameState]);\n\n  const resetGame = useCallback(() => {\n    setGameState(null);\n  }, []);\n\n  return {\n    gameState,\n    isProcessing,\n    startGame,\n    startNextRound,\n    drawCard,\n    selectGridPosition,\n    keepDrawnCard,\n    keepRevealedCard,\n    directDiscardCard,\n    peekCard,\n    endTurn,\n    processAITurn,\n    resetGame\n  };\n}\n","size_bytes":19839},"client/src/hooks/useUserProgression.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { GameStats, GameHistory } from \"@shared/schema\";\n\nexport function useUserStats() {\n  return useQuery<GameStats>({\n    queryKey: [\"/api/user/stats\"],\n    retry: false,\n  });\n}\n\nexport function useUserHistory(limit = 10) {\n  return useQuery<GameHistory[]>({\n    queryKey: [\"/api/user/history\", limit],\n    retry: false,\n  });\n}\n\nexport function useCompleteGame() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: async (gameData: {\n      gameMode: string;\n      playerCount: number;\n      rounds: number;\n      finalScore: number;\n      placement: number;\n      won: boolean;\n      gameDuration?: number;\n    }) => {\n      const response = await fetch(\"/api/game/complete\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(gameData),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`${response.status}: ${response.statusText}`);\n      }\n      \n      return await response.json();\n    },\n    onSuccess: (data) => {\n      // Invalidate and refetch user-related queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/history\"] });\n      \n      // Show success notification with rewards\n      toast({\n        title: \"Game Complete!\",\n        description: `Earned ${data.xpEarned} XP and ${data.coinsEarned} coins!`,\n        variant: \"default\",\n      });\n      \n      // Show level up notification if applicable\n      if (data.newLevel > 1) {\n        setTimeout(() => {\n          toast({\n            title: `Level Up! Level ${data.newLevel}`,\n            description: `You're getting better at Golf 9!`,\n            variant: \"default\",\n          });\n        }, 1000);\n      }\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: \"Failed to save game progress. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n}","size_bytes":2605},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Game.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useGameLogic } from '@/hooks/useGameLogic';\nimport { GameSettings } from '@/types/game';\nimport GameHeader from '@/components/Game/GameHeader';\nimport GameTable from '@/components/Game/GameTable';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { calculatePlayerScore } from '@/utils/gameLogic';\nimport { cn } from '@/lib/utils';\n\nexport default function Game() {\n  const [, setLocation] = useLocation();\n  const [showPauseMenu, setShowPauseMenu] = useState(false);\n  const [showGameResults, setShowGameResults] = useState(false);\n  const [skipNextEndTurn, setSkipNextEndTurn] = useState(false);\n  const [showTurnStart, setShowTurnStart] = useState(false);\n  const [lastActivePlayer, setLastActivePlayer] = useState<number | null>(null);\n  const {\n    gameState,\n    isProcessing,\n    startGame,\n    startNextRound,\n    drawCard,\n    selectGridPosition,\n    keepDrawnCard,\n    keepRevealedCard,\n    directDiscardCard,\n    peekCard,\n    endTurn,\n    processAITurn,\n    resetGame\n  } = useGameLogic();\n\n  // Initialize game from URL params (ONLY for solo and pass-play modes)\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const roomCode = params.get('room');\n    \n    // This component should NEVER handle online games\n    if (roomCode) {\n      console.error('[Game] Room parameter detected but this component should not be used for online games');\n      // Redirect to proper multiplayer component\n      setLocation(`/game?room=${roomCode}`);\n      return;\n    }\n    \n    // Only handle solo and pass-play modes\n    const mode = params.get('mode') as 'solo' | 'pass-play' || 'solo';\n    const players = parseInt(params.get('players') || '2') as 2 | 3 | 4;\n    const rounds = parseInt(params.get('rounds') || '5') as 5 | 9;\n\n    const settings: GameSettings = { mode, playerCount: players, rounds };\n    startGame(settings);\n  }, [startGame, setLocation]);\n\n  // Handle AI turns (only in solo mode)\n  useEffect(() => {\n    if (!gameState || isProcessing) return;\n\n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    \n    // Only process AI turns in solo mode\n    if (gameState.gameMode === 'solo' && currentPlayer.isAI && gameState.gamePhase !== 'game-end') {\n      // For peek phase, check if AI hasn't finished peeking yet\n      if (gameState.gamePhase === 'peek') {\n        const aiRevealedCount = currentPlayer.grid.filter(card => card.isRevealed).length;\n        if (aiRevealedCount < 2) {\n          const timer = setTimeout(() => {\n            processAITurn(currentPlayer);\n          }, 1000);\n          return () => clearTimeout(timer);\n        } else {\n          // AI has finished peeking, advance turn\n          const timer = setTimeout(() => {\n            endTurn();\n          }, 500);\n          return () => clearTimeout(timer);\n        }\n      } else if (gameState.gamePhase === 'playing') {\n        const timer = setTimeout(() => {\n          processAITurn(currentPlayer);\n        }, 1000);\n        return () => clearTimeout(timer);\n      }\n    }\n  }, [gameState, isProcessing, processAITurn, endTurn]);\n\n  // Update scores and check for round/game end\n  useEffect(() => {\n    if (!gameState) return;\n\n    // Update round scores\n    gameState.players.forEach(player => {\n      player.roundScore = calculatePlayerScore(player.grid);\n    });\n\n    // Check for round end\n    if (gameState.roundEndTriggered && gameState.currentRound < gameState.totalRounds) {\n      // End round, start next\n      setTimeout(() => {\n        startNextRound();\n      }, 2000);\n    } else if (gameState.roundEndTriggered && gameState.currentRound >= gameState.totalRounds) {\n      // Game end\n      setTimeout(() => {\n        setShowGameResults(true);\n      }, 2000);\n    }\n  }, [gameState]);\n\n  // Handle direct discard event\n  useEffect(() => {\n    const handleDirectDiscard = () => {\n      directDiscardCard();\n      setTimeout(() => endTurn(), 1000);\n    };\n    \n    window.addEventListener('directDiscard', handleDirectDiscard);\n    return () => window.removeEventListener('directDiscard', handleDirectDiscard);\n  }, [directDiscardCard, endTurn]);\n\n  // Handle skip endTurn event when three-of-a-kind is detected\n  useEffect(() => {\n    const handleSkipEndTurn = () => {\n      console.log('🎯 Received skipEndTurn event - setting flag');\n      setSkipNextEndTurn(true);\n    };\n    \n    window.addEventListener('skipEndTurn', handleSkipEndTurn);\n    return () => window.removeEventListener('skipEndTurn', handleSkipEndTurn);\n  }, []);\n\n  // Handle pass-and-play turn transitions\n  useEffect(() => {\n    if (!gameState || gameState.gameMode !== 'pass-play') return;\n    \n    // Check if player changed and show turn start overlay\n    if (lastActivePlayer !== null && lastActivePlayer !== gameState.currentPlayerIndex) {\n      setShowTurnStart(true);\n    }\n    \n    setLastActivePlayer(gameState.currentPlayerIndex);\n  }, [gameState?.currentPlayerIndex, gameState?.gameMode, lastActivePlayer]);\n\n  const handleTurnStart = () => {\n    setShowTurnStart(false);\n  };\n\n  const handlePeekCard = (position: number) => {\n    if (!gameState || gameState.gamePhase !== 'peek') return;\n    \n    const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n    const revealedCount = currentPlayer.grid.filter(card => card.isRevealed).length;\n    \n    // In solo mode, only allow human player (index 0) to peek\n    // In pass-and-play mode, allow current player to peek\n    if (gameState.gameMode === 'solo' && gameState.currentPlayerIndex !== 0) return;\n    \n    if (revealedCount < 2 && !currentPlayer.grid[position].isRevealed) {\n      peekCard(position);\n      \n      // Check if player has finished peeking\n      if (revealedCount === 1) {\n        setTimeout(() => {\n          endTurn();\n        }, 500);\n      }\n    }\n  };\n\n  const handleCardAction = (action: 'keep-drawn' | 'keep-revealed') => {\n    if (action === 'keep-drawn') {\n      keepDrawnCard();\n    } else {\n      keepRevealedCard();\n    }\n    \n    // Check if we should skip the automatic endTurn after the state updates\n    setTimeout(() => {\n      // Use a function to get the latest state at execution time\n      setSkipNextEndTurn(currentSkipFlag => {\n        if (currentSkipFlag) {\n          console.log('🚫 Skipping endTurn because extraTurn was granted');\n          return false; // Reset the flag\n        } else {\n          console.log('✅ No extra turn, calling endTurn normally');\n          endTurn();\n          return false; // Keep flag false\n        }\n      });\n    }, 1500);\n  };\n\n  const backToMenu = () => {\n    resetGame();\n    setLocation('/');\n  };\n\n  const playAgain = () => {\n    setShowGameResults(false);\n    const params = new URLSearchParams(window.location.search);\n    const mode = params.get('mode') as 'solo' | 'pass-play' | 'online' || 'solo';\n    const players = parseInt(params.get('players') || '2') as 2 | 3 | 4;\n    const rounds = parseInt(params.get('rounds') || '5') as 5 | 9;\n\n    const settings: GameSettings = { mode, playerCount: players, rounds };\n    startGame(settings);\n  };\n\n  if (!gameState) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-game-green to-game-felt flex items-center justify-center\">\n        <div className=\"text-white text-xl\">Loading game...</div>\n      </div>\n    );\n  }\n\n  const sortedPlayers = [...gameState.players].sort((a, b) => a.totalScore - b.totalScore);\n  const winner = sortedPlayers[0];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-game-green to-game-felt\">\n      <GameHeader \n        gameState={gameState} \n        onPause={() => setShowPauseMenu(true)} \n      />\n\n      <div className=\"flex-1 p-4 overflow-hidden\">\n        <GameTable\n          gameState={gameState}\n          onDrawCard={drawCard}\n          onSelectGridPosition={selectGridPosition}\n          onKeepDrawnCard={() => handleCardAction('keep-drawn')}\n          onKeepRevealedCard={() => handleCardAction('keep-revealed')}\n          onPeekCard={handlePeekCard}\n          onEndTurn={endTurn}\n          onTurnStart={handleTurnStart}\n        />\n      </div>\n\n      {/* Pause Menu */}\n      <Dialog open={showPauseMenu} onOpenChange={setShowPauseMenu}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Game Paused</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <Button \n              onClick={() => setShowPauseMenu(false)} \n              className=\"w-full\"\n              data-testid=\"button-resume\"\n            >\n              Resume Game\n            </Button>\n            <Button \n              onClick={backToMenu} \n              variant=\"outline\" \n              className=\"w-full\"\n              data-testid=\"button-quit\"\n            >\n              Quit to Menu\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Pass-and-Play Turn Start Overlay */}\n      {showTurnStart && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50 cursor-pointer\"\n          onClick={handleTurnStart}\n        >\n          <div className=\"relative\">\n            {/* Animated background glow */}\n            <div className=\"absolute inset-0 bg-gradient-to-r from-game-gold via-yellow-400 to-game-gold rounded-2xl blur-xl opacity-30 animate-pulse\"></div>\n            \n            {/* Main content card */}\n            <div className=\"relative bg-gradient-to-br from-slate-800 to-slate-900 rounded-2xl border-2 border-game-gold shadow-2xl p-12 text-center transform transition-all hover:scale-105\">\n              {/* Crown icon */}\n              <div className=\"mb-6\">\n                <div className=\"w-16 h-16 mx-auto mb-4 bg-game-gold rounded-full flex items-center justify-center\">\n                  <span className=\"text-2xl\">👑</span>\n                </div>\n              </div>\n              \n              {/* Player name with elegant typography */}\n              <div className=\"mb-8\">\n                <div className=\"text-4xl font-bold bg-gradient-to-r from-game-gold to-yellow-300 bg-clip-text text-transparent mb-3\">\n                  {gameState?.players[gameState?.currentPlayerIndex || 0]?.name === 'You' ? 'Your Turn' : `${gameState?.players[gameState?.currentPlayerIndex || 0]?.name}'s Turn`}\n                </div>\n                <div className=\"text-slate-300 text-xl font-medium\">\n                  Round {(gameState?.currentRound || 0) + 1}\n                </div>\n              </div>\n              \n              {/* Call to action */}\n              <div className=\"text-slate-400 text-lg font-medium flex items-center justify-center gap-2\">\n                <span className=\"animate-bounce\">✨</span>\n                Tap anywhere to begin\n                <span className=\"animate-bounce\">✨</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Game Results */}\n      <Dialog open={showGameResults} onOpenChange={() => {}}>\n        <DialogContent className=\"max-w-lg\">\n          <div className=\"p-8 text-center\">\n            <div className=\"mb-6\">\n              <i className=\"fas fa-crown text-game-gold text-6xl mb-4\"></i>\n              <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">Game Over!</h2>\n              <p className=\"text-gray-600\">Final Results</p>\n            </div>\n\n            {/* Results Table */}\n            <div className=\"bg-gray-50 rounded-xl p-4 mb-6\">\n              <div className=\"space-y-3\">\n                {sortedPlayers.map((player, index) => (\n                  <div \n                    key={player.id}\n                    className=\"flex justify-between items-center py-2 border-b border-gray-200 last:border-b-0\"\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      {index === 0 && <i className=\"fas fa-crown text-game-gold\"></i>}\n                      <span className={index === 0 ? 'font-semibold' : ''}>{player.name}</span>\n                    </div>\n                    <span className={cn(\n                      'text-xl font-bold',\n                      index === 0 ? 'text-green-600' : 'text-gray-700'\n                    )}>\n                      {player.totalScore}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Rewards */}\n            {winner.id === 'player-0' && (\n              <div className=\"bg-game-gold bg-opacity-10 rounded-xl p-4 mb-6\">\n                <h3 className=\"font-semibold text-gray-900 mb-3\">Rewards Earned</h3>\n                <div className=\"flex justify-center space-x-6\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-game-gold\">+150</div>\n                    <div className=\"text-sm text-gray-600\">XP</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-game-gold\">+25</div>\n                    <div className=\"text-sm text-gray-600\">Coins</div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Actions */}\n            <div className=\"space-y-3\">\n              <Button \n                onClick={playAgain}\n                className=\"w-full bg-game-gold hover:bg-yellow-500\"\n                data-testid=\"button-play-again\"\n              >\n                Play Again\n              </Button>\n              <Button \n                onClick={backToMenu}\n                variant=\"outline\"\n                className=\"w-full\"\n                data-testid=\"button-back-to-menu\"\n              >\n                Back to Menu\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":13965},"client/src/pages/GameSetup.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { GameSettings } from '@/types/game';\nimport { cn } from '@/lib/utils';\n\nexport default function GameSetup() {\n  const [, setLocation] = useLocation();\n  const [settings, setSettings] = useState<GameSettings>({\n    playerCount: 2,\n    rounds: 5,\n    mode: 'solo'\n  });\n\n  // Get mode from URL params\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const mode = params.get('mode') as 'solo' | 'pass-play' | 'online';\n    if (mode) {\n      setSettings(prev => ({ ...prev, mode }));\n    }\n  }, []);\n\n  const setPlayerCount = (count: 2 | 3 | 4) => {\n    setSettings(prev => ({ ...prev, playerCount: count }));\n  };\n\n  const setRounds = (rounds: 5 | 9) => {\n    setSettings(prev => ({ ...prev, rounds }));\n  };\n\n  const startGame = () => {\n    const params = new URLSearchParams({\n      mode: settings.mode,\n      players: settings.playerCount.toString(),\n      rounds: settings.rounds.toString()\n    });\n    setLocation(`/game?${params.toString()}`);\n  };\n\n  const getModeTitle = () => {\n    switch (settings.mode) {\n      case 'solo': return 'Solo vs AI';\n      case 'pass-play': return 'Pass & Play';\n      case 'online': return 'Online Multiplayer';\n      default: return 'Game Setup';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-game-green to-game-felt flex flex-col\">\n      <header className=\"flex justify-between items-center p-6\">\n        <Button \n          variant=\"ghost\" \n          onClick={() => setLocation('/')}\n          className=\"text-white text-xl hover:text-blue-400 transition-colors\"\n          data-testid=\"button-back\"\n        >\n          <i className=\"fas fa-arrow-left\"></i>\n        </Button>\n        <h2 className=\"text-white text-xl font-semibold\">{getModeTitle()}</h2>\n        <div></div>\n      </header>\n\n      <div className=\"flex-1 px-6 pb-6\">\n        <div className=\"max-w-md mx-auto space-y-6\">\n          {/* Player Count */}\n          <div className=\"bg-white bg-opacity-10 backdrop-blur-sm rounded-xl p-6\">\n            <h3 className=\"text-white font-semibold mb-4\">Number of Players</h3>\n            <div className=\"grid grid-cols-3 gap-2\">\n              {[2, 3, 4].map((count) => (\n                <Button\n                  key={count}\n                  onClick={() => setPlayerCount(count as 2 | 3 | 4)}\n                  className={cn(\n                    'py-3 px-4 rounded-lg font-medium transition-all',\n                    settings.playerCount === count\n                      ? 'bg-blue-600 text-white border-2 border-blue-500'\n                      : 'bg-white bg-opacity-20 text-white hover:bg-opacity-30'\n                  )}\n                  data-testid={`button-players-${count}`}\n                >\n                  {count}\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          {/* Rounds */}\n          <div className=\"bg-white bg-opacity-10 backdrop-blur-sm rounded-xl p-6\">\n            <h3 className=\"text-white font-semibold mb-4\">Number of Rounds</h3>\n            <div className=\"grid grid-cols-2 gap-2\">\n              {[5, 9].map((rounds) => (\n                <Button\n                  key={rounds}\n                  onClick={() => setRounds(rounds as 5 | 9)}\n                  className={cn(\n                    'py-3 px-4 rounded-lg font-medium transition-all',\n                    settings.rounds === rounds\n                      ? 'bg-blue-600 text-white border-2 border-blue-500'\n                      : 'bg-white bg-opacity-20 text-white hover:bg-opacity-30'\n                  )}\n                  data-testid={`button-rounds-${rounds}`}\n                >\n                  {rounds} Rounds\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          {/* Start Game */}\n          <Button \n            onClick={startGame}\n            className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-4 px-6 rounded-xl text-lg transition-all duration-200\"\n            data-testid=\"button-start-game\"\n          >\n            Start Game\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4240},"client/src/pages/Home.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useUserStats } from '@/hooks/useUserProgression';\nimport HowToPlay from '@/components/Game/HowToPlay';\nimport { getCosmeticAsset } from '@/utils/cosmeticAssets';\ninterface CosmeticWithDetails {\n  id: string;\n  cosmeticId: string;\n  name: string;\n  type: string;\n  equipped: boolean;\n}\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n  const [showHowToPlay, setShowHowToPlay] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const [showProfile, setShowProfile] = useState(false);\n  \n  const { user } = useAuth();\n  const { data: userStats } = useUserStats();\n  \n  const { data: userCosmetics = [] } = useQuery<CosmeticWithDetails[]>({\n    queryKey: [\"/api/user/cosmetics\"],\n  });\n\n  const selectMode = (mode: 'solo' | 'pass-play' | 'online') => {\n    setLocation(`/setup?mode=${mode}`);\n  };\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  // Function to render cosmetic preview images\n  const getPreviewImage = (cosmetic: CosmeticWithDetails) => {\n    // Use the cosmetic ID (classic_blue, green_felt, etc.) instead of the database row ID\n    const assetUrl = getCosmeticAsset(cosmetic.cosmeticId);\n    \n    if (assetUrl) {\n      return (\n        <div className=\"w-12 h-12 rounded-lg border border-game-gold/50 overflow-hidden shadow-lg bg-slate-700/30\">\n          <img \n            src={assetUrl} \n            alt={cosmetic.name}\n            className=\"w-full h-full object-cover\"\n          />\n        </div>\n      );\n    }\n    \n    // Fallback with type-specific icons only when no asset is available\n    const getTypeIcon = (type: string) => {\n      switch (type) {\n        case 'card_back': return 'fas fa-clone';\n        case 'table_theme': return 'fas fa-table';\n        case 'avatar': return 'fas fa-user';\n        default: return 'fas fa-palette';\n      }\n    };\n    \n    return (\n      <div className=\"w-12 h-12 bg-gradient-to-br from-slate-600/50 to-slate-700/50 rounded-lg border border-game-gold/50 flex items-center justify-center shadow-lg\">\n        <i className={`${getTypeIcon(cosmetic.type)} text-game-gold text-lg`}></i>\n      </div>\n    );\n  };\n\n  // Show loading state until user data is available\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-game-green to-game-felt flex items-center justify-center\">\n        <div className=\"text-white text-xl\">Loading...</div>\n      </div>\n    );\n  }\n\n  // Calculate user display data\n  const displayName = user.firstName \n    ? `${user.firstName}${user.lastName ? ` ${user.lastName}` : ''}`\n    : user.email?.split('@')[0] \n    ? user.email.split('@')[0] \n    : 'Player';\n\n  const winRate = userStats?.gamesPlayed \n    ? Math.round(((userStats.gamesWon || 0) / userStats.gamesPlayed) * 100) \n    : 0;\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-game-green to-game-felt\">\n      {/* Header */}\n      <header className=\"flex justify-between items-center p-6\">\n        <button \n          onClick={() => setShowProfile(true)}\n          className=\"flex items-center space-x-4 hover:bg-white hover:bg-opacity-10 rounded-lg p-2 transition-all\"\n          data-testid=\"button-profile\"\n        >\n          <div className=\"w-12 h-12 bg-blue-600 rounded-full flex items-center justify-center border-2 border-blue-500 overflow-hidden\">\n            {(() => {\n              const equippedAvatar = userCosmetics.find(cosmetic => \n                cosmetic.type === 'avatar' && cosmetic.equipped\n              );\n              if (equippedAvatar) {\n                const assetUrl = getCosmeticAsset(equippedAvatar.cosmeticId);\n                if (assetUrl) {\n                  return (\n                    <img \n                      src={assetUrl} \n                      alt={equippedAvatar.name}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  );\n                }\n              }\n              // Fallback to Replit profile image or generic icon\n              if (user.profileImageUrl) {\n                return (\n                  <img \n                    src={user.profileImageUrl} \n                    alt=\"Profile\" \n                    className=\"w-full h-full object-cover\"\n                  />\n                );\n              }\n              return <i className=\"fas fa-user text-white text-xl\"></i>;\n            })()}\n          </div>\n          <div className=\"text-white\">\n            <div className=\"font-semibold\">{displayName}</div>\n            <div className=\"text-sm opacity-80\">Level {user.level || 1} • {(user.experience || 0).toLocaleString()} XP</div>\n            <div className=\"text-sm text-yellow-300 font-medium\">{user.currency || 0} coins</div>\n          </div>\n        </button>\n        \n        <div className=\"flex gap-3\">\n          <Button \n            onClick={() => setLocation('/cosmetics')}\n            className=\"bg-slate-800/80 backdrop-blur-sm border-2 border-game-gold/50 text-game-gold hover:bg-slate-700 hover:border-game-gold hover:shadow-lg hover:shadow-game-gold/20 transition-all duration-200\"\n            data-testid=\"button-cosmetics\"\n          >\n            <i className=\"fas fa-palette mr-2\"></i>\n            Cosmetics\n          </Button>\n          <Button \n            onClick={() => setLocation('/settings')}\n            className=\"bg-slate-800/80 backdrop-blur-sm border-2 border-game-gold/50 text-game-gold hover:bg-slate-700 hover:border-game-gold hover:shadow-lg hover:shadow-game-gold/20 transition-all duration-200\"\n            data-testid=\"button-settings\"\n          >\n            <i className=\"fas fa-cog mr-2\"></i>\n            Settings\n          </Button>\n          <button \n            onClick={handleLogout}\n            className=\"bg-slate-800/80 backdrop-blur-sm border-2 border-red-400/50 text-red-400 hover:bg-red-900/30 hover:border-red-400 hover:shadow-lg hover:shadow-red-400/20 transition-all duration-200 px-4 py-2 rounded-lg\" \n            data-testid=\"button-logout\"\n          >\n            <i className=\"fas fa-sign-out-alt\"></i>\n          </button>\n        </div>\n      </header>\n\n      {/* Game Logo */}\n      <div className=\"flex-1 flex flex-col items-center justify-center px-6\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-6xl md:text-8xl font-bold text-white mb-4\">Golf 9</h1>\n          <p className=\"text-xl text-game-cream opacity-90\">The Card Game</p>\n        </div>\n\n        {/* Mode Selection */}\n        <div className=\"w-full max-w-md space-y-4\">\n          <Button \n            onClick={() => selectMode('solo')}\n            className=\"w-full bg-white bg-opacity-10 backdrop-blur-sm hover:bg-opacity-20 text-white py-4 px-6 rounded-xl border border-white border-opacity-20 transition-all duration-200 flex items-center justify-between h-auto\"\n            data-testid=\"button-solo-mode\"\n          >\n            <div className=\"flex items-center space-x-4\">\n              <i className=\"fas fa-robot text-blue-400 text-xl\"></i>\n              <span className=\"font-semibold\">Solo vs AI</span>\n            </div>\n            <i className=\"fas fa-chevron-right opacity-60\"></i>\n          </Button>\n\n          <Button \n            onClick={() => selectMode('pass-play')}\n            className=\"w-full bg-white bg-opacity-10 backdrop-blur-sm hover:bg-opacity-20 text-white py-4 px-6 rounded-xl border border-white border-opacity-20 transition-all duration-200 flex items-center justify-between h-auto\"\n            data-testid=\"button-pass-play-mode\"\n          >\n            <div className=\"flex items-center space-x-4\">\n              <i className=\"fas fa-users text-blue-400 text-xl\"></i>\n              <span className=\"font-semibold\">Pass & Play</span>\n            </div>\n            <i className=\"fas fa-chevron-right opacity-60\"></i>\n          </Button>\n\n          <Button \n            onClick={() => setLocation('/online-multiplayer')}\n            className=\"w-full bg-white bg-opacity-10 backdrop-blur-sm hover:bg-opacity-20 text-white py-4 px-6 rounded-xl border border-white border-opacity-20 transition-all duration-200 flex items-center justify-between h-auto\"\n            data-testid=\"button-online-mode\"\n          >\n            <div className=\"flex items-center space-x-4\">\n              <i className=\"fas fa-wifi text-blue-400 text-xl\"></i>\n              <span className=\"font-semibold\">Online Multiplayer</span>\n            </div>\n            <i className=\"fas fa-chevron-right opacity-60\"></i>\n          </Button>\n\n          <Button \n            onClick={() => setShowHowToPlay(true)}\n            className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-4 px-6 rounded-xl transition-all duration-200\"\n            data-testid=\"button-how-to-play\"\n          >\n            <i className=\"fas fa-question-circle mr-2\"></i>\n            How to Play\n          </Button>\n        </div>\n      </div>\n\n      <HowToPlay \n        isOpen={showHowToPlay} \n        onClose={() => setShowHowToPlay(false)} \n      />\n      \n      {/* Settings Dialog */}\n      <Dialog open={showSettings} onOpenChange={setShowSettings}>\n        <DialogContent className=\"max-w-md bg-gradient-to-br from-slate-800 to-slate-900 border-2 border-game-gold/30 text-white\">\n          <DialogHeader>\n            <DialogTitle className=\"text-2xl font-bold bg-gradient-to-r from-game-gold to-yellow-300 bg-clip-text text-transparent\">Settings</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between py-4 px-4 bg-slate-700/30 rounded-xl border border-slate-600/30\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-10 h-10 bg-game-gold/20 rounded-full flex items-center justify-center\">\n                  <i className=\"fas fa-volume-up text-game-gold\"></i>\n                </div>\n                <span className=\"text-slate-200 font-medium\">Sound Effects</span>\n              </div>\n              <div className=\"w-14 h-7 bg-game-gold rounded-full relative cursor-pointer shadow-inner\">\n                <div className=\"absolute right-1 top-1 w-5 h-5 bg-white rounded-full shadow-lg transition-all duration-200\"></div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center justify-between py-4 px-4 bg-slate-700/30 rounded-xl border border-slate-600/30\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-10 h-10 bg-slate-600/50 rounded-full flex items-center justify-center\">\n                  <i className=\"fas fa-mobile-alt text-slate-400\"></i>\n                </div>\n                <span className=\"text-slate-200 font-medium\">Vibration</span>\n              </div>\n              <div className=\"w-14 h-7 bg-slate-600 rounded-full relative cursor-pointer shadow-inner\">\n                <div className=\"absolute left-1 top-1 w-5 h-5 bg-white rounded-full shadow-lg transition-all duration-200\"></div>\n              </div>\n            </div>\n            \n            <Button \n              onClick={handleLogout}\n              className=\"w-full mt-6 bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800 text-white border-0 shadow-lg hover:shadow-xl transition-all duration-200\"\n              data-testid=\"button-logout\"\n            >\n              <i className=\"fas fa-sign-out-alt mr-2\"></i>\n              Logout\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n      \n      {/* Profile Dialog */}\n      <Dialog open={showProfile} onOpenChange={setShowProfile}>\n        <DialogContent className=\"max-w-lg bg-gradient-to-br from-slate-800 to-slate-900 border-2 border-game-gold/30 text-white\">\n          <DialogHeader>\n            <DialogTitle className=\"text-2xl font-bold bg-gradient-to-r from-game-gold to-yellow-300 bg-clip-text text-transparent\">Player Profile</DialogTitle>\n            <DialogDescription className=\"text-slate-300\">\n              View your stats, progress, and equipped cosmetics\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-6\">\n            {/* Avatar Section */}\n            <div className=\"text-center\">\n              <div className=\"w-20 h-20 bg-game-gold rounded-full flex items-center justify-center mx-auto mb-4 overflow-hidden\">\n                {(() => {\n                  const equippedAvatar = userCosmetics.find(cosmetic => \n                    cosmetic.type === 'avatar' && cosmetic.equipped\n                  );\n                  if (equippedAvatar) {\n                    const assetUrl = getCosmeticAsset(equippedAvatar.cosmeticId);\n                    if (assetUrl) {\n                      return (\n                        <img \n                          src={assetUrl} \n                          alt={equippedAvatar.name}\n                          className=\"w-full h-full object-cover\"\n                        />\n                      );\n                    }\n                  }\n                  return <i className=\"fas fa-user text-white text-3xl\"></i>;\n                })()}\n              </div>\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                className=\"bg-slate-800/80 backdrop-blur-sm border-2 border-game-gold/50 text-game-gold hover:bg-slate-700 hover:border-game-gold hover:shadow-lg hover:shadow-game-gold/20 transition-all duration-200\"\n                onClick={() => {\n                  setShowProfile(false);\n                  setLocation('/cosmetics');\n                }}\n                data-testid=\"button-change-avatar\"\n              >\n                <i className=\"fas fa-edit mr-2\"></i>\n                Change Avatar\n              </Button>\n            </div>\n            \n            <Separator />\n            \n            {/* Stats */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"bg-gradient-to-br from-slate-700/50 to-slate-800/50 p-4 rounded-xl text-center border border-slate-600/30\">\n                <div className=\"text-2xl font-bold text-game-gold\">{user.level || 1}</div>\n                <div className=\"text-sm text-slate-300\">Level</div>\n              </div>\n              <div className=\"bg-gradient-to-br from-slate-700/50 to-slate-800/50 p-4 rounded-xl text-center border border-slate-600/30\">\n                <div className=\"text-2xl font-bold text-yellow-400\">{user.currency || 0}</div>\n                <div className=\"text-sm text-slate-300\">Coins</div>\n              </div>\n              <div className=\"bg-gradient-to-br from-slate-700/50 to-slate-800/50 p-4 rounded-xl text-center border border-slate-600/30\">\n                <div className=\"text-2xl font-bold text-blue-400\">{userStats?.gamesPlayed || 0}</div>\n                <div className=\"text-sm text-slate-300\">Games Played</div>\n              </div>\n              <div className=\"bg-gradient-to-br from-slate-700/50 to-slate-800/50 p-4 rounded-xl text-center border border-slate-600/30\">\n                <div className=\"text-2xl font-bold text-green-400\">{winRate}%</div>\n                <div className=\"text-sm text-slate-300\">Win Rate</div>\n              </div>\n            </div>\n            \n            {/* Experience Progress */}\n            <div className=\"bg-gradient-to-r from-slate-700/30 to-slate-800/30 p-4 rounded-xl border border-slate-600/30\">\n              <div className=\"flex justify-between text-sm text-slate-300 mb-3\">\n                <span className=\"font-medium\">Experience</span>\n                <span>{(user.experience || 0).toLocaleString()} / {((user.level || 1) * 100).toLocaleString()} XP</span>\n              </div>\n              <div className=\"w-full bg-slate-700 rounded-full h-4 shadow-inner\">\n                <div className=\"bg-gradient-to-r from-game-gold to-yellow-400 h-4 rounded-full shadow-lg transition-all duration-500\" style={{ width: `${((user.experience || 0) / ((user.level || 1) * 100)) * 100}%` }}></div>\n              </div>\n            </div>\n            \n            {/* Equipped Cosmetics Section */}\n            <div>\n              <div className=\"flex justify-between items-center mb-3\">\n                <h3 className=\"font-semibold text-white\">Equipped Items</h3>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  className=\"bg-slate-800/80 backdrop-blur-sm border-2 border-game-gold/50 text-game-gold hover:bg-slate-700 hover:border-game-gold hover:shadow-lg hover:shadow-game-gold/20 transition-all duration-200\"\n                  onClick={() => {\n                    setShowProfile(false);\n                    setLocation('/cosmetics');\n                  }}\n                  data-testid=\"button-manage-cosmetics\"\n                >\n                  <i className=\"fas fa-palette mr-2\"></i>\n                  Manage\n                </Button>\n              </div>\n              \n              {userCosmetics.length > 0 ? (\n                <div className=\"space-y-2\">\n                  {userCosmetics\n                    .filter(cosmetic => cosmetic.equipped)\n                    .map(cosmetic => (\n                      <div key={cosmetic.id} className=\"flex items-center justify-between p-4 border border-game-gold/30 rounded-lg bg-gradient-to-r from-slate-700/30 to-slate-800/30\">\n                        <div className=\"flex items-center space-x-4\">\n                          {getPreviewImage(cosmetic)}\n                          <div>\n                            <div className=\"font-medium text-white\">{cosmetic.name}</div>\n                            <div className=\"text-xs text-slate-400 capitalize\">{cosmetic.type?.replace('_', ' ')}</div>\n                          </div>\n                        </div>\n                        <Badge variant=\"outline\" className=\"text-xs border-game-gold text-game-gold bg-game-gold/10\">\n                          <i className=\"fas fa-check mr-1\"></i>\n                          Equipped\n                        </Badge>\n                      </div>\n                    ))}\n                  \n                  {userCosmetics.filter(c => c.equipped).length === 0 && (\n                    <div className=\"text-center py-4 text-slate-400\">\n                      <i className=\"fas fa-palette text-2xl mb-2 opacity-50 text-game-gold\"></i>\n                      <p className=\"text-sm text-white\">No cosmetics equipped</p>\n                      <p className=\"text-xs\">Visit the Cosmetics store to equip items</p>\n                    </div>\n                  )}\n                </div>\n              ) : (\n                <div className=\"text-center py-4 text-slate-400\">\n                  <i className=\"fas fa-shopping-bag text-2xl mb-2 opacity-50 text-game-gold\"></i>\n                  <p className=\"text-sm text-white\">No cosmetics owned</p>\n                  <p className=\"text-xs\">Visit the Cosmetics store to purchase items</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":19448},"client/src/pages/Landing.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 flex flex-col items-center justify-center px-6 relative overflow-hidden\">\n      {/* Background decorative elements */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <div className=\"absolute -top-40 -right-40 w-80 h-80 bg-blue-500 bg-opacity-10 rounded-full blur-3xl\"></div>\n        <div className=\"absolute -bottom-40 -left-40 w-80 h-80 bg-emerald-500 bg-opacity-10 rounded-full blur-3xl\"></div>\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-blue-400 bg-opacity-5 rounded-full blur-3xl\"></div>\n      </div>\n\n      <div className=\"relative z-10 w-full max-w-4xl\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-16\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-7xl md:text-9xl font-bold text-white mb-6 drop-shadow-2xl\">\n              Golf 9\n            </h1>\n            <p className=\"text-2xl md:text-3xl text-gray-300 font-light mb-4 drop-shadow-lg\">\n              The Strategic Card Game\n            </p>\n            <p className=\"text-lg md:text-xl text-gray-200 max-w-2xl mx-auto leading-relaxed\">\n              Master the art of low scores in this exciting card game. Compete against intelligent AI opponents, \n              track your progress, and unlock exclusive rewards as you climb the leaderboards.\n            </p>\n          </div>\n\n          {/* Feature highlights */}\n          <div className=\"grid md:grid-cols-3 gap-6 mb-12 max-w-3xl mx-auto\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-blue-500 bg-opacity-20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-trophy text-yellow-300 text-2xl\"></i>\n              </div>\n              <h3 className=\"text-white font-semibold mb-2\">Earn Rewards</h3>\n              <p className=\"text-gray-300 text-sm\">Unlock achievements and collect coins</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-green-500 bg-opacity-20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-chart-line text-green-300 text-2xl\"></i>\n              </div>\n              <h3 className=\"text-white font-semibold mb-2\">Track Progress</h3>\n              <p className=\"text-gray-300 text-sm\">Monitor stats and level up your skills</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-purple-500 bg-opacity-20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-palette text-purple-300 text-2xl\"></i>\n              </div>\n              <h3 className=\"text-white font-semibold mb-2\">Customize</h3>\n              <p className=\"text-gray-300 text-sm\">Personalize cards and themes</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Sign In Card */}\n        <div className=\"max-w-md mx-auto\">\n          <Card className=\"bg-white bg-opacity-15 backdrop-blur-lg border-white border-opacity-30 shadow-2xl\">\n            <CardContent className=\"p-8\">\n              <div className=\"text-center mb-6\">\n                <h2 className=\"text-2xl font-bold text-white mb-2\">Ready to Play?</h2>\n                <p className=\"text-gray-200\">Choose your preferred sign-in method</p>\n              </div>\n\n              <Button \n                onClick={handleLogin}\n                className=\"w-full bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-bold py-4 px-6 rounded-xl text-lg transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105\"\n                data-testid=\"button-login\"\n              >\n                <div className=\"flex items-center justify-center space-x-3\">\n                  <div className=\"w-6 h-6 bg-white rounded flex items-center justify-center\">\n                    <i className=\"fas fa-sign-in-alt text-blue-600 text-sm\"></i>\n                  </div>\n                  <span>Sign In</span>\n                </div>\n              </Button>\n\n              <div className=\"mt-4 text-center\">\n                <p className=\"text-gray-300 text-xs mb-2\">Available sign-in options:</p>\n                <div className=\"flex justify-center space-x-3 text-gray-400 flex-wrap gap-y-2\">\n                  <div className=\"flex items-center space-x-1\">\n                    <i className=\"fab fa-google text-sm\"></i>\n                    <span className=\"text-xs\">Google</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <i className=\"fab fa-x-twitter text-sm\"></i>\n                    <span className=\"text-xs\">X</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <i className=\"fab fa-apple text-sm\"></i>\n                    <span className=\"text-xs\">Apple</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <i className=\"fas fa-envelope text-sm\"></i>\n                    <span className=\"text-xs\">Email</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <i className=\"fas fa-user text-sm\"></i>\n                    <span className=\"text-xs\">Replit</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"mt-6 text-center\">\n                <p className=\"text-gray-200 text-sm mb-3\">What you'll get:</p>\n                <div className=\"space-y-2 text-left\">\n                  <div className=\"flex items-center space-x-3 text-gray-200 text-sm\">\n                    <i className=\"fas fa-check text-emerald-400\"></i>\n                    <span>Persistent game progress and statistics</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3 text-gray-200 text-sm\">\n                    <i className=\"fas fa-check text-emerald-400\"></i>\n                    <span>XP system with level progression</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3 text-gray-200 text-sm\">\n                    <i className=\"fas fa-check text-emerald-400\"></i>\n                    <span>Coin rewards and cosmetic unlocks</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3 text-gray-200 text-sm\">\n                    <i className=\"fas fa-check text-emerald-400\"></i>\n                    <span>Global leaderboards and achievements</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"mt-6 pt-4 border-t border-white border-opacity-30\">\n                <p className=\"text-center text-gray-300 text-xs\">\n                  Enterprise-grade security • No credit card required\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Demo hint */}\n        <div className=\"text-center mt-8\">\n          <p className=\"text-gray-400 text-sm\">\n            Game demo available after sign in • No payment required\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7543},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/game.ts":{"content":"export interface Card {\n  suit: 'hearts' | 'diamonds' | 'clubs' | 'spades';\n  value: 'A' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | 'J' | 'Q' | 'K';\n  id: string;\n}\n\nexport interface GridCard {\n  card: Card | null;\n  isRevealed: boolean;\n  position: number; // 0-8 for 3x3 grid\n  isDisabled?: boolean; // True when position is permanently cleared from three-of-a-kind\n}\n\nexport interface Player {\n  id: string;\n  name: string;\n  isAI: boolean;\n  grid: GridCard[];\n  roundScore: number;\n  totalScore: number;\n  isActive: boolean;\n  avatar: string;\n}\n\nexport interface GameState {\n  players: Player[];\n  currentPlayerIndex: number;\n  currentRound: number;\n  totalRounds: 5 | 9;\n  drawPile: Card[];\n  discardPile: Card[];\n  gamePhase: 'setup' | 'peek' | 'playing' | 'round-end' | 'game-end';\n  drawnCard: Card | null;\n  selectedGridPosition: number | null;\n  gameMode: 'solo' | 'pass-play' | 'online';\n  roundEndTriggered: boolean;\n  roundEndingPlayer?: number; // Index of player who triggered round end\n  extraTurn: boolean;\n  hasRevealedCardThisTurn: boolean;\n}\n\nexport interface GameSettings {\n  playerCount: 2 | 3 | 4;\n  rounds: 5 | 9;\n  mode: 'solo' | 'pass-play' | 'online';\n}\n\nexport type GameAction = \n  | { type: 'DRAW_CARD'; source: 'draw' | 'discard' }\n  | { type: 'SELECT_GRID_POSITION'; position: number }\n  | { type: 'KEEP_DRAWN_CARD' }\n  | { type: 'KEEP_REVEALED_CARD' }\n  | { type: 'PEEK_CARD'; position: number }\n  | { type: 'END_TURN' }\n  | { type: 'START_ROUND' }\n  | { type: 'END_ROUND' }\n  | { type: 'RESET_GAME' };\n","size_bytes":1549},"client/src/utils/aiLogic.ts":{"content":"import { Player, GameState, Card, GridCard } from '@/types/game';\nimport { getCardValue } from './gameLogic';\n\nexport interface AIDecision {\n  action: 'draw-from-discard' | 'draw-from-pile';\n  gridPosition?: number;\n  keepDrawn?: boolean;\n}\n\nexport function makeAIDecision(gameState: GameState, aiPlayer: Player): AIDecision {\n  // During extra turn, AI must draw from draw pile only\n  if (gameState.extraTurn) {\n    return {\n      action: 'draw-from-pile'\n    };\n  }\n  \n  const discardCard = gameState.discardPile[gameState.discardPile.length - 1];\n  const discardValue = getCardValue(discardCard);\n  \n  // Check if discard card is low value (good card)\n  const isDiscardGoodCard = discardValue <= 1 || discardValue === -5; // A, 2-4, 5, K\n  \n  // Find best position to place a good card\n  if (isDiscardGoodCard) {\n    const bestPosition = findBestGridPosition(aiPlayer, discardValue);\n    if (bestPosition !== -1) {\n      return {\n        action: 'draw-from-discard',\n        gridPosition: bestPosition,\n        keepDrawn: true\n      };\n    }\n  }\n  \n  // Otherwise, draw from pile and make decision based on what we get\n  return {\n    action: 'draw-from-pile'\n  };\n}\n\nexport function makeAIPlacementDecision(\n  gameState: GameState, \n  aiPlayer: Player, \n  drawnCard: Card, \n  selectedPosition: number\n): boolean {\n  const drawnValue = getCardValue(drawnCard);\n  const gridCard = aiPlayer.grid[selectedPosition];\n  \n  // If position is unrevealed, we need to decide based on card quality\n  if (!gridCard.isRevealed) {\n    // Keep very good cards (A=1, 5=-5, K=0)\n    if (drawnValue === 1 || drawnValue === -5 || drawnValue === 0) {\n      return true;\n    }\n    // Keep decent cards (2, 3, 4) most of the time\n    if (drawnValue <= 4) {\n      return true;\n    }\n    // Don't keep bad cards (7, 8, 9, 10, J, Q)\n    return false;\n  }\n  \n  // If position is revealed, always choose the better card\n  const currentValue = gridCard.card ? getCardValue(gridCard.card) : 10;\n  return drawnValue < currentValue;\n}\n\nfunction findBestGridPosition(player: Player, cardValue: number): number {\n  let bestPosition = -1;\n  let worstValue = cardValue;\n  \n  // Find the WORST revealed card that's worse than our new card\n  for (let i = 0; i < player.grid.length; i++) {\n    const gridCard = player.grid[i];\n    if (gridCard.isRevealed && gridCard.card && !gridCard.isDisabled) {\n      const currentValue = getCardValue(gridCard.card);\n      // Only consider replacing if the current card is worse than what we're placing\n      if (currentValue > cardValue && currentValue > worstValue) {\n        worstValue = currentValue;\n        bestPosition = i;\n      }\n    }\n  }\n  \n  // If no good revealed position and our card is very good, try unrevealed positions\n  if (bestPosition === -1 && (cardValue <= 1 || cardValue === -5)) {\n    for (let i = 0; i < player.grid.length; i++) {\n      if (!player.grid[i].isRevealed && !player.grid[i].isDisabled) {\n        bestPosition = i;\n        break;\n      }\n    }\n  }\n  \n  return bestPosition;\n}\n\nexport function selectAIPeekCards(player: Player): number[] {\n  // AI peeks at random positions that haven't been revealed yet and aren't disabled\n  const positions = [];\n  const availablePositions = Array.from({ length: 9 }, (_, i) => i)\n    .filter(pos => !player.grid[pos].isRevealed && !player.grid[pos].isDisabled);\n  \n  const cardsToReveal = Math.min(2, availablePositions.length);\n  \n  for (let i = 0; i < cardsToReveal; i++) {\n    const randomIndex = Math.floor(Math.random() * availablePositions.length);\n    positions.push(availablePositions[randomIndex]);\n    availablePositions.splice(randomIndex, 1);\n  }\n  \n  return positions;\n}\n\nexport function selectAIGridPosition(player: Player, drawnCard: Card): number {\n  const drawnValue = getCardValue(drawnCard);\n  \n  let bestPosition = -1;\n  let worstValueFound = drawnValue;\n  \n  // Find the WORST revealed card that we can improve upon\n  for (let i = 0; i < player.grid.length; i++) {\n    const gridCard = player.grid[i];\n    if (gridCard.isRevealed && gridCard.card && !gridCard.isDisabled) {\n      const currentValue = getCardValue(gridCard.card);\n      // Only consider positions where we'd improve the score\n      if (drawnValue < currentValue && currentValue > worstValueFound) {\n        worstValueFound = currentValue;\n        bestPosition = i;\n      }\n    }\n  }\n  \n  // If we found a good position to replace, use it\n  if (bestPosition !== -1) {\n    return bestPosition;\n  }\n  \n  // If the drawn card is very good (A, 2, 3, 4, 5, K), try unrevealed positions\n  if (drawnValue <= 4 || drawnValue === -5 || drawnValue === 0) {\n    const unrevealedPositions = player.grid\n      .map((gridCard, index) => ({ gridCard, index }))\n      .filter(({ gridCard }) => !gridCard.isRevealed && !gridCard.isDisabled)\n      .map(({ index }) => index);\n    \n    if (unrevealedPositions.length > 0) {\n      return unrevealedPositions[Math.floor(Math.random() * unrevealedPositions.length)];\n    }\n  }\n  \n  // Fallback to random position if we have no better choice, avoiding disabled positions\n  const availablePositions = player.grid\n    .map((gridCard, index) => ({ gridCard, index }))\n    .filter(({ gridCard }) => !gridCard.isDisabled)\n    .map(({ index }) => index);\n  \n  if (availablePositions.length > 0) {\n    return availablePositions[Math.floor(Math.random() * availablePositions.length)];\n  }\n  \n  // If all positions are somehow disabled (edge case), return 0\n  return 0;\n}\n","size_bytes":5454},"client/src/utils/gameLogic.ts":{"content":"import { Card, GridCard, Player, GameState, GameSettings } from '@/types/game';\n\n// Card deck generation\nexport function createDeck(): Card[] {\n  const suits: Card['suit'][] = ['hearts', 'diamonds', 'clubs', 'spades'];\n  const values: Card['value'][] = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\n  const deck: Card[] = [];\n\n  // Create two standard decks for Golf 9\n  for (let deckNum = 0; deckNum < 2; deckNum++) {\n    for (const suit of suits) {\n      for (const value of values) {\n        deck.push({\n          suit,\n          value,\n          id: `${suit}-${value}-${deckNum}`\n        });\n      }\n    }\n  }\n\n  return shuffleDeck(deck);\n}\n\nexport function shuffleDeck(deck: Card[]): Card[] {\n  const shuffled = [...deck];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  return shuffled;\n}\n\n// Card value calculation\nexport function getCardValue(card: Card): number {\n  switch (card.value) {\n    case 'A': return 1;\n    case '2': case '3': case '4': case '6': case '7': case '8': case '9': case '10':\n      return parseInt(card.value);\n    case '5': return -5;\n    case 'J': case 'Q': return 10;\n    case 'K': return 0;\n    default: return 0;\n  }\n}\n\n// Initialize player grid\nexport function createPlayerGrid(): GridCard[] {\n  return Array.from({ length: 9 }, (_, index) => ({\n    card: null,\n    isRevealed: false,\n    position: index,\n    isDisabled: false\n  }));\n}\n\n// Create initial game state\nexport function initializeGame(settings: GameSettings): GameState {\n  const deck = createDeck();\n  const players: Player[] = [];\n\n  // Create players based on settings\n  for (let i = 0; i < settings.playerCount; i++) {\n    const isAI = settings.mode === 'solo' && i > 0;\n    players.push({\n      id: `player-${i}`,\n      name: i === 0 ? 'You' : isAI ? `AI Player ${i}` : `Player ${i + 1}`,\n      isAI,\n      grid: createPlayerGrid(),\n      roundScore: 0,\n      totalScore: 0,\n      isActive: i === 0,\n      avatar: i === 0 ? 'P1' : isAI ? 'AI' : `P${i + 1}`\n    });\n  }\n\n  // Deal cards to players (9 cards each)\n  let deckIndex = 0;\n  for (const player of players) {\n    for (let i = 0; i < 9; i++) {\n      player.grid[i].card = deck[deckIndex++];\n    }\n  }\n\n  // Set up draw and discard piles\n  const drawPile = deck.slice(deckIndex + 1);\n  const discardPile = [deck[deckIndex]];\n\n  return {\n    players,\n    currentPlayerIndex: 0,\n    currentRound: 1,\n    totalRounds: settings.rounds,\n    drawPile,\n    discardPile,\n    gamePhase: 'peek',\n    drawnCard: null,\n    selectedGridPosition: null,\n    gameMode: settings.mode,\n    roundEndTriggered: false,\n    extraTurn: false,\n    hasRevealedCardThisTurn: false\n  };\n}\n\n// Check for three of a kind in columns\nexport function checkThreeOfAKind(grid: GridCard[]): number[] {\n  const columns = [\n    [0, 3, 6], // Column 1\n    [1, 4, 7], // Column 2\n    [2, 5, 8]  // Column 3\n  ];\n\n  const threeOfAKindColumns: number[] = [];\n\n  for (let colIndex = 0; colIndex < columns.length; colIndex++) {\n    const columnPositions = columns[colIndex];\n    const revealedCards = columnPositions\n      .filter(pos => grid[pos].isRevealed && grid[pos].card)\n      .map(pos => grid[pos].card!);\n\n    if (revealedCards.length === 3) {\n      const values = revealedCards.map(card => card.value);\n      if (values[0] === values[1] && values[1] === values[2]) {\n        threeOfAKindColumns.push(colIndex);\n      }\n    }\n  }\n\n  return threeOfAKindColumns;\n}\n\n// Process three of a kind: discard matching cards and clear the column\nexport function processThreeOfAKind(grid: GridCard[], discardPile: Card[]): { updatedGrid: GridCard[], updatedDiscardPile: Card[], hasThreeOfAKind: boolean } {\n  const columns = [\n    [0, 3, 6], // Column 1\n    [1, 4, 7], // Column 2\n    [2, 5, 8]  // Column 3\n  ];\n\n  let updatedGrid = [...grid];\n  let updatedDiscardPile = [...discardPile];\n  let hasThreeOfAKind = false;\n\n  for (let colIndex = 0; colIndex < columns.length; colIndex++) {\n    const columnPositions = columns[colIndex];\n    const columnCards = columnPositions\n      .filter(pos => updatedGrid[pos].isRevealed && updatedGrid[pos].card)\n      .map(pos => ({ pos, card: updatedGrid[pos].card! }));\n\n    if (columnCards.length === 3) {\n      const values = columnCards.map(item => item.card.value);\n      if (values[0] === values[1] && values[1] === values[2]) {\n        // Three of a kind found! Discard cards and clear column\n        hasThreeOfAKind = true;\n        \n        // Add cards to discard pile\n        columnCards.forEach(item => {\n          updatedDiscardPile.push(item.card);\n        });\n        \n        // Permanently disable the column positions\n        columnPositions.forEach(pos => {\n          updatedGrid[pos] = {\n            card: null,\n            isRevealed: true, // Keep revealed to show disabled state\n            position: pos,\n            isDisabled: true // Mark as permanently disabled\n          };\n        });\n      }\n    }\n  }\n\n  return { updatedGrid, updatedDiscardPile, hasThreeOfAKind };\n}\n\n// Calculate player score\nexport function calculatePlayerScore(grid: GridCard[]): number {\n  const threeOfAKindColumns = checkThreeOfAKind(grid);\n  let score = 0;\n\n  const columns = [\n    [0, 3, 6], // Column 1\n    [1, 4, 7], // Column 2\n    [2, 5, 8]  // Column 3\n  ];\n\n  for (let colIndex = 0; colIndex < columns.length; colIndex++) {\n    if (threeOfAKindColumns.includes(colIndex)) {\n      // Three of a kind column = 0 points\n      continue;\n    }\n\n    const columnPositions = columns[colIndex];\n    for (const pos of columnPositions) {\n      if (grid[pos].isRevealed && grid[pos].card) {\n        score += getCardValue(grid[pos].card);\n      }\n    }\n  }\n\n  return score;\n}\n\n// Check if round should end\nexport function shouldEndRound(players: Player[]): boolean {\n  return players.some(player => \n    player.grid.every(gridCard => gridCard.isRevealed || gridCard.isDisabled)\n  );\n}\n\n// Auto-reshuffle when draw pile is empty\nexport function reshuffleIfNeeded(gameState: GameState): GameState {\n  if (gameState.drawPile.length === 0 && gameState.discardPile.length > 1) {\n    const topDiscard = gameState.discardPile[gameState.discardPile.length - 1];\n    const newDrawPile = shuffleDeck(gameState.discardPile.slice(0, -1));\n    \n    return {\n      ...gameState,\n      drawPile: newDrawPile,\n      discardPile: [topDiscard]\n    };\n  }\n  \n  return gameState;\n}\n\n// Get display name for card\nexport function getCardDisplayValue(card: Card): string {\n  return card.value === '10' ? '10' : card.value;\n}\n\n// Check if all players have peeked their cards\nexport function hasPlayerFinishedPeeking(player: Player): boolean {\n  return player.grid.filter(gridCard => gridCard.isRevealed).length >= 2;\n}\n\n// Get next player index\nexport function getNextPlayerIndex(currentIndex: number, playerCount: number): number {\n  return (currentIndex + 1) % playerCount;\n}\n","size_bytes":6950},"client/src/components/Game/Card.tsx":{"content":"import { Card as CardType } from '@/types/game';\nimport { getCardDisplayValue } from '@/utils/gameLogic';\nimport { cn } from '@/lib/utils';\nimport { useCosmetics } from '@/hooks/useCosmetics';\nimport { getCosmeticAsset } from '@/utils/cosmeticAssets';\n\ninterface CardProps {\n  card?: CardType | null;\n  isRevealed?: boolean;\n  isSelected?: boolean;\n  isHighlighted?: boolean;\n  highlightColor?: 'blue' | 'green';\n  size?: 'small' | 'medium' | 'large';\n  isDisabled?: boolean;\n  onClick?: () => void;\n  className?: string;\n  'data-testid'?: string;\n}\n\nexport default function Card({ \n  card, \n  isRevealed = false, \n  isSelected = false,\n  isHighlighted = false,\n  highlightColor = 'blue',\n  size = 'medium',\n  isDisabled = false,\n  onClick,\n  className,\n  'data-testid': testId\n}: CardProps) {\n  const { getCardBackStyle } = useCosmetics();\n  const getSizeClasses = () => {\n    switch (size) {\n      case 'small':\n        return 'w-12 h-16 text-xs';\n      case 'large':\n        return 'w-20 h-28 text-lg';\n      default:\n        return 'w-16 h-24 text-sm';\n    }\n  };\n\n  const getHighlightClasses = () => {\n    if (isSelected) {\n      return 'border-highlight-blue border-2';\n    }\n    if (isHighlighted) {\n      return highlightColor === 'green' \n        ? 'border-highlight-green border-2 shadow-lg' \n        : 'border-highlight-blue border-2';\n    }\n    // Only show white border for revealed cards, not card backs\n    return isRevealed && card ? 'border-white border-opacity-20 border-2' : '';\n  };\n\n  const getCardColor = (card: CardType) => {\n    return card.suit === 'hearts' || card.suit === 'diamonds' ? 'text-red-600' : 'text-black';\n  };\n\n  // Handle disabled state (permanently cleared from three-of-a-kind)\n  if (isDisabled) {\n    return (\n      <div\n        className={cn(\n          'bg-gray-200 dark:bg-gray-700 rounded-xl flex items-center justify-center text-gray-400 dark:text-gray-500 cursor-not-allowed',\n          getSizeClasses(),\n          'border-gray-300 dark:border-gray-600 border-2',\n          className\n        )}\n        data-testid={testId}\n      >\n        <div className=\"text-lg font-bold opacity-60\">×</div>\n      </div>\n    );\n  }\n\n  if (!isRevealed || !card) {\n    const cardBackStyle = getCardBackStyle();\n    const cardBackAsset = getCosmeticAsset(cardBackStyle.cosmeticId || 'classic_blue');\n    \n\n    \n    return (\n      <div\n        className={cn(\n          'rounded-xl flex items-center justify-center text-white cursor-pointer transition-all relative overflow-hidden border-0',\n          getSizeClasses(),\n          getHighlightClasses(),\n          onClick && !isDisabled && 'hover:scale-105',\n          className\n        )}\n        onClick={!isDisabled ? onClick : undefined}\n        data-testid={testId}\n      >\n        {cardBackAsset ? (\n          <img \n            src={cardBackAsset} \n            alt=\"Card back\"\n            className=\"w-full h-full object-cover rounded-xl\"\n          />\n        ) : (\n          <>\n            {/* Fallback pattern */}\n            <div \n              className=\"absolute inset-0\"\n              style={{\n                background: cardBackStyle.background,\n                border: cardBackStyle.border\n              }}\n            />\n            {cardBackStyle.pattern !== 'none' && (\n              <div \n                className=\"absolute inset-0\"\n                style={{ background: cardBackStyle.pattern }}\n              />\n            )}\n            \n            {/* Card back design */}\n            <div className=\"relative z-10 flex flex-col items-center\">\n              <div className=\"text-lg font-bold mb-1\">♠</div>\n              <div className=\"text-xs font-semibold opacity-80\">Golf 9</div>\n            </div>\n          </>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={cn(\n        'bg-white/90 dark:bg-gray-100/90 rounded-xl flex items-center justify-center font-bold transition-all shadow-lg ring-1 ring-black/5',\n        getSizeClasses(),\n        getHighlightClasses(),\n        getCardColor(card),\n        onClick && !isDisabled && 'cursor-pointer hover:scale-105 hover:shadow-xl',\n        className\n      )}\n      style={{\n        boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15), 0 2px 4px rgba(0, 0, 0, 0.1)'\n      }}\n      onClick={!isDisabled ? onClick : undefined}\n      data-testid={testId}\n    >\n      {getCardDisplayValue(card)}\n    </div>\n  );\n}\n","size_bytes":4377},"client/src/components/Game/GameHeader.tsx":{"content":"import { GameState } from '@/types/game';\nimport { Button } from '@/components/ui/button';\n\ninterface GameHeaderProps {\n  gameState: GameState;\n  onPause: () => void;\n}\n\nexport default function GameHeader({ gameState, onPause }: GameHeaderProps) {\n  const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n\n  return (\n    <div className=\"bg-game-felt border-b border-white border-opacity-10 px-4 py-3\">\n      <div className=\"flex justify-between items-center\">\n        <Button \n          variant=\"ghost\" \n          size=\"sm\"\n          onClick={onPause}\n          className=\"text-white hover:text-game-gold\"\n          data-testid=\"button-pause\"\n        >\n          <i className=\"fas fa-pause text-xl\"></i>\n        </Button>\n        \n        <div className=\"text-center text-white\">\n          <div className=\"font-semibold\">\n            Round <span data-testid=\"text-current-round\">{gameState.currentRound}</span> / <span data-testid=\"text-total-rounds\">{gameState.totalRounds}</span>\n          </div>\n          <div className=\"text-sm opacity-80\">\n            Current Player: <span data-testid=\"text-current-player\">{currentPlayer.name}</span>\n          </div>\n        </div>\n\n        <div className=\"text-white text-right\">\n          <div className=\"font-semibold\">Score</div>\n          <div className=\"text-lg\" data-testid=\"text-current-player-score\">\n            {currentPlayer.totalScore}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1470},"client/src/components/Game/GameTable.tsx":{"content":"import React from 'react';\nimport { GameState } from '@/types/game';\nimport { getCardDisplayValue } from '@/utils/gameLogic';\nimport PlayerGrid from './PlayerGrid';\nimport OpponentGrid from './OpponentGrid';\nimport Card from './Card';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { useCosmetics } from '@/hooks/useCosmetics';\nimport { getCosmeticAsset } from '@/utils/cosmeticAssets';\n\ninterface GameTableProps {\n  gameState: GameState;\n  onDrawCard: (source: 'draw' | 'discard') => void;\n  onSelectGridPosition: (position: number) => void;\n  onKeepDrawnCard: () => void;\n  onKeepRevealedCard: () => void;\n  onPeekCard: (position: number) => void;\n  onEndTurn: () => void;\n  onTurnStart?: () => void;\n}\n\nexport default function GameTable({\n  gameState,\n  onDrawCard,\n  onSelectGridPosition,\n  onKeepDrawnCard,\n  onKeepRevealedCard,\n  onPeekCard,\n  onEndTurn,\n  onTurnStart\n}: GameTableProps) {\n  const currentPlayer = gameState.players[gameState.currentPlayerIndex];\n  const { getTableThemeStyle } = useCosmetics();\n  \n  // Handle different game modes\n  let humanPlayer, aiPlayers, isPlayerTurn;\n  \n  if (gameState.gameMode === 'pass-play') {\n    // In pass-and-play mode, the current player is always the \"human\" player in main grid\n    humanPlayer = currentPlayer;\n    aiPlayers = gameState.players.filter((_, index) => index !== gameState.currentPlayerIndex);\n    isPlayerTurn = true; // Always true in pass-and-play since current player is always active\n  } else if (gameState.gameMode === 'online') {\n    // Online multiplayer mode: Show all players including empty seats\n    // For now, assume player 0 is the current user (this should be improved to use actual user ID)\n    humanPlayer = gameState.players[0];\n    // Show all other players/seats (including empty ones)\n    aiPlayers = gameState.players.filter((_, index) => index !== 0);\n    \n    // Check if it's the human player's turn (only considering active players)\n    const activePlayers = gameState.players.filter((p: any) => !p.isEmpty);\n    const currentActivePlayer = activePlayers[gameState.currentPlayerIndex];\n    isPlayerTurn = currentActivePlayer && currentActivePlayer.id === humanPlayer.id;\n  } else {\n    // Solo mode: Player 0 is human, others are AI\n    humanPlayer = gameState.players[0];\n    aiPlayers = gameState.players.filter((_, index) => index !== 0);\n    isPlayerTurn = gameState.currentPlayerIndex === 0;\n  }\n\n  const getOpponentPlayerLayout = () => {\n    const opponentCount = aiPlayers.length;\n    switch (opponentCount) {\n      case 0:\n        return 'hidden'; // No opponents to show\n      case 1:\n        return 'flex justify-center';\n      case 2:\n        return 'flex justify-between px-8';\n      case 3:\n        return 'grid grid-cols-3 gap-4 justify-items-center';\n      default:\n        return 'flex justify-center';\n    }\n  };\n\n  const canDrawCard = gameState.gamePhase === 'playing' && isPlayerTurn && !gameState.drawnCard && !gameState.roundEndTriggered;\n  const canDrawFromDiscard = canDrawCard && !gameState.extraTurn; // Can't draw from discard during extra turn\n  \n  // Debug logging\n  React.useEffect(() => {\n    if (gameState.extraTurn) {\n      console.log('EXTRA TURN ACTIVE - Discard pile should be disabled');\n      console.log('canDrawFromDiscard:', canDrawFromDiscard);\n      console.log('gameState.extraTurn:', gameState.extraTurn);\n    }\n  }, [gameState.extraTurn, canDrawFromDiscard]);\n  const canMakeChoice = gameState.drawnCard && gameState.selectedGridPosition !== null && !gameState.roundEndTriggered;\n  \n  // Special rule: if player has only one face-down card left at start of turn, they can discard directly\n  const humanPlayerFaceDownCount = humanPlayer.grid.filter(card => !card.isRevealed && !card.isDisabled).length;\n  // Only show direct discard if: has drawn card, has 1 face-down card, no position selected yet, and round hasn't ended\n  const canDiscardDirectly = gameState.drawnCard && humanPlayerFaceDownCount === 1 && isPlayerTurn && gameState.selectedGridPosition === null && !gameState.roundEndTriggered;\n\n  const tableThemeStyle = getTableThemeStyle();\n  const tableAsset = getCosmeticAsset(tableThemeStyle.cosmeticId || 'green_felt');\n  \n\n  \n  return (\n    <div \n      className=\"h-full max-w-6xl mx-auto relative rounded-lg overflow-hidden\"\n      style={tableAsset ? {\n        backgroundImage: `url(${tableAsset})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat'\n      } : {\n        background: tableThemeStyle.background,\n        backgroundImage: tableThemeStyle.texture !== 'none' ? tableThemeStyle.texture : undefined\n      }}\n    >\n      {/* Opponent Player Grids - Other players in pass-and-play or AI players in solo */}\n      <div className={cn('mb-6', getOpponentPlayerLayout())} data-testid=\"opponent-grids\">\n        {aiPlayers.map((aiPlayer, index) => (\n          <OpponentGrid\n            key={aiPlayer.id}\n            player={aiPlayer}\n            isCurrentPlayer={gameState.players[gameState.currentPlayerIndex].id === aiPlayer.id}\n            className=\"\"\n          />\n        ))}\n      </div>\n\n      {/* Center Area: Draw & Discard Piles */}\n      <div className=\"flex justify-center items-center mb-6\">\n        <div className=\"flex items-center space-x-8\">\n          {/* Draw Pile */}\n          <div className=\"text-center\">\n            <div className=\"text-white text-sm mb-2\">Draw Pile</div>\n            <div className=\"relative\">\n              <div \n                className={cn(\n                  'card-pile w-16 h-24 bg-card-back rounded-lg border-2 border-white border-opacity-30 cursor-pointer transition-colors',\n                  canDrawCard && 'hover:border-highlight-blue',\n                  !canDrawCard && 'opacity-50 cursor-not-allowed'\n                )}\n                onClick={canDrawCard ? () => onDrawCard('draw') : undefined}\n                data-testid=\"button-draw-pile\"\n              >\n                <div className=\"absolute inset-0 bg-black bg-opacity-20 rounded-lg\"></div>\n                <div className=\"absolute inset-0 bg-black bg-opacity-10 rounded-lg transform translate-x-0.5 translate-y-0.5\"></div>\n              </div>\n              \n              {/* Active drawn card overlay */}\n              {gameState.drawnCard && (\n                <div className=\"absolute inset-0 bg-white rounded-lg border-2 border-highlight-blue flex items-center justify-center text-black font-bold text-lg\" data-testid=\"card-drawn\">\n                  {getCardDisplayValue(gameState.drawnCard)}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Discard Pile */}\n          <div className=\"text-center\">\n            <div className=\"text-white text-sm mb-2\">Discard Pile</div>\n            <Card\n              card={gameState.discardPile[gameState.discardPile.length - 1]}\n              isRevealed={true}\n              size=\"medium\"\n              onClick={canDrawFromDiscard ? () => onDrawCard('discard') : undefined}\n              isDisabled={!canDrawFromDiscard || gameState.extraTurn}\n              className={cn(\n                canDrawFromDiscard && !gameState.extraTurn && 'cursor-pointer hover:border-highlight-blue',\n                (!canDrawFromDiscard || gameState.extraTurn) && 'opacity-30 cursor-not-allowed'\n              )}\n              data-testid=\"button-discard-pile\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Human Player's Grid - Always visible */}\n      <PlayerGrid\n        player={humanPlayer}\n        isCurrentPlayer={isPlayerTurn}\n        selectedPosition={gameState.selectedGridPosition}\n        onCardClick={gameState.gamePhase === 'peek' ? onPeekCard : \n                    (gameState.gamePhase === 'playing' && gameState.drawnCard && !gameState.roundEndTriggered ? onSelectGridPosition : undefined)}\n      />\n\n      {/* Game Actions - Fixed Height Container */}\n      <div className=\"bg-game-felt border-t border-white border-opacity-10 p-4 mt-6 min-h-[140px]\">\n        <div className=\"max-w-2xl mx-auto h-full flex flex-col justify-center\">\n          {gameState.gamePhase === 'playing' && gameState.drawnCard && (\n            <>\n              <div className=\"text-center text-white mb-3\">\n                <div className=\"text-sm opacity-80\">\n                  {gameState.roundEndTriggered\n                    ? 'Round ended! All players get one final turn.'\n                    : canDiscardDirectly\n                      ? 'With only 1 face-down card left, you can discard directly or place the card'\n                      : gameState.selectedGridPosition !== null \n                        ? 'Choose to keep the drawn card or the revealed card'\n                        : 'Select a card slot to place your drawn card (you can only reveal one card per turn)'\n                  }\n                </div>\n              </div>\n              <div className=\"flex justify-center space-x-4\">\n                {canDiscardDirectly && (\n                  <Button\n                    variant=\"destructive\"\n                    onClick={() => {\n                      // Directly discard the drawn card without revealing anything\n                      const event = new CustomEvent('directDiscard');\n                      window.dispatchEvent(event);\n                    }}\n                    data-testid=\"button-direct-discard\"\n                  >\n                    <i className=\"fas fa-trash mr-2\"></i>\n                    Discard Card\n                  </Button>\n                )}\n                <Button\n                  variant=\"destructive\"\n                  onClick={onKeepRevealedCard}\n                  disabled={!canMakeChoice}\n                  data-testid=\"button-keep-revealed\"\n                >\n                  <i className=\"fas fa-times mr-2\"></i>\n                  {canMakeChoice ? 'Discard Drawn' : 'Discard Drawn'}\n                </Button>\n                <Button\n                  className=\"bg-game-gold hover:bg-yellow-500\"\n                  onClick={onKeepDrawnCard}\n                  disabled={!canMakeChoice}\n                  data-testid=\"button-keep-drawn\"\n                >\n                  <i className=\"fas fa-check mr-2\"></i>\n                  Keep Drawn\n                </Button>\n              </div>\n            </>\n          )}\n          \n          {gameState.gamePhase === 'playing' && gameState.gameMode === 'pass-play' && !gameState.drawnCard && (\n            <div className=\"text-center\">\n              <Button\n                onClick={onEndTurn}\n                className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-2\"\n                data-testid=\"button-end-turn\"\n              >\n                End Turn & Pass Device\n              </Button>\n            </div>\n          )}\n\n          {gameState.gamePhase === 'peek' && (\n            <div className=\"text-center text-white\">\n              <div className=\"text-sm opacity-80\">\n                Click on 2 cards to reveal them before the game begins\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11103},"client/src/components/Game/HowToPlay.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\n\ninterface HowToPlayProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function HowToPlay({ isOpen, onClose }: HowToPlayProps) {\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold text-gray-900\">How to Play Golf 9</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Objective */}\n          <div>\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-3\">Objective</h3>\n            <p className=\"text-gray-700\">Get the lowest total score across 5 or 9 rounds by strategically managing your 3×3 grid of cards.</p>\n          </div>\n\n          {/* Card Values */}\n          <div>\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-3\">Card Values</h3>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"bg-gray-100 p-3 rounded-lg text-center\">\n                <div className=\"font-semibold\">Ace</div>\n                <div className=\"text-2xl font-bold text-green-600\">1</div>\n              </div>\n              <div className=\"bg-gray-100 p-3 rounded-lg text-center\">\n                <div className=\"font-semibold\">2-4, 6-10</div>\n                <div className=\"text-sm text-gray-600\">Face Value</div>\n              </div>\n              <div className=\"bg-gray-100 p-3 rounded-lg text-center\">\n                <div className=\"font-semibold\">5</div>\n                <div className=\"text-2xl font-bold text-green-600\">-5</div>\n              </div>\n              <div className=\"bg-gray-100 p-3 rounded-lg text-center\">\n                <div className=\"font-semibold\">J, Q</div>\n                <div className=\"text-2xl font-bold text-red-600\">10</div>\n              </div>\n            </div>\n            <div className=\"mt-4 bg-yellow-100 p-3 rounded-lg text-center\">\n              <div className=\"font-semibold\">King</div>\n              <div className=\"text-2xl font-bold text-blue-600\">0</div>\n            </div>\n          </div>\n\n          {/* Special Rule */}\n          <div>\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-3\">Special Rule: Three of a Kind</h3>\n            <div className=\"bg-green-50 p-4 rounded-lg\">\n              <p className=\"text-gray-700\">When you get three cards of the same value in a <strong>column</strong>, that entire column becomes worth 0 points and you get an extra turn!</p>\n            </div>\n          </div>\n\n          {/* Game Flow */}\n          <div>\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-3\">Game Flow</h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"bg-game-gold text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-semibold\">1</div>\n                <div>\n                  <div className=\"font-medium\">Deal Phase</div>\n                  <div className=\"text-gray-600\">Each player gets 9 face-down cards in a 3×3 grid</div>\n                </div>\n              </div>\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"bg-game-gold text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-semibold\">2</div>\n                <div>\n                  <div className=\"font-medium\">Peek Phase</div>\n                  <div className=\"text-gray-600\">Each player flips 2 cards face-up</div>\n                </div>\n              </div>\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"bg-game-gold text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-semibold\">3</div>\n                <div>\n                  <div className=\"font-medium\">Turn Phase</div>\n                  <div className=\"text-gray-600\">Draw a card, select a grid slot, then decide to keep the drawn card or the revealed card</div>\n                </div>\n              </div>\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"bg-game-gold text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-semibold\">4</div>\n                <div>\n                  <div className=\"font-medium\">Round End</div>\n                  <div className=\"text-gray-600\">When any player has all 9 cards revealed, others get one final turn</div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-blue-50 p-4 rounded-lg\">\n            <h4 className=\"font-semibold text-blue-900 mb-2\">Pro Tips</h4>\n            <ul className=\"text-blue-800 space-y-1 text-sm\">\n              <li>• Remember where your low-value cards are!</li>\n              <li>• Try to collect three of the same card in a column for the bonus</li>\n              <li>• Kings are worth 0 points - they're valuable!</li>\n              <li>• 5s are worth -5 points - even better!</li>\n            </ul>\n          </div>\n\n          <div className=\"flex justify-end\">\n            <Button onClick={onClose} data-testid=\"button-close-how-to-play\">\n              Got it!\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5445},"client/src/components/Game/OpponentGrid.tsx":{"content":"import { Player } from '@/types/game';\nimport { checkThreeOfAKind, calculatePlayerScore } from '@/utils/gameLogic';\nimport Card from './Card';\nimport { cn } from '@/lib/utils';\nimport { useCosmetics } from '@/hooks/useCosmetics';\n\ninterface OpponentGridProps {\n  player: Player;\n  isCurrentPlayer?: boolean;\n  className?: string;\n}\n\nexport default function OpponentGrid({ player, isCurrentPlayer = false, className }: OpponentGridProps) {\n  // Check if this is an empty seat\n  const isEmpty = (player as any).isEmpty;\n  \n  const threeOfAKindColumns = isEmpty ? [] : checkThreeOfAKind(player.grid);\n  const { getAvatarUrl } = useCosmetics();\n  \n  const getColumnForPosition = (position: number): number => {\n    return position % 3;\n  };\n\n  const isPositionInThreeOfAKind = (position: number): boolean => {\n    const column = getColumnForPosition(position);\n    return threeOfAKindColumns.includes(column);\n  };\n\n  // Calculate current round score based on revealed cards\n  const currentRoundScore = isEmpty ? 0 : calculatePlayerScore(player.grid);\n\n  // Show empty seat placeholder\n  if (isEmpty) {\n    return (\n      <div className={cn('opponent-grid opacity-50', className)} data-testid={`opponent-grid-${player.id}`}>\n        <div className=\"text-center mb-3\">\n          {/* Playing indicator with reserved space to avoid layout shift */}\n          <div className=\"h-4 flex items-center justify-center mb-1\"></div>\n          <div className=\"flex items-center justify-center space-x-2\">\n            <div className=\"w-8 h-8 rounded-full bg-gray-600 flex items-center justify-center text-white text-sm font-semibold\">\n              ?\n            </div>\n            <div className=\"text-gray-400 font-medium\">Waiting for player...</div>\n          </div>\n          <div className=\"text-gray-500 text-sm\">\n            <div>Round: <span className=\"font-semibold\">-</span></div>\n            <div>Total: <span className=\"font-semibold\">-</span></div>\n          </div>\n        </div>\n        \n        <div className=\"grid grid-cols-3 gap-2 w-36\">\n          {Array(9).fill(null).map((_, index) => (\n            <div key={index} className=\"w-10 h-14 bg-gray-700 rounded-lg opacity-30\"></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn('opponent-grid', className)} data-testid={`opponent-grid-${player.id}`}>\n      <div className=\"text-center mb-3\">\n        {/* Playing indicator with reserved space to avoid layout shift */}\n        <div className=\"h-4 flex items-center justify-center mb-1\">\n          {isCurrentPlayer && (\n            <div className=\"bg-green-600 text-white px-2 py-0.5 rounded-full text-xs font-medium border border-green-500\">\n              Playing\n            </div>\n          )}\n        </div>\n        <div className=\"flex items-center justify-center space-x-2\">\n          <div className={cn(\n            'w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-semibold overflow-hidden',\n            player.isAI ? 'bg-red-500' : 'bg-blue-500'\n          )}>\n            {(() => {\n              if (!player.isAI) {\n                const avatarUrl = getAvatarUrl();\n                if (avatarUrl) {\n                  return (\n                    <img \n                      src={avatarUrl} \n                      alt=\"Player Avatar\"\n                      className=\"w-full h-full object-cover\"\n                    />\n                  );\n                }\n              }\n              return player.avatar;\n            })()}\n          </div>\n          <div className=\"text-white font-medium\">{player.name}</div>\n        </div>\n        <div className=\"text-game-cream text-sm\">\n          <div>Round: <span className=\"font-semibold\" data-testid={`text-opponent-round-score-${player.id}`}>\n            {currentRoundScore}\n          </span></div>\n          <div>Total: <span className=\"font-semibold\" data-testid={`text-opponent-total-score-${player.id}`}>\n            {player.totalScore}\n          </span></div>\n        </div>\n      </div>\n      \n      <div className=\"grid grid-cols-3 gap-2 w-36\">\n        {player.grid.map((gridCard, index) => (\n          <div \n            key={index}\n            className=\"transform transition-all duration-200 hover:scale-105\"\n          >\n            <Card\n              card={gridCard.card}\n              isRevealed={gridCard.isRevealed}\n              isHighlighted={isPositionInThreeOfAKind(index)}\n              highlightColor=\"green\"\n              size=\"medium\"\n              isDisabled={gridCard.isDisabled}\n              className=\"drop-shadow-md\"\n              data-testid={`card-opponent-${player.id}-${index}`}\n            />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4710},"client/src/components/Game/PlayerGrid.tsx":{"content":"import { Player } from '@/types/game';\nimport { checkThreeOfAKind } from '@/utils/gameLogic';\nimport Card from './Card';\nimport { cn } from '@/lib/utils';\nimport { useCosmetics } from '@/hooks/useCosmetics';\n\ninterface PlayerGridProps {\n  player: Player;\n  isCurrentPlayer?: boolean;\n  selectedPosition?: number | null;\n  onCardClick?: (position: number) => void;\n  className?: string;\n}\n\nexport default function PlayerGrid({ \n  player, \n  isCurrentPlayer = false, \n  selectedPosition, \n  onCardClick,\n  className \n}: PlayerGridProps) {\n  const threeOfAKindColumns = checkThreeOfAKind(player.grid);\n  const { getAvatarUrl } = useCosmetics();\n  \n  const getColumnForPosition = (position: number): number => {\n    return position % 3;\n  };\n\n  const isPositionInThreeOfAKind = (position: number): boolean => {\n    const column = getColumnForPosition(position);\n    return threeOfAKindColumns.includes(column);\n  };\n\n  return (\n    <div className={cn('text-center', className)}>\n      {/* Player Info */}\n      <div className=\"mb-4\">\n        <div className=\"flex items-center justify-center space-x-3 mb-2\">\n          <div className={cn(\n            'w-10 h-10 rounded-full flex items-center justify-center text-white font-semibold border-2 overflow-hidden',\n            player.isAI ? 'bg-red-500 border-red-400' : 'bg-blue-600 border-blue-500'\n          )}>\n            {(() => {\n              if (!player.isAI) {\n                const avatarUrl = getAvatarUrl();\n                if (avatarUrl) {\n                  return (\n                    <img \n                      src={avatarUrl} \n                      alt=\"Player Avatar\"\n                      className=\"w-full h-full object-cover\"\n                    />\n                  );\n                }\n              }\n              return player.avatar;\n            })()}\n          </div>\n          <div className=\"text-white font-semibold\">{player.name}</div>\n          {isCurrentPlayer && (\n            <div className=\"bg-green-600 text-white px-3 py-1 rounded-full text-sm border border-green-500\">\n              Your Turn\n            </div>\n          )}\n        </div>\n        <div className=\"text-game-cream text-sm\">\n          Round Score: <span className=\"font-semibold\" data-testid={`text-round-score-${player.id}`}>\n            {player.roundScore}\n          </span> | Total: <span className=\"font-semibold\" data-testid={`text-total-score-${player.id}`}>\n            {player.totalScore}\n          </span>\n        </div>\n      </div>\n\n      {/* Grid */}\n      <div className=\"grid grid-cols-3 gap-3 w-fit mx-auto\" data-testid={`grid-${player.id}`}>\n        {player.grid.map((gridCard, index) => (\n          <Card\n            key={index}\n            card={gridCard.card}\n            isRevealed={gridCard.isRevealed}\n            isSelected={selectedPosition === index}\n            isHighlighted={isPositionInThreeOfAKind(index)}\n            highlightColor=\"green\"\n            size=\"large\"\n            isDisabled={gridCard.isDisabled}\n            onClick={onCardClick && !gridCard.isDisabled ? () => onCardClick(index) : undefined}\n            data-testid={`card-${player.id}-${index}`}\n          />\n        ))}\n      </div>\n\n\n    </div>\n  );\n}\n","size_bytes":3198},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }","size_bytes":1076},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/hooks/useCosmetics.ts":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { getCosmeticAsset } from '@/utils/cosmeticAssets';\n\ninterface CosmeticWithDetails {\n  id: string;\n  cosmeticId: string;\n  name: string;\n  type: string;\n  equipped: boolean;\n  imageUrl?: string;\n}\n\nexport function useCosmetics() {\n  const { data: userCosmetics = [], isLoading, error } = useQuery<CosmeticWithDetails[]>({\n    queryKey: [\"/api/user/cosmetics\"],\n    retry: 2,\n  });\n\n\n\n  const getEquippedCosmetic = (type: 'card_back' | 'avatar' | 'table_theme') => {\n    return userCosmetics.find(cosmetic => \n      cosmetic.type === type && cosmetic.equipped\n    );\n  };\n\n  const equippedCardBack = getEquippedCosmetic('card_back');\n  const equippedAvatar = getEquippedCosmetic('avatar');\n  const equippedTableTheme = getEquippedCosmetic('table_theme');\n\n  const getCardBackStyle = () => {\n    const cardBack = equippedCardBack;\n    const cosmeticId = cardBack?.cosmeticId || 'classic_royal_blue';\n    \n    switch (cosmeticId) {\n      case 'royal_red':\n        return {\n          cosmeticId,\n          background: 'linear-gradient(135deg, #DC2626 0%, #7F1D1D 100%)',\n          border: '2px solid #B91C1C',\n          pattern: 'repeating-linear-gradient(45deg, transparent, transparent 4px, rgba(255,255,255,0.1) 4px, rgba(255,255,255,0.1) 8px)'\n        };\n      case 'midnight_black':\n        return {\n          cosmeticId,\n          background: 'linear-gradient(135deg, #1F2937 0%, #111827 100%)',\n          border: '2px solid #374151',\n          pattern: 'radial-gradient(circle at 30% 30%, rgba(255,255,255,0.1) 0%, transparent 50%)'\n        };\n      default: // classic_royal_blue\n        return {\n          cosmeticId,\n          background: 'linear-gradient(135deg, #2563EB 0%, #1E40AF 100%)',\n          border: '2px solid #3B82F6',\n          pattern: 'none'\n        };\n    }\n  };\n\n  const getTableThemeStyle = () => {\n    const tableTheme = equippedTableTheme;\n    const cosmeticId = tableTheme?.cosmeticId || 'green_felt';\n    \n    switch (cosmeticId) {\n      case 'wood_mahogany':\n        return {\n          cosmeticId,\n          background: 'linear-gradient(135deg, #8B4513 0%, #654321 100%)',\n          texture: 'repeating-linear-gradient(90deg, transparent, transparent 2px, rgba(0,0,0,0.1) 2px, rgba(0,0,0,0.1) 4px)'\n        };\n      default: // green_felt\n        return {\n          cosmeticId,\n          background: 'linear-gradient(135deg, #16A34A 0%, #15803D 100%)',\n          texture: 'none'\n        };\n    }\n  };\n\n  const getAvatarUrl = () => {\n    if (equippedAvatar) {\n      const assetUrl = getCosmeticAsset(equippedAvatar.cosmeticId);\n      if (assetUrl) {\n        return assetUrl;\n      }\n    }\n    return null; // Return null if no equipped avatar or asset found\n  };\n\n  return {\n    userCosmetics,\n    isLoading,\n    equippedCardBack,\n    equippedAvatar,\n    equippedTableTheme,\n    getCardBackStyle,\n    getTableThemeStyle,\n    getAvatarUrl\n  };\n}","size_bytes":2929},"client/src/pages/Cosmetics.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Cosmetic, UserCosmetic, User } from \"@shared/schema\";\nimport { Palette, Star, Crown, Gem, Coins, Check, Lock } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { getCosmeticAsset } from \"@/utils/cosmeticAssets\";\n\ninterface CosmeticWithOwnership extends Cosmetic {\n  owned: boolean;\n  equipped: boolean;\n}\n\nexport default function Cosmetics() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedCategory, setSelectedCategory] = useState<'card_back' | 'avatar' | 'table_theme'>('card_back');\n\n  const { data: user } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n  });\n\n  const { data: cosmetics = [], isLoading } = useQuery<CosmeticWithOwnership[]>({\n    queryKey: [\"/api/cosmetics\", selectedCategory],\n  });\n\n  const purchaseMutation = useMutation({\n    mutationFn: async (cosmeticId: string) => {\n      return apiRequest(\"POST\", `/api/cosmetics/${cosmeticId}/purchase`);\n    },\n    onSuccess: () => {\n      // Invalidate all cosmetic queries to ensure fresh data\n      queryClient.invalidateQueries({ queryKey: [\"/api/cosmetics\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/cosmetics\"] });\n      toast({\n        title: \"Purchase Successful\",\n        description: \"Cosmetic item added to your collection!\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Purchase Failed\",\n        description: error.message || \"You don't have enough coins.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const equipMutation = useMutation({\n    mutationFn: async (cosmeticId: string) => {\n      return apiRequest(\"POST\", `/api/cosmetics/${cosmeticId}/equip`);\n    },\n    onSuccess: () => {\n      // Invalidate all cosmetic queries to ensure fresh data\n      queryClient.invalidateQueries({ queryKey: [\"/api/cosmetics\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/cosmetics\"] });\n      toast({\n        title: \"Item Equipped\",\n        description: \"Your cosmetic is now active!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to equip item. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getRarityColor = (rarity: string) => {\n    switch (rarity) {\n      case 'common': return 'bg-gray-500';\n      case 'rare': return 'bg-blue-500';\n      case 'epic': return 'bg-purple-500';\n      case 'legendary': return 'bg-yellow-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getRarityIcon = (rarity: string) => {\n    switch (rarity) {\n      case 'common': return <Star className=\"w-3 h-3\" />;\n      case 'rare': return <Gem className=\"w-3 h-3\" />;\n      case 'epic': return <Crown className=\"w-3 h-3\" />;\n      case 'legendary': return <Crown className=\"w-3 h-3\" />;\n      default: return <Star className=\"w-3 h-3\" />;\n    }\n  };\n\n  const canAfford = (cost: number) => user && (user.currency ?? 0) >= cost;\n  const canUnlock = (unlockLevel: number) => user && (user.level ?? 1) >= unlockLevel;\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-highlight-blue mx-auto mb-4\"></div>\n          <p className=\"text-white\">Loading cosmetics...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-game-green to-game-felt p-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"mb-8 flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-4xl font-bold text-transparent bg-gradient-to-r from-game-gold to-yellow-300 bg-clip-text mb-2 flex items-center gap-3\">\n              <div className=\"w-12 h-12 bg-game-gold/20 rounded-full flex items-center justify-center\">\n                <Palette className=\"w-6 h-6 text-game-gold\" />\n              </div>\n              Cosmetics Store\n            </h1>\n            <p className=\"text-slate-200 opacity-90 text-lg\">Customize your Golf 9 experience</p>\n          </div>\n          {user && (\n            <div className=\"flex items-center gap-3 bg-slate-800/80 backdrop-blur-sm px-6 py-3 rounded-xl border-2 border-game-gold/30 shadow-lg\">\n              <div className=\"w-8 h-8 bg-game-gold/20 rounded-full flex items-center justify-center\">\n                <Coins className=\"w-5 h-5 text-game-gold\" />\n              </div>\n              <span className=\"text-white font-bold text-lg\">{user.currency ?? 0}</span>\n              <span className=\"text-slate-300\">coins</span>\n            </div>\n          )}\n        </div>\n\n        <Tabs value={selectedCategory} onValueChange={(value) => setSelectedCategory(value as any)}>\n          <TabsList className=\"grid w-full grid-cols-3 mb-6 bg-slate-800/80 backdrop-blur-sm border-2 border-game-gold/30 p-1 rounded-xl\">\n            <TabsTrigger \n              value=\"card_back\" \n              className=\"flex items-center gap-2 data-[state=active]:bg-game-gold data-[state=active]:text-slate-900 text-slate-300 hover:text-white transition-all duration-200\"\n            >\n              <Palette className=\"w-4 h-4\" />\n              Card Backs\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"table_theme\" \n              className=\"flex items-center gap-2 data-[state=active]:bg-game-gold data-[state=active]:text-slate-900 text-slate-300 hover:text-white transition-all duration-200\"\n            >\n              <Gem className=\"w-4 h-4\" />\n              Table Themes\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"avatar\" \n              className=\"flex items-center gap-2 data-[state=active]:bg-game-gold data-[state=active]:text-slate-900 text-slate-300 hover:text-white transition-all duration-200\"\n            >\n              <Crown className=\"w-4 h-4\" />\n              Avatars\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value={selectedCategory}>\n            {cosmetics.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <div className=\"text-white opacity-60 mb-4\">\n                  <Palette className=\"w-12 h-12 mx-auto mb-2\" />\n                  <p>No {selectedCategory.replace('_', ' ')} items available yet</p>\n                  <p className=\"text-sm\">Check back soon for new cosmetics!</p>\n                </div>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n                {cosmetics\n                  .sort((a, b) => (a.unlockLevel ?? 1) - (b.unlockLevel ?? 1))\n                  .map((cosmetic) => (\n                  <Card \n                    key={cosmetic.id} \n                    className={cn(\n                      \"relative overflow-hidden transition-all hover:scale-105 bg-gradient-to-br from-slate-800 to-slate-900 border-2 border-slate-700/50 hover:border-game-gold/50 shadow-lg hover:shadow-xl hover:shadow-game-gold/20 flex flex-col h-full\",\n                      cosmetic.equipped && \"ring-2 ring-game-gold shadow-game-gold/30\"\n                    )}\n                  >\n                    <CardHeader className=\"pb-2 flex-shrink-0\">\n                      <div className=\"flex items-center justify-between\">\n                        <Badge \n                          className={cn(\n                            \"flex items-center gap-1 text-xs text-white border-0 shadow-md\",\n                            getRarityColor(cosmetic.rarity)\n                          )}\n                        >\n                          {getRarityIcon(cosmetic.rarity)}\n                          {cosmetic.rarity}\n                        </Badge>\n                        {cosmetic.equipped && (\n                          <Badge className=\"text-xs bg-game-gold text-slate-900 border-0 shadow-md\">\n                            <Check className=\"w-3 h-3 mr-1\" />\n                            Equipped\n                          </Badge>\n                        )}\n                      </div>\n                      <CardTitle className=\"text-lg text-white font-bold\">{cosmetic.name}</CardTitle>\n                      <CardDescription className=\"text-sm text-slate-300 h-10 flex items-start\">\n                        <span className=\"line-clamp-2\">{cosmetic.description}</span>\n                      </CardDescription>\n                    </CardHeader>\n                    \n                    <CardContent className=\"flex-grow flex flex-col\">\n                      <div className=\"aspect-square bg-gradient-to-br from-game-felt to-black rounded-lg mb-4 flex items-center justify-center flex-shrink-0\">\n                        {(() => {\n                          const assetUrl = getCosmeticAsset(cosmetic.id);\n                          return assetUrl ? (\n                            <img \n                              src={assetUrl} \n                              alt={cosmetic.name}\n                              className=\"w-full h-full object-cover rounded-lg\"\n                            />\n                          ) : (\n                            <div className=\"text-white opacity-50 text-center\">\n                              <Palette className=\"w-8 h-8 mx-auto mb-2\" />\n                              <p className=\"text-xs\">Preview Coming Soon</p>\n                            </div>\n                          );\n                        })()}\n                      </div>\n\n                      <div className=\"space-y-2 mt-auto\">\n                        {!canUnlock(cosmetic.unlockLevel ?? 1) ? (\n                          <Button disabled className=\"w-full bg-slate-700 text-slate-400 border-slate-600\" data-testid={`button-locked-${cosmetic.id}`}>\n                            <Lock className=\"w-4 h-4 mr-2\" />\n                            Requires Level {cosmetic.unlockLevel}\n                          </Button>\n                        ) : !cosmetic.owned ? (\n                          <Button\n                            onClick={() => purchaseMutation.mutate(cosmetic.id)}\n                            disabled={!canAfford(cosmetic.cost) || purchaseMutation.isPending}\n                            className={cn(\n                              \"w-full transition-all duration-200\",\n                              canAfford(cosmetic.cost) \n                                ? \"bg-gradient-to-r from-game-gold to-yellow-400 hover:from-yellow-400 hover:to-game-gold text-slate-900 font-bold shadow-lg hover:shadow-xl hover:shadow-game-gold/30\" \n                                : \"bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800 text-white\"\n                            )}\n                            data-testid={`button-purchase-${cosmetic.id}`}\n                          >\n                            <Coins className=\"w-4 h-4 mr-2\" />\n                            {canAfford(cosmetic.cost) ? `Buy for ${cosmetic.cost}` : 'Not enough coins'}\n                          </Button>\n                        ) : cosmetic.equipped ? (\n                          <Button disabled className=\"w-full bg-game-gold text-slate-900 font-bold border-0\">\n                            <Check className=\"w-4 h-4 mr-2\" />\n                            Currently Equipped\n                          </Button>\n                        ) : (\n                          <Button\n                            onClick={() => equipMutation.mutate(cosmetic.id)}\n                            disabled={equipMutation.isPending}\n                            className=\"w-full bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-bold shadow-lg hover:shadow-xl transition-all duration-200\"\n                            data-testid={`button-equip-${cosmetic.id}`}\n                          >\n                            Equip\n                          </Button>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n\n        <div className=\"mt-8 text-center\">\n          <Button \n            onClick={() => window.history.back()} \n            className=\"bg-slate-800/80 backdrop-blur-sm border-2 border-game-gold/50 text-game-gold hover:bg-slate-700 hover:border-game-gold hover:shadow-lg hover:shadow-game-gold/20 transition-all duration-200 px-8 py-3\"\n            data-testid=\"button-back\"\n          >\n            <i className=\"fas fa-arrow-left mr-2\"></i>\n            Back to Game\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13183},"client/src/pages/Settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { UserSettings, UpdateUserSettings } from \"@shared/schema\";\nimport { Volume2, VolumeX, Eye, Gamepad2, Accessibility } from \"lucide-react\";\n\nexport default function Settings() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: settings, isLoading } = useQuery<UserSettings>({\n    queryKey: [\"/api/user/settings\"],\n  });\n\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (updates: UpdateUserSettings) => {\n      return apiRequest(\"PATCH\", \"/api/user/settings\", updates);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/settings\"] });\n      toast({\n        title: \"Settings Updated\",\n        description: \"Your preferences have been saved.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update settings. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Debounce volume changes to prevent excessive API calls\n  const [volumeTimeout, setVolumeTimeout] = useState<NodeJS.Timeout | null>(null);\n\n  const handleSettingChange = (key: keyof UpdateUserSettings, value: any) => {\n    updateSettingsMutation.mutate({ [key]: value });\n  };\n\n  const handleVolumeChange = (key: 'soundVolume' | 'musicVolume', value: number[]) => {\n    // Clear existing timeout\n    if (volumeTimeout) {\n      clearTimeout(volumeTimeout);\n    }\n    \n    // Set new timeout to debounce the API call\n    const timeout = setTimeout(() => {\n      handleSettingChange(key, value[0]);\n    }, 300); // Wait 300ms after user stops dragging\n    \n    setVolumeTimeout(timeout);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-highlight-blue mx-auto mb-4\"></div>\n          <p className=\"text-white\">Loading settings...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!settings) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center text-white\">\n          <p>Unable to load settings</p>\n          <Button onClick={() => window.location.reload()} className=\"mt-4\">\n            Retry\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-game-green to-game-felt p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-8 flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-4xl font-bold text-transparent bg-gradient-to-r from-game-gold to-yellow-300 bg-clip-text mb-2 flex items-center gap-3\">\n              <div className=\"w-12 h-12 bg-game-gold/20 rounded-full flex items-center justify-center\">\n                <i className=\"fas fa-cog text-game-gold text-xl\"></i>\n              </div>\n              Settings\n            </h1>\n            <p className=\"text-slate-200 opacity-90 text-lg\">Customize your Golf 9 experience</p>\n          </div>\n        </div>\n\n        <Tabs defaultValue=\"audio\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4 bg-slate-800/80 backdrop-blur-sm border-2 border-game-gold/30 p-1 rounded-xl\">\n            <TabsTrigger \n              value=\"audio\" \n              className=\"flex items-center gap-2 data-[state=active]:bg-game-gold data-[state=active]:text-slate-900 text-slate-300 hover:text-white transition-all duration-200\"\n            >\n              <Volume2 className=\"w-4 h-4\" />\n              Audio\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"accessibility\" \n              className=\"flex items-center gap-2 data-[state=active]:bg-game-gold data-[state=active]:text-slate-900 text-slate-300 hover:text-white transition-all duration-200\"\n            >\n              <Accessibility className=\"w-4 h-4\" />\n              Accessibility\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"gameplay\" \n              className=\"flex items-center gap-2 data-[state=active]:bg-game-gold data-[state=active]:text-slate-900 text-slate-300 hover:text-white transition-all duration-200\"\n            >\n              <Gamepad2 className=\"w-4 h-4\" />\n              Gameplay\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"visual\" \n              className=\"flex items-center gap-2 data-[state=active]:bg-game-gold data-[state=active]:text-slate-900 text-slate-300 hover:text-white transition-all duration-200\"\n            >\n              <Eye className=\"w-4 h-4\" />\n              Visual\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"audio\">\n            <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-2 border-game-gold/30 text-white\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Volume2 className=\"w-5 h-5 text-game-gold\" />\n                  Audio Settings\n                </CardTitle>\n                <CardDescription className=\"text-slate-300\">\n                  Control sound effects, music, and volume levels\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <Label htmlFor=\"sound-enabled\" className=\"text-white\">Sound Effects</Label>\n                    <p className=\"text-sm text-slate-400\">\n                      Play sounds for card flips, matches, and game actions\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"sound-enabled\"\n                    checked={settings.soundEnabled ?? true}\n                    onCheckedChange={(checked) => handleSettingChange('soundEnabled', checked)}\n                    data-testid=\"switch-sound-enabled\"\n                  />\n                </div>\n\n                {settings.soundEnabled && (\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-white\">Sound Volume: {settings.soundVolume}%</Label>\n                    <Slider\n                      value={[settings.soundVolume ?? 50]}\n                      onValueChange={(value) => handleVolumeChange('soundVolume', value)}\n                      max={100}\n                      step={5}\n                      className=\"w-full\"\n                      data-testid=\"slider-sound-volume\"\n                    />\n                  </div>\n                )}\n\n                <Separator />\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <Label htmlFor=\"music-enabled\" className=\"text-white\">Background Music</Label>\n                    <p className=\"text-sm text-slate-400\">\n                      Play ambient music during gameplay\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"music-enabled\"\n                    checked={settings.musicEnabled ?? true}\n                    onCheckedChange={(checked) => handleSettingChange('musicEnabled', checked)}\n                    data-testid=\"switch-music-enabled\"\n                  />\n                </div>\n\n                {settings.musicEnabled && (\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-white\">Music Volume: {settings.musicVolume}%</Label>\n                    <Slider\n                      value={[settings.musicVolume ?? 30]}\n                      onValueChange={(value) => handleVolumeChange('musicVolume', value)}\n                      max={100}\n                      step={5}\n                      className=\"w-full\"\n                      data-testid=\"slider-music-volume\"\n                    />\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"accessibility\">\n            <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-2 border-game-gold/30 text-white\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Accessibility className=\"w-5 h-5 text-game-gold\" />\n                  Accessibility Settings\n                </CardTitle>\n                <CardDescription className=\"text-slate-300\">\n                  Customize the interface for better accessibility\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <Label htmlFor=\"reduced-motion\" className=\"text-white\">Reduce Motion</Label>\n                    <p className=\"text-sm text-slate-400\">\n                      Minimize animations and transitions\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"reduced-motion\"\n                    checked={settings.reducedMotion ?? false}\n                    onCheckedChange={(checked) => handleSettingChange('reducedMotion', checked)}\n                    data-testid=\"switch-reduced-motion\"\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <Label htmlFor=\"high-contrast\" className=\"text-white\">High Contrast</Label>\n                    <p className=\"text-sm text-slate-400\">\n                      Increase contrast for better visibility\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"high-contrast\"\n                    checked={settings.highContrast ?? false}\n                    onCheckedChange={(checked) => handleSettingChange('highContrast', checked)}\n                    data-testid=\"switch-high-contrast\"\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <Label htmlFor=\"large-text\" className=\"text-white\">Large Text</Label>\n                    <p className=\"text-sm text-slate-400\">\n                      Increase text size for better readability\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"large-text\"\n                    checked={settings.largeText ?? false}\n                    onCheckedChange={(checked) => handleSettingChange('largeText', checked)}\n                    data-testid=\"switch-large-text\"\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <Label htmlFor=\"vibration-enabled\" className=\"text-white\">Haptic Feedback</Label>\n                    <p className=\"text-sm text-slate-400\">\n                      Vibration feedback on mobile devices\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"vibration-enabled\"\n                    checked={settings.vibrationEnabled ?? true}\n                    onCheckedChange={(checked) => handleSettingChange('vibrationEnabled', checked)}\n                    data-testid=\"switch-vibration-enabled\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"gameplay\">\n            <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-2 border-game-gold/30 text-white\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Gamepad2 className=\"w-5 h-5 text-game-gold\" />\n                  Gameplay Settings\n                </CardTitle>\n                <CardDescription className=\"text-slate-300\">\n                  Customize game behavior and assistance\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <Label htmlFor=\"auto-end-turn\" className=\"text-white\">Auto End Turn</Label>\n                    <p className=\"text-sm text-slate-400\">\n                      Automatically end turn when no actions available\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"auto-end-turn\"\n                    checked={settings.autoEndTurn ?? false}\n                    onCheckedChange={(checked) => handleSettingChange('autoEndTurn', checked)}\n                    data-testid=\"switch-auto-end-turn\"\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <Label htmlFor=\"show-hints\" className=\"text-white\">Show Hints</Label>\n                    <p className=\"text-sm text-slate-400\">\n                      Display helpful tips and suggestions during gameplay\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"show-hints\"\n                    checked={settings.showHints ?? true}\n                    onCheckedChange={(checked) => handleSettingChange('showHints', checked)}\n                    data-testid=\"switch-show-hints\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"visual\">\n            <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-2 border-game-gold/30 text-white\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Eye className=\"w-5 h-5 text-game-gold\" />\n                  Visual Preferences\n                </CardTitle>\n                <CardDescription className=\"text-slate-300\">\n                  Coming soon: Card backs, table themes, and more customization options\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"text-center py-8\">\n                  <div className=\"text-slate-400 mb-4\">\n                    <Eye className=\"w-12 h-12 mx-auto mb-2 text-game-gold\" />\n                    <p className=\"text-white\">Visual customization options are being developed</p>\n                    <p className=\"text-sm\">Check back soon for card backs, table themes, and more!</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        <div className=\"mt-8 text-center\">\n          <Button \n            onClick={() => window.history.back()} \n            className=\"bg-slate-800/80 backdrop-blur-sm border-2 border-game-gold/50 text-game-gold hover:bg-slate-700 hover:border-game-gold hover:shadow-lg hover:shadow-game-gold/20 transition-all duration-200 px-8 py-3\"\n            data-testid=\"button-back\"\n          >\n            <i className=\"fas fa-arrow-left mr-2\"></i>\n            Back to Game\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":15997},"client/src/utils/cosmeticAssets.ts":{"content":"// Import cosmetic assets - Card backs (NEW - No white borders)\nimport classicRoyalBlueCardBack from \"@assets/generated_images/Simple_clean_default_card_back_96daa75b.png\";\nimport crimsonGoldOrnateCardBack from \"@assets/generated_images/Crimson_gold_ornate_card_back_0dd11d91.png\";\nimport emeraldCelticCardBack from \"@assets/generated_images/Emerald_Celtic_pattern_card_back_a37b4373.png\";\nimport midnightGeometricCardBack from \"@assets/generated_images/Midnight_geometric_card_back_08947429.png\";\nimport purpleArtDecoCardBack from \"@assets/generated_images/Purple_Art_Deco_card_back_5f4e5114.png\";\nimport bronzeWesternCardBack from \"@assets/generated_images/Bronze_Western_style_card_back_2a3082f0.png\";\nimport nauticalOceanCardBack from \"@assets/generated_images/Nautical_ocean_wave_card_back_90fa67cb.png\";\nimport forestBotanicalCardBack from \"@assets/generated_images/Forest_botanical_luxury_card_back_8fccb385.png\";\nimport cyberpunkNeonCardBack from \"@assets/generated_images/Cyberpunk_neon_tech_card_back_b9ef9432.png\";\nimport roseGoldMarbleCardBack from \"@assets/generated_images/Rose_gold_marble_card_back_03710169.png\";\nimport antiqueIvoryCardBack from \"@assets/generated_images/Antique_ivory_heritage_card_back_9596359b.png\";\nimport turquoiseTribalCardBack from \"@assets/generated_images/Turquoise_tribal_pattern_card_back_0e7e7c24.png\";\nimport mahoganyBaroqueCardBack from \"@assets/generated_images/Mahogany_baroque_luxury_card_back_70363571.png\";\nimport pearlHolographicCardBack from \"@assets/generated_images/Pearl_holographic_modern_card_back_6995c5ee.png\";\nimport steelSteampunkCardBack from \"@assets/generated_images/Steel_steampunk_industrial_card_back_2da7ac41.png\";\nimport greenFeltTable from \"@assets/generated_images/Green_Felt_Table_Texture_2c002c0f.png\";\nimport mahoganyWoodTable from \"@assets/generated_images/Mahogany_Wood_Table_47b7e302.png\";\nimport professionalAvatar from \"@assets/generated_images/Professional_Business_Avatar_8860d667.png\";\nimport gamingAvatar from \"@assets/generated_images/Gaming_Enthusiast_Avatar_6f97dd65.png\";\nimport elegantAvatar from \"@assets/generated_images/Elegant_Premium_Avatar_db98b5b8.png\";\nimport mysteriousAvatar from \"@assets/generated_images/Mysterious_Shadow_Avatar_9d70c2ca.png\";\nimport golferAvatar from \"@assets/generated_images/Professional_Golfer_Avatar_52698db1.png\";\nimport beachAvatar from \"@assets/generated_images/Beach_Vacation_Avatar_19a231ab.png\";\nimport pokerAvatar from \"@assets/generated_images/Poker_Player_Avatar_692713df.png\";\nimport femaleProAvatar from \"@assets/generated_images/Professional_Female_Avatar_ce38d866.png\";\nimport americanFlagAvatar from \"@assets/generated_images/American_Flag_Avatar_88ae7301.png\";\nimport femaleGamerAvatar from \"@assets/generated_images/Female_Gamer_Avatar_d7259774.png\";\nimport defaultAvatar from \"@assets/generated_images/Simple_Default_Avatar_fab5c9e0.png\";\n\n// Asset mapping for cosmetics\nexport const cosmeticAssets: Record<string, string> = {\n  // Card backs\n  \"classic_royal_blue\": classicRoyalBlueCardBack,\n  \"crimson_gold_ornate\": crimsonGoldOrnateCardBack,\n  \"emerald_celtic\": emeraldCelticCardBack,\n  \"midnight_geometric\": midnightGeometricCardBack,\n  \"purple_art_deco\": purpleArtDecoCardBack,\n  \"bronze_western\": bronzeWesternCardBack,\n  \"nautical_ocean\": nauticalOceanCardBack,\n  \"forest_botanical\": forestBotanicalCardBack,\n  \"cyberpunk_neon\": cyberpunkNeonCardBack,\n  \"rose_gold_marble\": roseGoldMarbleCardBack,\n  \"antique_ivory\": antiqueIvoryCardBack,\n  \"turquoise_tribal\": turquoiseTribalCardBack,\n  \"mahogany_baroque\": mahoganyBaroqueCardBack,\n  \"pearl_holographic\": pearlHolographicCardBack,\n  \"steel_steampunk\": steelSteampunkCardBack,\n  // Table themes\n  \"green_felt\": greenFeltTable,\n  \"wood_mahogany\": mahoganyWoodTable,\n  \"default_avatar\": defaultAvatar,\n  \"professional_avatar\": professionalAvatar,\n  \"gaming_avatar\": gamingAvatar,\n  \"elegant_avatar\": elegantAvatar,\n  \"mysterious_avatar\": mysteriousAvatar,\n  \"golfer_avatar\": golferAvatar,\n  \"beach_avatar\": beachAvatar,\n  \"poker_avatar\": pokerAvatar,\n  \"female_pro_avatar\": femaleProAvatar,\n  \"american_flag_avatar\": americanFlagAvatar,\n  \"female_gamer_avatar\": femaleGamerAvatar,\n};\n\n// Helper function to get asset URL\nexport function getCosmeticAsset(cosmeticId: string): string | undefined {\n  return cosmeticAssets[cosmeticId];\n}","size_bytes":4330},"client/src/hooks/useWebSocket.ts":{"content":"import { useEffect, useRef, useState, useCallback } from 'react';\nimport { useAuth } from './useAuth';\n\nexport interface WebSocketMessage {\n  type: string;\n  [key: string]: any;\n}\n\nexport interface WebSocketHook {\n  socket: WebSocket | null;\n  isConnected: boolean;\n  connectionState: 'connecting' | 'connected' | 'disconnected' | 'error';\n  sendMessage: (message: WebSocketMessage) => void;\n  joinGameRoom: (gameRoomId: string) => void;\n  leaveGameRoom: (gameRoomId: string) => void;\n  sendChatMessage: (content: string, gameRoomId?: string) => void;\n  sendGameAction: (action: string, data: any) => void;\n  lastMessage: WebSocketMessage | null;\n  messages: WebSocketMessage[];\n  clearMessages: () => void;\n}\n\nexport function useWebSocket(): WebSocketHook {\n  const { user } = useAuth();\n  const [socket, setSocket] = useState<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [connectionState, setConnectionState] = useState<'connecting' | 'connected' | 'disconnected' | 'error'>('disconnected');\n  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);\n  const [messages, setMessages] = useState<WebSocketMessage[]>([]);\n  const [pendingMessages, setPendingMessages] = useState<WebSocketMessage[]>([]);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();\n  const reconnectAttempts = useRef(0);\n  const maxReconnectAttempts = 5;\n  const reconnectDelay = useRef(1000);\n\n  const clearMessages = useCallback(() => {\n    setMessages([]);\n    setLastMessage(null);\n  }, []);\n\n  const connect = useCallback(() => {\n    if (!user?.id || socket?.readyState === WebSocket.CONNECTING || socket?.readyState === WebSocket.OPEN) {\n      return;\n    }\n\n    setConnectionState('connecting');\n    \n    try {\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      const wsUrl = `${protocol}//${window.location.host}/ws`;\n      \n      const newSocket = new WebSocket(wsUrl);\n      \n      newSocket.onopen = () => {\n        console.log('WebSocket connected');\n        setIsConnected(true);\n        setConnectionState('connecting'); // Still connecting until authenticated\n        reconnectAttempts.current = 0;\n        reconnectDelay.current = 1000;\n        \n        // Add small delay to ensure connection is stable before authenticating\n        setTimeout(() => {\n          if (newSocket.readyState === WebSocket.OPEN) {\n            console.log('🔐 Sending authentication for user:', user.id);\n            newSocket.send(JSON.stringify({\n              type: 'authenticate',\n              userId: user.id\n            }));\n          } else {\n            console.warn('⚠️ WebSocket not ready for authentication');\n          }\n        }, 200);\n      };\n\n      newSocket.onmessage = (event) => {\n        try {\n          const message: WebSocketMessage = JSON.parse(event.data);\n          setLastMessage(message);\n          setMessages(prev => [...prev.slice(-49), message]); // Keep last 50 messages\n          \n          // Handle authentication response\n          if (message.type === 'authenticated') {\n            console.log('✅ WebSocket authenticated successfully!', message);\n            setIsAuthenticated(true);\n            setConnectionState('connected');\n            \n            // Send any pending messages that were queued while authenticating\n            if (pendingMessages.length > 0) {\n              console.log('📤 Sending', pendingMessages.length, 'pending messages:', pendingMessages);\n              pendingMessages.forEach(pendingMsg => {\n                console.log('📨 Sending queued message:', pendingMsg);\n                newSocket.send(JSON.stringify(pendingMsg));\n              });\n              setPendingMessages([]);\n            } else {\n              console.log('✨ No pending messages to send');\n            }\n          } else if (message.type === 'auth_error') {\n            console.error('❌ WebSocket authentication failed:', message.message);\n            setConnectionState('error');\n          }\n        } catch (error) {\n          console.error('Failed to parse WebSocket message:', error);\n        }\n      };\n\n      newSocket.onclose = (event) => {\n        console.log('🔌 WebSocket disconnected:', event.code, event.reason, 'wasAuthenticated:', isAuthenticated);\n        setIsConnected(false);\n        setIsAuthenticated(false);\n        setConnectionState('disconnected');\n        setSocket(null);\n        \n        // Don't clear pending messages - keep them for retry\n        \n        // Attempt to reconnect unless it was a clean close\n        if (event.code !== 1000 && reconnectAttempts.current < maxReconnectAttempts) {\n          reconnectAttempts.current++;\n          // Shorter delay for faster reconnection\n          reconnectDelay.current = Math.min(reconnectDelay.current * 1.2, 5000);\n          \n          console.log(`🔄 Attempting to reconnect in ${reconnectDelay.current}ms (attempt ${reconnectAttempts.current}/${maxReconnectAttempts})`);\n          \n          reconnectTimeoutRef.current = setTimeout(() => {\n            connect();\n          }, reconnectDelay.current);\n        } else if (reconnectAttempts.current >= maxReconnectAttempts) {\n          console.error('❌ Max reconnect attempts reached');\n          setConnectionState('error');\n          setPendingMessages([]); // Clear only after max attempts\n        }\n      };\n\n      newSocket.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        setConnectionState('error');\n      };\n\n      setSocket(newSocket);\n    } catch (error) {\n      console.error('Failed to create WebSocket connection:', error);\n      setConnectionState('error');\n    }\n  }, [user?.id, socket?.readyState]);\n\n  const disconnect = useCallback(() => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n    }\n    \n    if (socket) {\n      socket.close(1000, 'User initiated disconnect');\n      setSocket(null);\n    }\n    \n    setIsConnected(false);\n    setIsAuthenticated(false);\n    setConnectionState('disconnected');\n    setPendingMessages([]);\n    reconnectAttempts.current = 0;\n  }, [socket]);\n\n  const sendMessage = useCallback((message: WebSocketMessage) => {\n    console.log('🚀 sendMessage called with:', message, {\n      socketReady: socket?.readyState === WebSocket.OPEN,\n      isAuthenticated,\n      connectionState\n    });\n    \n    if (socket?.readyState === WebSocket.OPEN && isAuthenticated) {\n      console.log('✅ Sending message immediately:', message);\n      socket.send(JSON.stringify(message));\n    } else if (socket?.readyState === WebSocket.OPEN && !isAuthenticated) {\n      // Queue message until authenticated\n      console.log('⏳ Queueing message until authenticated:', message);\n      setPendingMessages(prev => {\n        const newQueue = [...prev, message];\n        console.log('📝 Message queue now has:', newQueue.length, 'messages');\n        return newQueue;\n      });\n    } else {\n      console.warn('❌ WebSocket is not connected. Message not sent:', message);\n    }\n  }, [socket, isAuthenticated, connectionState]);\n\n  const joinGameRoom = useCallback((gameRoomId: string) => {\n    console.log('🎯 joinGameRoom called with:', gameRoomId, {\n      socketReady: socket?.readyState === WebSocket.OPEN,\n      isAuthenticated,\n      connectionState,\n      pendingMessagesCount: pendingMessages.length\n    });\n    sendMessage({\n      type: 'join_room',\n      gameRoomId\n    });\n  }, [sendMessage, socket?.readyState, isAuthenticated, connectionState, pendingMessages.length]);\n\n  const leaveGameRoom = useCallback((gameRoomId: string) => {\n    sendMessage({\n      type: 'leave_room',\n      gameRoomId\n    });\n  }, [sendMessage]);\n\n  const sendChatMessage = useCallback((content: string, gameRoomId?: string) => {\n    sendMessage({\n      type: 'chat_message',\n      content,\n      gameRoomId\n    });\n  }, [sendMessage]);\n\n  const sendGameAction = useCallback((action: string, data: any) => {\n    sendMessage({\n      type: 'game_action',\n      action,\n      data\n    });\n  }, [sendMessage]);\n\n  // Connect when user is available\n  useEffect(() => {\n    if (user?.id && !socket) {\n      connect();\n    }\n\n    return () => {\n      disconnect();\n    };\n  }, [user?.id, connect, disconnect, socket]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      disconnect();\n    };\n  }, [disconnect]);\n\n  return {\n    socket,\n    isConnected,\n    connectionState,\n    sendMessage,\n    joinGameRoom,\n    leaveGameRoom,\n    sendChatMessage,\n    sendGameAction,\n    lastMessage,\n    messages,\n    clearMessages\n  };\n}","size_bytes":8763},"client/src/pages/Multiplayer.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Users, Plus, GamepadIcon, Trophy, MessageCircle, UserPlus, ArrowLeft, Home, Settings } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { getCosmeticAsset } from \"@/utils/cosmeticAssets\";\nimport { wsManager, type RoomCard } from \"@/lib/websocket\";\nimport type { GameStats } from \"@shared/schema\";\n\ninterface GameRoom {\n  id: string;\n  code: string;\n  name: string;\n  hostId: string;\n  maxPlayers: number;\n  currentPlayers: number;\n  isPrivate: boolean;\n  status: string;\n  createdAt: string;\n}\n\ninterface Tournament {\n  id: string;\n  name: string;\n  description: string;\n  maxParticipants: number;\n  currentParticipants: number;\n  status: string;\n  prizePool: number;\n  tournamentStart: string;\n}\n\ninterface Friend {\n  id: string;\n  firstName: string;\n  lastName: string;\n  level: number;\n  isOnline: boolean;\n}\n\nexport default function Multiplayer() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const [friendCode, setFriendCode] = useState(\"\");\n  const [privateRoomCode, setPrivateRoomCode] = useState(\"\");\n\n  // State for new consolidated lobby browsing\n  const [stakeFilters, setStakeFilters] = useState<number[]>([]);\n  const [showCreateRoom, setShowCreateRoom] = useState(false);\n  const [wsRooms, setWsRooms] = useState<RoomCard[]>([]);\n  const [isWsConnected, setIsWsConnected] = useState(false);\n  const wsInitialized = useRef(false);\n\n  // Fetch friends\n  const { data: friends = [] } = useQuery<Friend[]>({\n    queryKey: ['/api/friends'],\n    retry: false,\n  });\n\n  // Fetch user stats to get coin balance\n  const { data: userStats } = useQuery<GameStats>({\n    queryKey: ['/api/user/stats'],\n    retry: false,\n  });\n\n  // Fetch user cosmetics for avatar display\n  const { data: userCosmetics = [] } = useQuery<any[]>({\n    queryKey: ['/api/user/cosmetics'],\n    retry: false,\n  });\n\n  // Fetch tournaments\n  const { data: tournaments = [] } = useQuery<Tournament[]>({\n    queryKey: ['/api/tournaments'],\n    retry: false,\n  });\n\n  // Initialize WebSocket connection (temporarily disabled to fix room creation)\n  useEffect(() => {\n    // WebSocket disabled for now - using API-based room management\n    setIsWsConnected(false);\n  }, [user?.id, toast]);\n  \n  // Fetch ALL available lobbies\n  const { data: allLobbiesData = [], isLoading: lobbiesLoading } = useQuery({\n    queryKey: ['/api/game-rooms/all-lobbies'],\n    queryFn: () => fetch('/api/game-rooms/all-lobbies').then(r => r.json()),\n    refetchInterval: 5000, // Poll every 5 seconds\n  });\n  \n  // Use API data\n  const roomsData = allLobbiesData;\n\n  // Filter lobbies based on selected stake filters\n  const filteredLobbies = stakeFilters.length === 0 \n    ? roomsData \n    : roomsData.filter((lobby: any) => stakeFilters.includes(lobby.betCoins || lobby.betAmount));\n\n  // Sort lobbies by stake amount (cheapest first)\n  const sortedLobbies = [...filteredLobbies].sort((a: any, b: any) => {\n    const aBet = a.betCoins || a.betAmount || 0;\n    const bBet = b.betCoins || b.betAmount || 0;\n    return aBet - bBet;\n  });\n\n  // Toggle stake filter\n  const toggleStakeFilter = (stake: number) => {\n    setStakeFilters(prev => \n      prev.includes(stake) \n        ? prev.filter(s => s !== stake)\n        : [...prev, stake]\n    );\n  };\n\n  // Clear all filters\n  const clearFilters = () => {\n    setStakeFilters([]);\n  };\n\n  // Handle creating a new room\n  const handleCreateRoom = (betAmount: number) => {\n    const userCoins = user?.currency || 0;\n    if (betAmount > 0 && userCoins < betAmount) {\n      toast({\n        title: \"Insufficient Coins\",\n        description: `You need ${betAmount} coins to create this room. You have ${userCoins} coins.`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Always use API for now\n    handleCreateLobby(betAmount);\n    setShowCreateRoom(false);\n  };\n\n  const handleCreateLobby = (betAmount: number) => {\n    // Create new crown-managed lobby\n    const createData = { betAmount, maxPlayers: 4, rounds: 9, isPrivate: false };\n    \n    fetch('/api/game-rooms/create-lobby', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(createData)\n    })\n    .then(r => {\n      if (!r.ok) {\n        throw new Error('Failed to create room');\n      }\n      return r.json();\n    })\n    .then(data => {\n      if (data.code) {\n        // Navigate to the lobby page with the room code\n        setLocation(`/lobby?room=${data.code}`);\n      }\n    })\n    .catch(error => {\n      console.error('Error creating room:', error);\n      toast({\n        title: \"Error\", \n        description: \"Failed to create lobby\",\n        variant: \"destructive\",\n      });\n    });\n  };\n\n  const handleJoinLobby = (lobbyCode: string, betAmount: number) => {\n    // Join specific lobby\n    const joinData = { roomCode: lobbyCode, betAmount };\n    \n    fetch('/api/game-rooms/join-lobby', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(joinData)\n    })\n    .then(r => {\n      if (!r.ok) {\n        throw new Error('Failed to join room');\n      }\n      return r.json();\n    })\n    .then(data => {\n      if (data.success || data.code) {\n        // Navigate to the lobby page with the room code\n        setLocation(`/lobby?room=${lobbyCode}`);\n      }\n    })\n    .catch(error => {\n      console.error('Error joining room:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to join lobby\",\n        variant: \"destructive\",\n      });\n    });\n  };\n\n  const handleJoinPrivateRoom = () => {\n    if (!privateRoomCode.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a room code\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Always use API for now\n    handleJoinLobby(privateRoomCode.toUpperCase(), 0);\n  };\n\n  const handleAddFriend = () => {\n    if (!friendCode.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a friend code\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    addFriendMutation.mutate(friendCode);\n  };\n\n  // Add friend mutation\n  const addFriendMutation = useMutation({\n    mutationFn: async (friendCode: string) => {\n      return await apiRequest(\"POST\", \"/api/friends/request\", { friendCode });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Friend request sent!\",\n      });\n      setFriendCode(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/friends\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send friend request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Get equipped avatar for display\n  const equippedAvatar = userCosmetics.find(c => c.type === 'avatar' && c.isEquipped);\n  const avatarAsset = equippedAvatar ? getCosmeticAsset(equippedAvatar.id) : null;\n\n  return (\n    <div className=\"min-h-screen\" style={{ backgroundColor: '#2a3f5f' }}>\n      {/* Header */}\n      <header className=\"flex items-center justify-between px-6 py-4\">\n        <div className=\"flex items-center gap-4\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => setLocation(\"/\")}\n            className=\"text-gray-400 hover:text-white hover:bg-gray-700/50 transition-colors px-3 py-2\"\n            data-testid=\"button-home\"\n          >\n            <Home className=\"w-5 h-5 mr-2\" />\n            <span>Home</span>\n          </Button>\n          \n          <div>\n            <h1 className=\"text-xl font-semibold text-white\">Multiplayer Lobbies</h1>\n            <p className=\"text-sm text-gray-400\">\n              {user?.currency || 990} coins • Level {user?.level || 1}\n            </p>\n          </div>\n        </div>\n        \n        <Button\n          variant=\"ghost\"\n          onClick={() => setLocation(\"/settings\")}\n          className=\"text-gray-400 hover:text-white hover:bg-gray-700/50 transition-colors px-3 py-2\"\n          data-testid=\"button-settings\"\n        >\n          <Settings className=\"w-5 h-5 mr-2\" />\n          <span>Settings</span>\n        </Button>\n      </header>\n\n      <Tabs defaultValue=\"rooms\" className=\"w-full px-6\">\n        <TabsList className=\"grid w-full grid-cols-3 bg-transparent p-0 h-auto gap-2\">\n          <TabsTrigger \n            value=\"rooms\" \n            className=\"relative px-4 py-3 text-gray-400 data-[state=active]:text-white data-[state=active]:bg-blue-600 rounded-t-lg transition-colors\" \n            style={{\n              backgroundColor: 'transparent',\n            }}\n            data-testid=\"tab-rooms\"\n          >\n            <span className=\"flex items-center gap-2\">\n              <GamepadIcon className=\"w-4 h-4\" />\n              Game Lobbies\n            </span>\n            <div className=\"absolute bottom-0 left-4 right-4 h-1 bg-yellow-400 rounded-full data-[state=inactive]:hidden\" />\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"friends\" \n            className=\"relative px-4 py-3 text-gray-400 data-[state=active]:text-white data-[state=active]:bg-blue-600 rounded-t-lg transition-colors\"\n            data-testid=\"tab-friends\"\n          >\n            <span className=\"flex items-center gap-2\">\n              <Users className=\"w-4 h-4\" />\n              Friends ({friends.length})\n            </span>\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"tournaments\" \n            className=\"relative px-4 py-3 text-gray-400 data-[state=active]:text-white data-[state=active]:bg-blue-600 rounded-t-lg transition-colors\"\n            data-testid=\"tab-tournaments\"\n          >\n            <span className=\"flex items-center gap-2\">\n              <Trophy className=\"w-4 h-4\" />\n              Tournaments\n            </span>\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"rooms\" className=\"px-6 mt-0\">\n          <div className=\"bg-gray-800/50 rounded-lg p-6 space-y-6\">\n            {/* Header Section */}\n            <div className=\"flex justify-between items-start\">\n              <div>\n                <h2 className=\"text-2xl font-bold text-white mb-1\">Game Lobbies</h2>\n                <p className=\"text-gray-400\">Join active games or create your own room</p>\n              </div>\n              <Button \n                className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2\"\n                onClick={() => setShowCreateRoom(true)}\n                data-testid=\"button-create-room\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Room\n              </Button>\n            </div>\n\n            {/* Join Private Room Section */}\n            <div className=\"bg-gray-900/50 rounded-lg p-4\">\n              <div className=\"flex items-center gap-2 mb-3\">\n                <div className=\"w-8 h-8 bg-blue-600/20 rounded flex items-center justify-center\">\n                  <i className=\"fas fa-key text-blue-400 text-sm\"></i>\n                </div>\n                <div>\n                  <h3 className=\"text-white font-semibold\">Join Private Room</h3>\n                  <p className=\"text-gray-400 text-sm\">Enter a room code to join a private lobby</p>\n                </div>\n              </div>\n              <div className=\"flex gap-3\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Enter room code (e.g., ABC123)\"\n                  value={privateRoomCode}\n                  onChange={(e) => setPrivateRoomCode(e.target.value.toUpperCase())}\n                  className=\"flex-1 bg-gray-800 border-gray-600 text-white placeholder-gray-500\"\n                  maxLength={6}\n                />\n                <Button\n                  onClick={handleJoinPrivateRoom}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white px-6\"\n                  data-testid=\"button-join-private\"\n                >\n                  Join Room\n                </Button>\n              </div>\n            </div>\n\n            {/* Filter by Stakes */}\n            <div>\n              <h3 className=\"text-white font-semibold mb-3\">Filter by Stakes</h3>\n              <div className=\"flex flex-wrap gap-2\">\n                {[\n                  { stake: 0, label: \"FREE\", color: \"green\" },\n                  { stake: 10, label: \"10 coins\", color: \"blue\" },\n                  { stake: 50, label: \"50 coins\", color: \"yellow\" },\n                  { stake: 100, label: \"100 coins\", color: \"orange\" },\n                  { stake: 500, label: \"500 coins\", color: \"red\" },\n                  { stake: 1000, label: \"1K coins\", color: \"purple\" }\n                ].map(({ stake, label, color }) => {\n                  const isActive = stakeFilters.includes(stake);\n                  const colorClasses = {\n                    green: isActive ? 'bg-green-600 text-white border-green-600' : 'bg-transparent text-green-400 border-green-600',\n                    blue: isActive ? 'bg-blue-600 text-white border-blue-600' : 'bg-transparent text-blue-400 border-blue-600',\n                    yellow: isActive ? 'bg-yellow-600 text-white border-yellow-600' : 'bg-transparent text-yellow-400 border-yellow-600',\n                    orange: isActive ? 'bg-orange-600 text-white border-orange-600' : 'bg-transparent text-orange-400 border-orange-600',\n                    red: isActive ? 'bg-red-600 text-white border-red-600' : 'bg-transparent text-red-400 border-red-600',\n                    purple: isActive ? 'bg-purple-600 text-white border-purple-600' : 'bg-transparent text-purple-400 border-purple-600'\n                  };\n                  \n                  return (\n                    <button\n                      key={stake}\n                      onClick={() => toggleStakeFilter(stake)}\n                      className={`px-4 py-2 rounded-full border-2 transition-colors ${colorClasses[color as keyof typeof colorClasses]}`}\n                      data-testid={`filter-stake-${stake}`}\n                    >\n                      <i className={`fas fa-${stake === 0 ? 'check' : 'coins'} mr-2 text-sm`}></i>\n                      {label}\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* Active Lobbies Section */}\n            <div>\n              <h3 className=\"text-white font-semibold mb-3\">\n                Active Lobbies ({sortedLobbies.length})\n              </h3>\n\n              {lobbiesLoading ? (\n                <div className=\"bg-gray-900/50 rounded-lg p-8\">\n                  <div className=\"text-center\">\n                    <div className=\"w-12 h-12 mx-auto bg-blue-600/20 rounded-full flex items-center justify-center mb-4\">\n                      <i className=\"fas fa-spinner fa-spin text-blue-400 text-lg\"></i>\n                    </div>\n                    <p className=\"text-gray-400\">Loading lobbies...</p>\n                  </div>\n                </div>\n              ) : sortedLobbies.length === 0 ? (\n                <div className=\"bg-gray-900/50 rounded-lg p-12\">\n                  <div className=\"text-center\">\n                    <div className=\"w-16 h-16 mx-auto bg-gray-700 rounded-lg flex items-center justify-center mb-4\">\n                      <GamepadIcon className=\"w-8 h-8 text-gray-400\" />\n                    </div>\n                    <h4 className=\"text-white font-semibold text-lg mb-2\">No active lobbies</h4>\n                    <p className=\"text-gray-400 mb-6\">Be the first to create a lobby!</p>\n                    <Button \n                      className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-2\"\n                      onClick={() => setShowCreateRoom(true)}\n                    >\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Create Lobby\n                    </Button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"grid gap-3\">\n                  {sortedLobbies.filter((lobby: any) => {\n                    // Pre-filter to remove any rooms with 0 players\n                    const playerCount = Math.max(lobby.playerCount || 0, lobby.currentPlayers || 0);\n                    return playerCount > 0;\n                  }).map((lobby: any) => {\n                    const userCoins = user?.currency || 0;\n                    const betAmount = lobby.betCoins || lobby.betAmount || 0;\n                    // Always use the maximum of playerCount and currentPlayers\n                    const playerCount = Math.max(lobby.playerCount || 0, lobby.currentPlayers || 0);\n                    \n                    // NEVER show rooms with 0 players - skip them entirely\n                    if (playerCount === 0) {\n                      console.warn(`[CLIENT] Skipping room ${lobby.code} with 0 players`);\n                      return null;\n                    }\n                    const maxPlayers = lobby.maxPlayers || 4;\n                    const canJoin = userCoins >= betAmount && playerCount < maxPlayers;\n                    \n                    return (\n                      <Card \n                        key={lobby.code} \n                        className=\"bg-gray-900/50 border-gray-700 hover:border-gray-600 transition-all\"\n                        data-testid={`lobby-card-${lobby.code}`}\n                      >\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <div className=\"flex items-center gap-2\">\n                                <h4 className=\"text-white font-semibold\">\n                                  {lobby.name || lobby.crownHolderName || lobby.hostName || 'Room'}\n                                  {(lobby.hostHasCrown || lobby.crownHolderName) && (\n                                    <i className=\"fas fa-crown text-yellow-400 ml-2 text-sm\"></i>\n                                  )}\n                                </h4>\n                                <Badge className=\"bg-gray-700 text-gray-300\">{lobby.code}</Badge>\n                                {lobby.isLocked && (\n                                  <i className=\"fas fa-lock text-gray-400 text-sm\"></i>\n                                )}\n                              </div>\n                              <div className=\"flex items-center gap-4 mt-1 text-sm\">\n                                <span className=\"text-gray-400\">\n                                  <i className=\"fas fa-users mr-1\"></i>\n                                  {playerCount}/{maxPlayers} players\n                                </span>\n                                <span className=\"text-gray-400\">\n                                  <i className=\"fas fa-coins mr-1\"></i>\n                                  {betAmount === 0 ? 'FREE' : `${betAmount} coins`}\n                                </span>\n                                <span className=\"text-gray-400\">\n                                  <i className=\"fas fa-trophy mr-1\"></i>\n                                  {lobby.rounds || 9} rounds\n                                </span>\n                              </div>\n                            </div>\n                            <Button \n                              className={`${\n                                canJoin \n                                  ? \"bg-blue-600 hover:bg-blue-700 text-white\" \n                                  : \"bg-gray-700 text-gray-400 cursor-not-allowed\"\n                              }`}\n                              onClick={() => {\n                                if (canJoin) {\n                                  if (isWsConnected) {\n                                    wsManager.joinRoom(lobby.code);\n                                  } else {\n                                    handleJoinLobby(lobby.code, betAmount);\n                                  }\n                                }\n                              }}\n                              disabled={!canJoin}\n                              data-testid={`join-lobby-${lobby.code}`}\n                            >\n                              {playerCount >= maxPlayers ? \"Full\" : userCoins < betAmount ? \"Insufficient\" : \"Join\"}\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Create Room Modal */}\n          {showCreateRoom && (\n            <div className=\"fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n              <Card className=\"bg-gray-800 border-gray-700 w-full max-w-md\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-white\">Create New Room</CardTitle>\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\"\n                      onClick={() => setShowCreateRoom(false)}\n                      className=\"text-gray-400 hover:text-white\"\n                    >\n                      ×\n                    </Button>\n                  </div>\n                  <CardDescription className=\"text-gray-400\">\n                    Choose your stake amount to create a new lobby\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    {[\n                      { stake: 0, label: \"FREE\", color: \"bg-green-600 hover:bg-green-700\" },\n                      { stake: 10, label: \"10 coins\", color: \"bg-blue-600 hover:bg-blue-700\" },\n                      { stake: 50, label: \"50 coins\", color: \"bg-yellow-600 hover:bg-yellow-700\" },\n                      { stake: 100, label: \"100 coins\", color: \"bg-orange-600 hover:bg-orange-700\" },\n                      { stake: 500, label: \"500 coins\", color: \"bg-red-600 hover:bg-red-700\" },\n                      { stake: 1000, label: \"1,000 coins\", color: \"bg-purple-600 hover:bg-purple-700\" }\n                    ].map(({ stake, label, color }) => {\n                      const userCoins = user?.currency || 0;\n                      const canAfford = stake === 0 || userCoins >= stake;\n                      \n                      return (\n                        <Button\n                          key={stake}\n                          className={`${color} text-white ${\n                            !canAfford ? \"opacity-50 cursor-not-allowed\" : \"\"\n                          }`}\n                          onClick={() => canAfford && handleCreateRoom(stake)}\n                          disabled={!canAfford}\n                          data-testid={`create-room-${stake}`}\n                        >\n                          {label}\n                          {!canAfford && stake > 0 && (\n                            <div className=\"text-xs opacity-75 mt-1\">Need {stake}</div>\n                          )}\n                        </Button>\n                      );\n                    })}\n                  </div>\n                  \n                  <div className=\"text-xs text-gray-400 bg-gray-900/50 p-3 rounded\">\n                    <i className=\"fas fa-info-circle mr-1\"></i>\n                    As room creator, you'll be the crown holder and can control lobby settings.\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"friends\" className=\"px-6 mt-0\">\n          <div className=\"bg-gray-800/50 rounded-lg p-6 space-y-6\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-white mb-1\">Friends</h2>\n              <p className=\"text-gray-400\">Connect with friends to play together</p>\n            </div>\n\n            {/* Add Friend */}\n            <Card className=\"bg-gray-900/50 border-gray-700\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <UserPlus className=\"w-5 h-5 text-blue-400\" />\n                  Add Friend\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex gap-2\">\n                  <Input\n                    placeholder=\"Enter friend code\"\n                    value={friendCode}\n                    onChange={(e) => setFriendCode(e.target.value)}\n                    className=\"bg-gray-800 border-gray-600 text-white placeholder-gray-500\"\n                    data-testid=\"input-friend-code\"\n                  />\n                  <Button \n                    onClick={handleAddFriend}\n                    disabled={addFriendMutation.isPending}\n                    className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                    data-testid=\"button-add-friend\"\n                  >\n                    {addFriendMutation.isPending ? (\n                      <i className=\"fas fa-spinner fa-spin\"></i>\n                    ) : (\n                      \"Add\"\n                    )}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Friends List */}\n            {friends.length === 0 ? (\n              <Card className=\"bg-gray-900/50 border-gray-700\">\n                <CardContent className=\"text-center py-8\">\n                  <Users className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <h5 className=\"text-white font-semibold mb-2\">No friends yet</h5>\n                  <p className=\"text-gray-400\">Add friends to play together!</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid gap-3\">\n                {friends.map((friend) => (\n                  <Card key={friend.id} className=\"bg-gray-900/50 border-gray-700 hover:border-gray-600 transition-all\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className={`w-3 h-3 rounded-full ${friend.isOnline ? 'bg-green-500' : 'bg-gray-500'}`}></div>\n                          <div>\n                            <p className=\"text-white font-semibold\">{friend.firstName} {friend.lastName}</p>\n                            <p className=\"text-gray-400 text-sm\">Level {friend.level}</p>\n                          </div>\n                        </div>\n                        {friend.isOnline && (\n                          <Button size=\"sm\" className=\"bg-game-gold hover:bg-game-gold/90 text-black\">\n                            <MessageCircle className=\"w-4 h-4 mr-1\" />\n                            Invite\n                          </Button>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"tournaments\" className=\"px-6 mt-0\">\n          <div className=\"bg-gray-800/50 rounded-lg p-6 space-y-6\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-white mb-1\">Tournaments</h2>\n              <p className=\"text-gray-400\">Compete for prizes in tournament events</p>\n            </div>\n\n            {tournaments.length === 0 ? (\n              <Card className=\"bg-gray-900/50 border-gray-700\">\n                <CardContent className=\"text-center py-8\">\n                  <Trophy className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <h5 className=\"text-white font-semibold mb-2\">No tournaments available</h5>\n                  <p className=\"text-gray-400\">Check back later for exciting tournaments!</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid gap-3\">\n                {tournaments.map((tournament) => (\n                  <Card key={tournament.id} className=\"bg-gray-900/50 border-gray-700 hover:border-gray-600 transition-all\">\n                    <CardHeader>\n                      <CardTitle className=\"text-white\">{tournament.name}</CardTitle>\n                      <CardDescription className=\"text-gray-400\">{tournament.description}</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"flex justify-between items-center\">\n                        <div>\n                          <p className=\"text-gray-300\">Prize Pool: <span className=\"text-yellow-400 font-semibold\">{tournament.prizePool} coins</span></p>\n                          <p className=\"text-gray-300\">Participants: <span className=\"text-white\">{tournament.currentParticipants}/{tournament.maxParticipants}</span></p>\n                        </div>\n                        <Button className=\"bg-blue-600 hover:bg-blue-700 text-white\">\n                          Join Tournament\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":29911},"client/src/hooks/useMultiplayerGameLogic.ts":{"content":"import { useEffect, useCallback, useState, useRef } from 'react';\nimport { useWebSocket } from './useWebSocket';\nimport { useGameLogic } from './useGameLogic';\nimport { GameState, GameSettings, GameAction, Player } from '@/types/game';\nimport { useToast } from './use-toast';\n\nexport interface MultiplayerGameState extends GameState {\n  gameRoomId: string;\n  hostId: string;\n  isHost: boolean;\n  connectedPlayers: { [playerId: string]: Player };\n  waitingForPlayers: boolean;\n  allPlayersReady: boolean;\n}\n\nexport interface MultiplayerGameLogic {\n  gameState: MultiplayerGameState | null;\n  isProcessing: boolean;\n  connectionState: 'connecting' | 'connected' | 'disconnected' | 'error';\n  \n  // Game actions that sync across all players\n  drawCard: (source: 'draw' | 'discard') => void;\n  selectGridPosition: (position: number) => void;\n  keepDrawnCard: () => void;\n  keepRevealedCard: () => void;\n  peekCard: (position: number) => void;\n  endTurn: () => void;\n  \n  // Multiplayer specific actions\n  joinGameRoom: (gameRoomId: string) => void;\n  leaveGameRoom: () => void;\n  setPlayerReady: (ready: boolean) => void;\n  startMultiplayerGame: (settings: GameSettings) => void;\n}\n\nexport function useMultiplayerGameLogic(\n  gameRoomId: string,\n  userId: string\n): MultiplayerGameLogic {\n  const { toast } = useToast();\n  const [multiplayerGameState, setMultiplayerGameState] = useState<MultiplayerGameState | null>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [pendingActions, setPendingActions] = useState<GameAction[]>([]);\n  const syncedGameLogic = useGameLogic();\n  const gameStateRef = useRef<MultiplayerGameState | null>(null);\n\n  const {\n    socket,\n    isConnected,\n    connectionState,\n    sendMessage,\n    joinGameRoom: wsJoinGameRoom,\n    leaveGameRoom: wsLeaveGameRoom,\n    sendGameAction,\n    lastMessage,\n    clearMessages\n  } = useWebSocket();\n\n  // Keep ref in sync\n  useEffect(() => {\n    gameStateRef.current = multiplayerGameState;\n  }, [multiplayerGameState]);\n\n  // Auto-join room when connection becomes ready\n  useEffect(() => {\n    console.log('🔍 Checking auto-join conditions:', {\n      connectionState,\n      gameRoomId: multiplayerGameState?.gameRoomId,\n      waitingForPlayers: multiplayerGameState?.waitingForPlayers,\n      hasUserInConnectedPlayers: !!multiplayerGameState?.connectedPlayers[userId],\n      userId,\n      connectedPlayersCount: Object.keys(multiplayerGameState?.connectedPlayers || {}).length\n    });\n    \n    if (connectionState === 'connected' && multiplayerGameState?.gameRoomId && multiplayerGameState.waitingForPlayers && !multiplayerGameState.connectedPlayers[userId]) {\n      console.log('✅ Auto-join conditions met! Sending delayed join room message for:', multiplayerGameState.gameRoomId);\n      wsJoinGameRoom(multiplayerGameState.gameRoomId);\n    }\n  }, [connectionState, multiplayerGameState?.gameRoomId, multiplayerGameState?.waitingForPlayers, multiplayerGameState?.connectedPlayers, userId, wsJoinGameRoom]);\n\n  // Handle incoming WebSocket messages\n  useEffect(() => {\n    if (!lastMessage) return;\n\n    switch (lastMessage.type) {\n      case 'player_joined':\n        handlePlayerJoined(lastMessage);\n        break;\n      case 'player_left':\n        handlePlayerLeft(lastMessage);\n        break;\n      case 'game_action':\n        handleGameAction(lastMessage);\n        break;\n      case 'game_state_sync':\n        handleGameStateSync(lastMessage);\n        break;\n      case 'room_joined':\n        handleRoomJoined(lastMessage);\n        break;\n      case 'player_ready_changed':\n        handlePlayerReadyChanged(lastMessage);\n        break;\n      case 'game_started':\n      case 'start_game':\n        handleGameStarted(lastMessage);\n        break;\n      case 'error':\n        toast({\n          title: \"Game Error\",\n          description: lastMessage.message,\n          variant: \"destructive\"\n        });\n        break;\n    }\n  }, [lastMessage]);\n\n  const handlePlayerJoined = useCallback((message: any) => {\n    setMultiplayerGameState(prev => {\n      if (!prev) return prev;\n      \n      toast({\n        title: \"Player Joined\",\n        description: `${message.playerName} joined the game`,\n      });\n\n      return {\n        ...prev,\n        connectedPlayers: {\n          ...prev.connectedPlayers,\n          [message.userId]: message.player\n        }\n      };\n    });\n  }, [toast]);\n\n  const handlePlayerLeft = useCallback((message: any) => {\n    setMultiplayerGameState(prev => {\n      if (!prev) return prev;\n      \n      toast({\n        title: \"Player Left\",\n        description: `${message.playerName} left the game`,\n      });\n\n      const newConnectedPlayers = { ...prev.connectedPlayers };\n      delete newConnectedPlayers[message.userId];\n\n      return {\n        ...prev,\n        connectedPlayers: newConnectedPlayers\n      };\n    });\n  }, [toast]);\n\n  const handleGameAction = useCallback((message: any) => {\n    const { action, data, playerId } = message;\n    \n    // Only apply actions from other players (not from ourselves)\n    if (playerId === userId) return;\n\n    setIsProcessing(true);\n    \n    // Apply the action to our local game state\n    switch (action) {\n      case 'DRAW_CARD':\n        syncedGameLogic.drawCard(data.source);\n        break;\n      case 'SELECT_GRID_POSITION':\n        syncedGameLogic.selectGridPosition(data.position);\n        break;\n      case 'KEEP_DRAWN_CARD':\n        syncedGameLogic.keepDrawnCard();\n        break;\n      case 'KEEP_REVEALED_CARD':\n        syncedGameLogic.keepRevealedCard();\n        break;\n      case 'PEEK_CARD':\n        syncedGameLogic.peekCard(data.position);\n        break;\n      case 'END_TURN':\n        syncedGameLogic.endTurn();\n        break;\n    }\n    \n    setTimeout(() => setIsProcessing(false), 100);\n  }, [userId, syncedGameLogic]);\n\n  const handleGameStateSync = useCallback((message: any) => {\n    // Sync the complete game state from the server\n    setMultiplayerGameState(prev => ({\n      ...prev,\n      ...message.gameState\n    }));\n  }, []);\n\n  const handleRoomJoined = useCallback((message: any) => {\n    console.log('Room joined message received:', message);\n    toast({\n      title: \"Room Joined\",\n      description: `Successfully joined game room ${message.gameRoomId}`,\n    });\n\n    // Update the multiplayer game state with the room information\n    setMultiplayerGameState({\n      ...message.gameState,\n      gameRoomId: message.gameRoomId,\n      hostId: message.gameState.hostId,\n      isHost: message.gameState.isHost,\n      connectedPlayers: message.gameState.connectedPlayers || {},\n      waitingForPlayers: message.gameState.waitingForPlayers || true,\n      allPlayersReady: message.gameState.allPlayersReady || false,\n      // Initialize basic game state structure\n      currentPlayer: 0,\n      currentRound: 1,\n      gamePhase: 'setup',\n      players: [],\n      deck: [],\n      discardPile: [],\n      roundScores: [],\n      totalScores: [],\n      gameEnded: false,\n      winner: null\n    });\n  }, [toast]);\n\n  const handlePlayerReadyChanged = useCallback((message: any) => {\n    setMultiplayerGameState(prev => {\n      if (!prev) return prev;\n      \n      return {\n        ...prev,\n        connectedPlayers: {\n          ...prev.connectedPlayers,\n          [message.userId]: {\n            ...prev.connectedPlayers[message.userId],\n            isReady: message.isReady\n          }\n        },\n        allPlayersReady: message.allPlayersReady\n      };\n    });\n  }, []);\n\n  const handleGameStarted = useCallback((message: any) => {\n    toast({\n      title: \"Match Starting...\",\n      description: \"All players are ready! Loading game...\",\n      duration: 3000,\n    });\n    \n    // Initialize the game with the synchronized state\n    syncedGameLogic.startGame(message.settings);\n    \n    setMultiplayerGameState(prev => {\n      if (!prev) return prev;\n      \n      return {\n        ...prev,\n        ...syncedGameLogic.gameState!,\n        waitingForPlayers: false,\n        gameRoomId,\n        hostId: message.hostId,\n        isHost: message.hostId === userId,\n        connectedPlayers: message.players || {},\n        allPlayersReady: true\n      };\n    });\n  }, [syncedGameLogic, gameRoomId, userId, toast]);\n\n  // Multiplayer-aware game actions\n  const drawCard = useCallback((source: 'draw' | 'discard') => {\n    // Execute locally first for immediate feedback\n    syncedGameLogic.drawCard(source);\n    \n    // Send to other players\n    sendGameAction('DRAW_CARD', { source });\n  }, [syncedGameLogic, sendGameAction]);\n\n  const selectGridPosition = useCallback((position: number) => {\n    syncedGameLogic.selectGridPosition(position);\n    sendGameAction('SELECT_GRID_POSITION', { position });\n  }, [syncedGameLogic, sendGameAction]);\n\n  const keepDrawnCard = useCallback(() => {\n    syncedGameLogic.keepDrawnCard();\n    sendGameAction('KEEP_DRAWN_CARD', {});\n  }, [syncedGameLogic, sendGameAction]);\n\n  const keepRevealedCard = useCallback(() => {\n    syncedGameLogic.keepRevealedCard();\n    sendGameAction('KEEP_REVEALED_CARD', {});\n  }, [syncedGameLogic, sendGameAction]);\n\n  const peekCard = useCallback((position: number) => {\n    syncedGameLogic.peekCard(position);\n    sendGameAction('PEEK_CARD', { position });\n  }, [syncedGameLogic, sendGameAction]);\n\n  const endTurn = useCallback(() => {\n    syncedGameLogic.endTurn();\n    sendGameAction('END_TURN', {});\n  }, [syncedGameLogic, sendGameAction]);\n\n  // Multiplayer specific actions\n  const joinGameRoom = useCallback((roomId: string) => {\n    console.log('joinGameRoom called with roomId:', roomId, 'connectionState:', connectionState);\n    \n    // Only send join message if we're properly connected and authenticated\n    if (connectionState === 'connected') {\n      console.log('Sending join room message immediately');\n      wsJoinGameRoom(roomId);\n    } else {\n      console.log('Waiting for connection before joining room');\n      // We'll send the join message when connection becomes ready\n    }\n    \n    // Initialize basic multiplayer state\n    setMultiplayerGameState({\n      ...syncedGameLogic.gameState!,\n      gameRoomId: roomId,\n      hostId: '',\n      isHost: false,\n      connectedPlayers: {},\n      waitingForPlayers: true,\n      allPlayersReady: false\n    });\n  }, [wsJoinGameRoom, syncedGameLogic.gameState, connectionState]);\n\n  const leaveGameRoom = useCallback(() => {\n    if (multiplayerGameState?.gameRoomId) {\n      wsLeaveGameRoom(multiplayerGameState.gameRoomId);\n    }\n    setMultiplayerGameState(null);\n    clearMessages();\n  }, [wsLeaveGameRoom, multiplayerGameState?.gameRoomId, clearMessages]);\n\n  const setPlayerReady = useCallback((ready: boolean) => {\n    sendMessage({\n      type: 'ready_toggle',\n      gameRoomId: multiplayerGameState?.gameRoomId,\n      isReady: ready\n    });\n  }, [sendMessage, multiplayerGameState?.gameRoomId]);\n\n  const startMultiplayerGame = useCallback((settings: GameSettings) => {\n    if (!multiplayerGameState?.isHost) {\n      toast({\n        title: \"Error\",\n        description: \"Only the host can start the game\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    sendMessage({\n      type: 'start_game',\n      gameRoomId: multiplayerGameState.gameRoomId,\n      settings\n    });\n  }, [sendMessage, multiplayerGameState, toast]);\n\n  // Sync local game state changes to multiplayer state\n  useEffect(() => {\n    if (syncedGameLogic.gameState && multiplayerGameState) {\n      setMultiplayerGameState(prev => ({\n        ...prev!,\n        ...syncedGameLogic.gameState,\n        // Preserve multiplayer-specific fields\n        gameRoomId: prev!.gameRoomId,\n        hostId: prev!.hostId,\n        isHost: prev!.isHost,\n        connectedPlayers: prev!.connectedPlayers,\n        waitingForPlayers: prev!.waitingForPlayers,\n        allPlayersReady: prev!.allPlayersReady\n      }));\n    }\n  }, [syncedGameLogic.gameState, multiplayerGameState?.gameRoomId]);\n\n  return {\n    gameState: multiplayerGameState,\n    isProcessing,\n    connectionState,\n    \n    drawCard,\n    selectGridPosition,\n    keepDrawnCard,\n    keepRevealedCard,\n    peekCard,\n    endTurn,\n    \n    joinGameRoom,\n    leaveGameRoom,\n    setPlayerReady,\n    startMultiplayerGame\n  };\n}","size_bytes":12153},"client/src/pages/MultiplayerGame.tsx":{"content":"import { useEffect, useState, useRef } from 'react';\nimport { useLocation } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { queryClient, apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport GameHeader from '@/components/Game/GameHeader';\nimport GameTable from '@/components/Game/GameTable';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Badge } from '@/components/ui/badge';\nimport { Users, Timer, Trophy } from 'lucide-react';\nimport { GameState } from '@/types/game';\n\ninterface RoomSnapshot {\n  code: string;\n  id: string;\n  maxPlayers: number;\n  playersSeated: number;\n  seatsOpen: number;\n  rounds: number;\n  stakeBracket: string;\n  status: 'inGame_waiting' | 'inGame_active' | 'completed';\n  gameState?: GameState;\n  players: Array<{\n    userId: string;\n    username: string;\n    seatIndex: number;\n    connected: boolean;\n    roundScore?: number;\n    totalScore?: number;\n  }>;\n  version: number;\n  currentRound?: number;\n  currentPlayerIndex?: number;\n}\n\nexport default function MultiplayerGame() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [showPauseMenu, setShowPauseMenu] = useState(false);\n  const [showGameResults, setShowGameResults] = useState(false);\n  const [roomSnapshot, setRoomSnapshot] = useState<RoomSnapshot | null>(null);\n  const wsRef = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const lastVersionRef = useRef<number>(0);\n\n  // Extract room code from URL\n  const roomCode = new URLSearchParams(window.location.search).get('room');\n  \n  // Query for initial room state\n  const { data: initialRoom, isLoading } = useQuery({\n    queryKey: [`/api/rooms/${roomCode}`],\n    enabled: !!roomCode,\n    refetchOnWindowFocus: false,\n  });\n\n  // WebSocket connection for real-time updates\n  useEffect(() => {\n    if (!roomCode || !initialRoom) return;\n\n    const connectWebSocket = () => {\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      const wsUrl = `${protocol}//${window.location.host}/ws`;\n      console.log('[MultiplayerGame] Connecting to WebSocket:', wsUrl);\n      \n      const ws = new WebSocket(wsUrl);\n      wsRef.current = ws;\n\n      ws.onopen = () => {\n        console.log('[MultiplayerGame] WebSocket connected, subscribing to room:', roomCode);\n        // Subscribe to specific room updates\n        ws.send(JSON.stringify({ \n          type: 'subscribe_room', \n          roomId: roomCode \n        }));\n      };\n\n      ws.onmessage = (event) => {\n        try {\n          const message = JSON.parse(event.data);\n          console.log('[MultiplayerGame] Received message:', message.type, message);\n          \n          if (message.type === 'room_snapshot' && message.snapshot) {\n            // Convert version to number for comparison\n            const newVersion = parseInt(message.snapshot.version || '0');\n            const currentVersion = lastVersionRef.current;\n            \n            // Apply snapshot if version is newer or same (for real-time sync)\n            if (newVersion >= currentVersion) {\n              console.log('[MultiplayerGame] Applying snapshot v' + newVersion);\n              lastVersionRef.current = newVersion;\n              setRoomSnapshot(message.snapshot);\n              \n              // Check if game has ended\n              if (message.snapshot.status === 'completed') {\n                setShowGameResults(true);\n              }\n            } else {\n              console.log('[MultiplayerGame] Ignoring stale snapshot v' + newVersion + ' (current: ' + currentVersion + ')');\n            }\n          } else if (message.type === 'room_deleted') {\n            toast({\n              title: \"Room Closed\",\n              description: \"The game room has been closed.\",\n              variant: \"destructive\"\n            });\n            setLocation('/online-multiplayer');\n          } else if (message.type === 'error') {\n            toast({\n              title: \"Error\",\n              description: message.message || \"An error occurred\",\n              variant: \"destructive\"\n            });\n          }\n        } catch (err) {\n          console.error('[MultiplayerGame] Error parsing message:', err);\n        }\n      };\n\n      ws.onerror = (error) => {\n        console.error('[MultiplayerGame] WebSocket error:', error);\n      };\n\n      ws.onclose = () => {\n        console.log('[MultiplayerGame] WebSocket disconnected, will reconnect...');\n        wsRef.current = null;\n        \n        // Reconnect after 2 seconds\n        if (reconnectTimeoutRef.current) {\n          clearTimeout(reconnectTimeoutRef.current);\n        }\n        reconnectTimeoutRef.current = setTimeout(() => {\n          if (roomCode) {\n            connectWebSocket();\n          }\n        }, 2000);\n      };\n    };\n\n    // Initial connection\n    connectWebSocket();\n\n    // Cleanup\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      if (wsRef.current) {\n        wsRef.current.close();\n        wsRef.current = null;\n      }\n    };\n  }, [roomCode, initialRoom, toast, setLocation]);\n\n  // Set initial snapshot from query\n  useEffect(() => {\n    if (initialRoom && !roomSnapshot) {\n      console.log('[MultiplayerGame] Setting initial snapshot from query');\n      const snapshot = initialRoom as RoomSnapshot;\n      setRoomSnapshot(snapshot);\n      // Parse version as number\n      lastVersionRef.current = parseInt(snapshot.version?.toString() || '0');\n    }\n  }, [initialRoom, roomSnapshot]);\n\n  // Server-authoritative game actions\n  const sendGameAction = async (action: string, data?: any) => {\n    if (!roomCode) return;\n    \n    try {\n      const response = await apiRequest('POST', `/api/rooms/${roomCode}/action`, {\n        action,\n        ...data\n      });\n      const result = await response.json();\n      \n      if (!result.success) {\n        toast({\n          title: \"Action Failed\",\n          description: result.message || \"Could not perform action\",\n          variant: \"destructive\"\n        });\n      }\n      // The new state will come through WebSocket\n    } catch (error) {\n      console.error('[MultiplayerGame] Action error:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to perform action\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleDrawCard = () => sendGameAction('draw_card');\n  const handleSelectGridPosition = (position: number) => sendGameAction('select_grid_position', { position });\n  const handleKeepDrawnCard = () => sendGameAction('keep_drawn_card');\n  const handleKeepRevealedCard = () => sendGameAction('keep_revealed_card');\n  const handlePeekCard = (index: number) => sendGameAction('peek_card', { index });\n  const handleEndTurn = () => sendGameAction('end_turn');\n  \n  const handleLeaveRoom = async () => {\n    if (!roomCode) return;\n    \n    try {\n      await apiRequest('POST', `/api/rooms/${roomCode}/leave`);\n      setLocation('/online-multiplayer');\n    } catch (error) {\n      console.error('[MultiplayerGame] Leave error:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to leave room\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handlePlayAgain = () => {\n    setShowGameResults(false);\n    setLocation('/online-multiplayer');\n  };\n\n  // Loading state\n  if (isLoading || !roomSnapshot) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-900 via-green-800 to-green-900 flex items-center justify-center\">\n        <Card className=\"p-8 bg-black/20 backdrop-blur border-white/10\">\n          <div className=\"text-white text-xl text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-white mx-auto mb-4\"></div>\n            Loading game room...\n          </div>\n        </Card>\n      </div>\n    );\n  }\n\n  // Waiting for players state\n  if (roomSnapshot.status === 'inGame_waiting') {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-900 via-green-800 to-green-900 p-4\">\n        <div className=\"max-w-4xl mx-auto\">\n          <Card className=\"bg-black/30 backdrop-blur border-white/20\">\n            <div className=\"p-8\">\n              <div className=\"text-center mb-8\">\n                <h1 className=\"text-4xl font-bold text-white mb-4\">Waiting for Players</h1>\n                <Badge className=\"text-lg px-4 py-2\">\n                  Room Code: {roomSnapshot.code}\n                </Badge>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4 mb-8 max-w-md mx-auto\">\n                {Array.from({ length: roomSnapshot.maxPlayers }).map((_, index) => {\n                  const player = roomSnapshot.players?.find(p => p.seatIndex === index);\n                  return (\n                    <Card \n                      key={index} \n                      className={`p-4 ${player ? 'bg-green-900/50' : 'bg-gray-800/50'} border-white/20`}\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        <div className={`w-12 h-12 rounded-full flex items-center justify-center ${\n                          player ? 'bg-green-600' : 'bg-gray-600'\n                        }`}>\n                          <Users className=\"w-6 h-6 text-white\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <p className=\"text-white font-medium\">\n                            {player ? player.username : `Waiting...`}\n                          </p>\n                          <p className=\"text-gray-400 text-sm\">\n                            Seat {index + 1}\n                          </p>\n                        </div>\n                      </div>\n                    </Card>\n                  );\n                })}\n              </div>\n\n              <div className=\"text-center\">\n                <div className=\"text-white mb-4\">\n                  <Timer className=\"inline w-5 h-5 mr-2\" />\n                  {roomSnapshot.playersSeated} of {roomSnapshot.maxPlayers} players joined\n                </div>\n                <Button \n                  onClick={handleLeaveRoom}\n                  variant=\"outline\"\n                  className=\"bg-red-600/20 border-red-500 text-red-500 hover:bg-red-600/30\"\n                >\n                  Leave Room\n                </Button>\n              </div>\n            </div>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  // Active game state - render server's authoritative game state\n  if (roomSnapshot.status === 'inGame_active' && roomSnapshot.gameState) {\n    const serverState = roomSnapshot.gameState as any;\n    \n    // Transform server game state to match client's expected format\n    // IMPORTANT: Include ALL table slots to show correct number of seats (2, 3, or 4 players)\n    const transformedGameState: any = {\n      players: (serverState.tableSlots || [])\n        .map((slot: any, index: number) => {\n          if (slot.isEmpty) {\n            // Show empty seat as a placeholder player\n            return {\n              id: `empty_${index}`,\n              name: 'Empty Seat',\n              isAI: false,\n              isEmpty: true,\n              grid: Array(9).fill({ suit: '', rank: '', isRevealed: false }),\n              roundScore: 0,\n              totalScore: 0,\n              roundScores: []\n            };\n          } else {\n            // Active player\n            return {\n              id: slot.playerId,\n              name: slot.playerName || `Player ${index + 1}`,\n              isAI: false,\n              isEmpty: false,\n              grid: slot.cards || [],\n              roundScore: slot.score || 0,\n              totalScore: slot.totalScore || 0,\n              roundScores: slot.roundScores || []\n            };\n          }\n        }),\n      currentPlayerIndex: serverState.currentPlayerIndex || 0,\n      gamePhase: serverState.gamePhase || 'playing',\n      drawnCard: serverState.drawnCard || null,\n      discardPile: serverState.discardPile || [],\n      deck: serverState.deck || [],\n      selectedGridPosition: serverState.selectedPosition,\n      currentRound: roomSnapshot.currentRound || 0,\n      totalRounds: (roomSnapshot.rounds || 9) as (5 | 9),\n      gameMode: 'online' as const,\n      maxPlayers: roomSnapshot.maxPlayers || 4,\n      roundEndTriggered: false,\n      hasRevealedCardThisTurn: false\n    };\n    \n    console.log('[MultiplayerGame] Rendering game state:', {\n      phase: transformedGameState.gamePhase,\n      currentPlayer: transformedGameState.currentPlayerIndex,\n      totalSeats: transformedGameState.players.length,\n      activePlayers: transformedGameState.players.filter((p: any) => !p.isEmpty).length,\n      maxPlayers: transformedGameState.maxPlayers,\n      deck: transformedGameState.deck.length,\n      discardPile: transformedGameState.discardPile.length\n    });\n    \n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-game-green to-game-felt\">\n        <GameHeader \n          gameState={transformedGameState} \n          onPause={() => setShowPauseMenu(true)} \n        />\n\n        <div className=\"flex-1 p-4 overflow-hidden\">\n          <GameTable\n            gameState={transformedGameState}\n            onDrawCard={handleDrawCard}\n            onSelectGridPosition={handleSelectGridPosition}\n            onKeepDrawnCard={handleKeepDrawnCard}\n            onKeepRevealedCard={handleKeepRevealedCard}\n            onPeekCard={handlePeekCard}\n            onEndTurn={handleEndTurn}\n            onTurnStart={() => {}}\n          />\n        </div>\n\n        {/* Pause Menu */}\n        <Dialog open={showPauseMenu} onOpenChange={setShowPauseMenu}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Game Paused</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <Button \n                onClick={() => setShowPauseMenu(false)} \n                className=\"w-full\"\n              >\n                Resume Game\n              </Button>\n              <Button \n                onClick={handleLeaveRoom} \n                variant=\"outline\" \n                className=\"w-full\"\n              >\n                Leave Game\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Game Results */}\n        <Dialog open={showGameResults} onOpenChange={() => {}}>\n          <DialogContent className=\"max-w-lg\">\n            <div className=\"p-8 text-center\">\n              <div className=\"mb-6\">\n                <Trophy className=\"w-16 h-16 text-game-gold mx-auto mb-4\" />\n                <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">Game Over!</h2>\n                <p className=\"text-gray-600\">Final Results</p>\n              </div>\n\n              <div className=\"bg-gray-50 rounded-xl p-4 mb-6\">\n                <div className=\"space-y-3\">\n                  {roomSnapshot.players\n                    ?.sort((a, b) => (a.totalScore || 0) - (b.totalScore || 0))\n                    .map((player, index) => (\n                      <div \n                        key={player.userId}\n                        className=\"flex justify-between items-center py-2 border-b border-gray-200 last:border-b-0\"\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <span className={`text-2xl ${index === 0 ? 'text-game-gold' : 'text-gray-400'}`}>\n                            {index === 0 ? '🏆' : index === 1 ? '🥈' : index === 2 ? '🥉' : `${index + 1}.`}\n                          </span>\n                          <span className=\"font-medium text-gray-900\">\n                            {player.username}\n                          </span>\n                        </div>\n                        <span className=\"font-bold text-gray-900\">\n                          {player.totalScore || 0} pts\n                        </span>\n                      </div>\n                    ))}\n                </div>\n              </div>\n\n              <div className=\"flex gap-3\">\n                <Button onClick={handlePlayAgain} className=\"flex-1\">\n                  Find New Game\n                </Button>\n                <Button onClick={() => setLocation('/')} variant=\"outline\" className=\"flex-1\">\n                  Main Menu\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    );\n  }\n\n  // Fallback for completed or unknown states\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-900 via-green-800 to-green-900 flex items-center justify-center\">\n      <Card className=\"p-8 bg-black/20 backdrop-blur border-white/10\">\n        <div className=\"text-white text-center\">\n          <h2 className=\"text-2xl font-bold mb-4\">Game Status: {roomSnapshot.status}</h2>\n          <Button onClick={() => setLocation('/online-multiplayer')}>\n            Back to Lobby\n          </Button>\n        </div>\n      </Card>\n    </div>\n  );\n}","size_bytes":17170},"server/websocket-handler.ts":{"content":"import { WebSocketServer, WebSocket } from 'ws';\nimport { createServer } from 'http';\nimport type { Express } from 'express';\nimport type { IStorage } from './storage';\n\n// WebSocket connection state\ninterface WSConnection {\n  ws: WebSocket;\n  userId: string;\n  connectionId: string;\n  gameRoomId?: string;\n  isSpectator?: boolean;\n  lastPing?: number;\n  isAuthenticated: boolean;\n}\n\n// Room state management\ninterface RoomState {\n  participants: Map<string, ParticipantState>;\n  spectators: Set<string>;\n  gameState: AuthoritativeGameState | null;\n  lastActivityAt: number;\n  hostId: string;\n  crownHolderId: string;\n  settings: RoomSettings;\n  status: 'waiting' | 'active' | 'finished';\n  isPublished: boolean;\n  isPrivate: boolean;\n  password?: string;\n}\n\ninterface ParticipantState {\n  userId: string;\n  playerIndex: number;\n  isReady: boolean;\n  isConnected: boolean;\n  connectionId?: string;\n  disconnectedAt?: number;\n  isAI: boolean;\n}\n\ninterface RoomSettings {\n  rounds: 5 | 9;\n  maxPlayers: 2 | 3 | 4;\n  betAmount: number;\n  isPrivate: boolean;\n}\n\n// Authoritative game state\ninterface AuthoritativeGameState {\n  currentTurn: number;\n  currentPlayer: string;\n  turnStartTime: number;\n  turnTimeLimit: number;\n  gameStartTime: number;\n  rounds: number;\n  currentRound: number;\n  deck: string[];\n  discardPile: string[];\n  playerStates: Map<string, PlayerGameState>;\n  lastAction: GameAction | null;\n  lastActionTimestamp: number;\n}\n\ninterface PlayerGameState {\n  userId: string;\n  hand: string[];\n  score: number;\n  hasPeeked: boolean;\n  turnActions: number;\n}\n\ninterface GameAction {\n  type: string;\n  playerId: string;\n  data: any;\n  timestamp: number;\n  sequenceNumber: number;\n}\n\n// Rate limiting\nclass RateLimiter {\n  private requests = new Map<string, number[]>();\n  private readonly maxRequests = 100;\n  private readonly windowMs = 60000; // 1 minute\n\n  check(userId: string): boolean {\n    const now = Date.now();\n    const userRequests = this.requests.get(userId) || [];\n    \n    // Remove old requests outside window\n    const validRequests = userRequests.filter(time => now - time < this.windowMs);\n    \n    if (validRequests.length >= this.maxRequests) {\n      return false;\n    }\n    \n    validRequests.push(now);\n    this.requests.set(userId, validRequests);\n    return true;\n  }\n}\n\nexport class MultiplayerWebSocketHandler {\n  private wss: WebSocketServer;\n  private connections = new Map<string, WSConnection>();\n  private rooms = new Map<string, RoomState>();\n  private rateLimiter = new RateLimiter();\n  private pingInterval: NodeJS.Timeout;\n  \n  constructor(\n    private app: Express,\n    private storage: IStorage,\n    private httpServer: ReturnType<typeof createServer>\n  ) {\n    this.wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n    this.setupWebSocketServer();\n    this.startPingInterval();\n    this.startIdleCheckInterval();\n  }\n  \n  private setupWebSocketServer() {\n    this.wss.on('connection', (ws, req) => {\n      console.log('🔌 New WebSocket connection');\n      \n      ws.on('message', async (data) => {\n        try {\n          const message = JSON.parse(data.toString());\n          await this.handleMessage(ws, message);\n        } catch (error) {\n          console.error('❌ WebSocket message error:', error);\n          ws.send(JSON.stringify({ \n            type: 'error', \n            message: 'Invalid message format',\n            timestamp: Date.now()\n          }));\n        }\n      });\n      \n      ws.on('close', () => {\n        this.handleDisconnection(ws);\n      });\n      \n      ws.on('error', (error) => {\n        console.error('❌ WebSocket error:', error);\n        this.handleDisconnection(ws);\n      });\n      \n      ws.on('pong', () => {\n        const connection = this.findConnection(ws);\n        if (connection) {\n          connection.lastPing = Date.now();\n        }\n      });\n    });\n  }\n  \n  private async handleMessage(ws: WebSocket, message: any) {\n    const { type, ...data } = message;\n    \n    // Handle authentication first\n    if (type === 'authenticate') {\n      return this.handleAuthentication(ws, data);\n    }\n    \n    // All other messages require authentication\n    const connection = this.findConnection(ws);\n    if (!connection?.isAuthenticated) {\n      ws.send(JSON.stringify({ \n        type: 'error', \n        message: 'Not authenticated',\n        timestamp: Date.now()\n      }));\n      return;\n    }\n    \n    // Rate limiting\n    if (!this.rateLimiter.check(connection.userId)) {\n      ws.send(JSON.stringify({ \n        type: 'error', \n        message: 'Rate limit exceeded',\n        timestamp: Date.now()\n      }));\n      return;\n    }\n    \n    // Route message to appropriate handler\n    switch (type) {\n      case 'create_room':\n        await this.handleCreateRoom(connection, data);\n        break;\n      case 'join_room':\n        await this.handleJoinRoom(connection, data);\n        break;\n      case 'leave_room':\n        await this.handleLeaveRoom(connection);\n        break;\n      case 'update_room_settings':\n        await this.handleUpdateRoomSettings(connection, data);\n        break;\n      case 'ready_toggle':\n        await this.handleReadyToggle(connection, data);\n        break;\n      case 'start_game':\n        await this.handleStartGame(connection);\n        break;\n      case 'game_action':\n        await this.handleGameAction(connection, data);\n        break;\n      case 'transfer_crown':\n        await this.handleTransferCrown(connection, data);\n        break;\n      case 'chat_message':\n        await this.handleChatMessage(connection, data);\n        break;\n      case 'rejoin_room':\n        await this.handleRejoinRoom(connection, data);\n        break;\n      default:\n        ws.send(JSON.stringify({ \n          type: 'error', \n          message: 'Unknown message type',\n          timestamp: Date.now()\n        }));\n    }\n  }\n  \n  private async handleAuthentication(ws: WebSocket, data: any) {\n    const { userId } = data;\n    \n    if (!userId) {\n      ws.send(JSON.stringify({ \n        type: 'auth_error', \n        message: 'User ID required',\n        timestamp: Date.now()\n      }));\n      return;\n    }\n    \n    try {\n      const user = await this.storage.getUser(userId);\n      if (!user) {\n        ws.send(JSON.stringify({ \n          type: 'auth_error', \n          message: 'User not found',\n          timestamp: Date.now()\n        }));\n        return;\n      }\n      \n      const connectionId = this.generateConnectionId();\n      const connection: WSConnection = {\n        ws,\n        userId,\n        connectionId,\n        isAuthenticated: true,\n        lastPing: Date.now()\n      };\n      \n      this.connections.set(connectionId, connection);\n      \n      ws.send(JSON.stringify({ \n        type: 'authenticated',\n        connectionId,\n        user,\n        serverTime: Date.now()\n      }));\n      \n      // Send current lobby list\n      await this.sendLobbyList(connection);\n      \n    } catch (error) {\n      console.error('Authentication error:', error);\n      ws.send(JSON.stringify({ \n        type: 'auth_error', \n        message: 'Authentication failed',\n        timestamp: Date.now()\n      }));\n    }\n  }\n  \n  private async handleCreateRoom(connection: WSConnection, data: any) {\n    const { rounds = 9, maxPlayers = 4, betAmount = 0, isPrivate = false, password } = data;\n    \n    try {\n      // Create room in database\n      const roomCode = this.generateRoomCode();\n      const room = await this.storage.createGameRoom({\n        code: roomCode,\n        hostId: connection.userId,\n        crownHolderId: connection.userId,\n        rounds,\n        maxPlayers,\n        betAmount,\n        isPrivate,\n        password: isPrivate ? password : undefined,\n        settings: { rounds, maxPlayers, betAmount },\n        players: [],\n        status: 'waiting',\n        isPublished: !isPrivate,\n        settingsLocked: false\n      });\n      \n      // Create room state\n      const roomState: RoomState = {\n        participants: new Map(),\n        spectators: new Set(),\n        gameState: null,\n        lastActivityAt: Date.now(),\n        hostId: connection.userId,\n        crownHolderId: connection.userId,\n        settings: { rounds, maxPlayers, betAmount, isPrivate },\n        status: 'waiting',\n        isPublished: !isPrivate,\n        isPrivate,\n        password\n      };\n      \n      this.rooms.set(room.id, roomState);\n      \n      // Join creator to room\n      await this.joinRoomInternal(connection, room.id, roomCode);\n      \n      // Broadcast lobby update if public\n      if (!isPrivate) {\n        await this.broadcastLobbyUpdate();\n      }\n      \n    } catch (error) {\n      console.error('Create room error:', error);\n      connection.ws.send(JSON.stringify({ \n        type: 'error', \n        message: 'Failed to create room',\n        timestamp: Date.now()\n      }));\n    }\n  }\n  \n  private async handleJoinRoom(connection: WSConnection, data: any) {\n    const { roomCode, password } = data;\n    \n    try {\n      const room = await this.storage.getGameRoom(roomCode);\n      if (!room) {\n        connection.ws.send(JSON.stringify({ \n          type: 'error', \n          message: 'Room not found',\n          timestamp: Date.now()\n        }));\n        return;\n      }\n      \n      const roomState = this.rooms.get(room.id);\n      if (!roomState) {\n        // Restore room state from database\n        await this.restoreRoomState(room.id);\n      }\n      \n      // Check private room password\n      if (room.isPrivate && room.password && room.password !== password) {\n        connection.ws.send(JSON.stringify({ \n          type: 'error', \n          message: 'Invalid password',\n          timestamp: Date.now()\n        }));\n        return;\n      }\n      \n      // Check room capacity\n      if (roomState && roomState.participants.size >= roomState.settings.maxPlayers) {\n        connection.ws.send(JSON.stringify({ \n          type: 'error', \n          message: 'Room is full',\n          timestamp: Date.now()\n        }));\n        return;\n      }\n      \n      // Check bet amount\n      const user = await this.storage.getUser(connection.userId);\n      if (user && user.currency < room.betAmount) {\n        connection.ws.send(JSON.stringify({ \n          type: 'error', \n          message: 'Insufficient coins',\n          timestamp: Date.now()\n        }));\n        return;\n      }\n      \n      await this.joinRoomInternal(connection, room.id, roomCode);\n      \n      // Broadcast lobby update\n      await this.broadcastLobbyUpdate();\n      \n    } catch (error) {\n      console.error('Join room error:', error);\n      connection.ws.send(JSON.stringify({ \n        type: 'error', \n        message: 'Failed to join room',\n        timestamp: Date.now()\n      }));\n    }\n  }\n  \n  private async joinRoomInternal(connection: WSConnection, roomId: string, roomCode: string) {\n    const roomState = this.rooms.get(roomId);\n    if (!roomState) return;\n    \n    // Add participant\n    const playerIndex = roomState.participants.size;\n    const participant: ParticipantState = {\n      userId: connection.userId,\n      playerIndex,\n      isReady: false,\n      isConnected: true,\n      connectionId: connection.connectionId,\n      isAI: false\n    };\n    \n    roomState.participants.set(connection.userId, participant);\n    connection.gameRoomId = roomId;\n    \n    // Save to database\n    await this.storage.joinGameRoom(roomId, connection.userId, 0);\n    \n    // Get user info\n    const user = await this.storage.getUser(connection.userId);\n    const playerName = user?.firstName || user?.email?.split('@')[0] || 'Player';\n    \n    // Send room state to joining player\n    connection.ws.send(JSON.stringify({\n      type: 'room_joined',\n      roomCode,\n      roomId,\n      roomState: this.serializeRoomState(roomState),\n      serverTime: Date.now()\n    }));\n    \n    // Broadcast to other players\n    await this.broadcastToRoom(roomId, {\n      type: 'player_joined',\n      userId: connection.userId,\n      playerName,\n      playerIndex,\n      timestamp: Date.now()\n    }, connection.userId);\n  }\n  \n  private async handleLeaveRoom(connection: WSConnection) {\n    if (!connection.gameRoomId) return;\n    \n    const roomState = this.rooms.get(connection.gameRoomId);\n    if (!roomState) return;\n    \n    const roomId = connection.gameRoomId;\n    const wasHost = roomState.crownHolderId === connection.userId;\n    \n    // Remove participant\n    roomState.participants.delete(connection.userId);\n    connection.gameRoomId = undefined;\n    \n    // Update database\n    await this.storage.leaveGameRoom(roomId, connection.userId);\n    \n    // If room is empty, delete it\n    if (roomState.participants.size === 0) {\n      this.rooms.delete(roomId);\n      await this.storage.deleteGameRoom(roomId);\n    } else if (wasHost) {\n      // Host migration\n      const newHost = Array.from(roomState.participants.values())[0];\n      if (newHost) {\n        roomState.crownHolderId = newHost.userId;\n        roomState.hostId = newHost.userId;\n        \n        await this.storage.updateGameRoom(roomId, {\n          crownHolderId: newHost.userId,\n          hostId: newHost.userId\n        });\n        \n        await this.broadcastToRoom(roomId, {\n          type: 'host_changed',\n          newHostId: newHost.userId,\n          timestamp: Date.now()\n        });\n      }\n    }\n    \n    // Broadcast player left\n    await this.broadcastToRoom(roomId, {\n      type: 'player_left',\n      userId: connection.userId,\n      timestamp: Date.now()\n    });\n    \n    // Update lobby list\n    await this.broadcastLobbyUpdate();\n  }\n  \n  private async handleUpdateRoomSettings(connection: WSConnection, data: any) {\n    if (!connection.gameRoomId) return;\n    \n    const roomState = this.rooms.get(connection.gameRoomId);\n    if (!roomState) return;\n    \n    // Only crown holder can update settings\n    if (roomState.crownHolderId !== connection.userId) {\n      connection.ws.send(JSON.stringify({\n        type: 'error',\n        message: 'Only the host can update settings',\n        timestamp: Date.now()\n      }));\n      return;\n    }\n    \n    // Can't change settings if game started\n    if (roomState.status !== 'waiting' || roomState.settingsLocked) {\n      connection.ws.send(JSON.stringify({\n        type: 'error',\n        message: 'Cannot change settings after game started',\n        timestamp: Date.now()\n      }));\n      return;\n    }\n    \n    const { rounds, maxPlayers, betAmount } = data;\n    \n    // Update settings\n    if (rounds) roomState.settings.rounds = rounds;\n    if (maxPlayers) roomState.settings.maxPlayers = maxPlayers;\n    if (betAmount !== undefined) roomState.settings.betAmount = betAmount;\n    \n    // Update database\n    await this.storage.updateGameRoom(connection.gameRoomId, {\n      rounds,\n      maxPlayers,\n      betAmount,\n      settings: roomState.settings\n    });\n    \n    // Broadcast settings update\n    await this.broadcastToRoom(connection.gameRoomId, {\n      type: 'settings_updated',\n      settings: roomState.settings,\n      timestamp: Date.now()\n    });\n    \n    // Update lobby list\n    await this.broadcastLobbyUpdate();\n  }\n  \n  private async handleReadyToggle(connection: WSConnection, data: any) {\n    if (!connection.gameRoomId) return;\n    \n    const roomState = this.rooms.get(connection.gameRoomId);\n    if (!roomState) return;\n    \n    const participant = roomState.participants.get(connection.userId);\n    if (!participant) return;\n    \n    const { isReady } = data;\n    participant.isReady = isReady;\n    \n    // Update database\n    await this.storage.updateParticipantReady(connection.gameRoomId, connection.userId, isReady);\n    \n    // Check if all ready\n    const allReady = roomState.participants.size >= 2 && \n      Array.from(roomState.participants.values()).every(p => p.isReady);\n    \n    // Broadcast ready state\n    await this.broadcastToRoom(connection.gameRoomId, {\n      type: 'player_ready_changed',\n      userId: connection.userId,\n      isReady,\n      allReady,\n      timestamp: Date.now()\n    });\n    \n    // Auto-start if all ready\n    if (allReady && roomState.status === 'waiting') {\n      await this.startGame(connection.gameRoomId);\n    }\n  }\n  \n  private async startGame(roomId: string) {\n    const roomState = this.rooms.get(roomId);\n    if (!roomState) return;\n    \n    // Change room status\n    roomState.status = 'active';\n    roomState.settingsLocked = true;\n    \n    // Initialize authoritative game state\n    const gameState: AuthoritativeGameState = {\n      currentTurn: 0,\n      currentPlayer: Array.from(roomState.participants.keys())[0],\n      turnStartTime: Date.now(),\n      turnTimeLimit: 30000, // 30 seconds per turn\n      gameStartTime: Date.now(),\n      rounds: roomState.settings.rounds,\n      currentRound: 1,\n      deck: this.shuffleDeck(),\n      discardPile: [],\n      playerStates: new Map(),\n      lastAction: null,\n      lastActionTimestamp: Date.now()\n    };\n    \n    // Initialize player states\n    for (const [userId, participant] of roomState.participants) {\n      gameState.playerStates.set(userId, {\n        userId,\n        hand: this.dealCards(gameState.deck, 9),\n        score: 0,\n        hasPeeked: false,\n        turnActions: 0\n      });\n    }\n    \n    roomState.gameState = gameState;\n    \n    // Update database\n    await this.storage.updateGameRoom(roomId, {\n      status: 'active',\n      settingsLocked: true,\n      serverGameState: gameState,\n      startedAt: new Date()\n    });\n    \n    // Deduct coins\n    for (const [userId] of roomState.participants) {\n      if (roomState.settings.betAmount > 0) {\n        await this.storage.spendCurrency(userId, roomState.settings.betAmount);\n      }\n    }\n    \n    // Broadcast game start\n    await this.broadcastToRoom(roomId, {\n      type: 'game_started',\n      gameState: this.getClientGameState(gameState, null),\n      timestamp: Date.now()\n    });\n    \n    // Remove from lobby list\n    await this.broadcastLobbyUpdate();\n  }\n  \n  private async handleGameAction(connection: WSConnection, data: any) {\n    if (!connection.gameRoomId) return;\n    \n    const roomState = this.rooms.get(connection.gameRoomId);\n    if (!roomState || !roomState.gameState) return;\n    \n    const { action, actionData } = data;\n    const gameState = roomState.gameState;\n    \n    // Validate it's player's turn\n    if (gameState.currentPlayer !== connection.userId) {\n      connection.ws.send(JSON.stringify({\n        type: 'error',\n        message: 'Not your turn',\n        timestamp: Date.now()\n      }));\n      return;\n    }\n    \n    // Process action on server\n    const result = await this.processGameAction(gameState, action, actionData, connection.userId);\n    \n    if (!result.valid) {\n      connection.ws.send(JSON.stringify({\n        type: 'action_rejected',\n        reason: result.reason,\n        timestamp: Date.now()\n      }));\n      return;\n    }\n    \n    // Update game state\n    gameState.lastAction = {\n      type: action,\n      playerId: connection.userId,\n      data: actionData,\n      timestamp: Date.now(),\n      sequenceNumber: (gameState.lastAction?.sequenceNumber || 0) + 1\n    };\n    gameState.lastActionTimestamp = Date.now();\n    \n    // Save to database\n    await this.storage.updateGameState(connection.gameRoomId, gameState);\n    \n    // Broadcast action to all players\n    await this.broadcastToRoom(connection.gameRoomId, {\n      type: 'game_action',\n      action,\n      actionData,\n      playerId: connection.userId,\n      gameState: this.getClientGameState(gameState, null),\n      timestamp: Date.now()\n    });\n    \n    // Check for game end\n    if (result.gameEnded) {\n      await this.endGame(connection.gameRoomId);\n    }\n  }\n  \n  private async processGameAction(\n    gameState: AuthoritativeGameState,\n    action: string,\n    data: any,\n    playerId: string\n  ): Promise<{ valid: boolean; reason?: string; gameEnded?: boolean }> {\n    // Implement game logic validation here\n    // This is a simplified version - you'll need to implement full Golf 9 rules\n    \n    const playerState = gameState.playerStates.get(playerId);\n    if (!playerState) {\n      return { valid: false, reason: 'Player not in game' };\n    }\n    \n    switch (action) {\n      case 'draw_card':\n        // Validate and process draw\n        return { valid: true };\n        \n      case 'place_card':\n        // Validate and process card placement\n        return { valid: true };\n        \n      case 'end_turn':\n        // Move to next player\n        const players = Array.from(gameState.playerStates.keys());\n        const currentIndex = players.indexOf(playerId);\n        const nextIndex = (currentIndex + 1) % players.length;\n        gameState.currentPlayer = players[nextIndex];\n        gameState.currentTurn++;\n        gameState.turnStartTime = Date.now();\n        \n        // Check if round ended\n        if (gameState.currentTurn >= players.length * gameState.rounds) {\n          return { valid: true, gameEnded: true };\n        }\n        \n        return { valid: true };\n        \n      default:\n        return { valid: false, reason: 'Unknown action' };\n    }\n  }\n  \n  private async handleTransferCrown(connection: WSConnection, data: any) {\n    if (!connection.gameRoomId) return;\n    \n    const roomState = this.rooms.get(connection.gameRoomId);\n    if (!roomState) return;\n    \n    // Only current crown holder can transfer\n    if (roomState.crownHolderId !== connection.userId) {\n      connection.ws.send(JSON.stringify({\n        type: 'error',\n        message: 'Only the host can transfer crown',\n        timestamp: Date.now()\n      }));\n      return;\n    }\n    \n    const { targetUserId } = data;\n    \n    // Validate target is in room\n    if (!roomState.participants.has(targetUserId)) {\n      connection.ws.send(JSON.stringify({\n        type: 'error',\n        message: 'Target player not in room',\n        timestamp: Date.now()\n      }));\n      return;\n    }\n    \n    // Transfer crown\n    roomState.crownHolderId = targetUserId;\n    roomState.hostId = targetUserId;\n    \n    // Update database\n    await this.storage.updateGameRoom(connection.gameRoomId, {\n      crownHolderId: targetUserId,\n      hostId: targetUserId\n    });\n    \n    // Broadcast crown transfer\n    await this.broadcastToRoom(connection.gameRoomId, {\n      type: 'crown_transferred',\n      fromUserId: connection.userId,\n      toUserId: targetUserId,\n      timestamp: Date.now()\n    });\n  }\n  \n  private async handleChatMessage(connection: WSConnection, data: any) {\n    const { content } = data;\n    \n    if (!content || content.trim().length === 0) return;\n    \n    // Save message to database\n    const message = await this.storage.addChatMessage({\n      senderId: connection.userId,\n      gameRoomId: connection.gameRoomId || null,\n      content,\n      type: 'message'\n    });\n    \n    // Broadcast to appropriate audience\n    if (connection.gameRoomId) {\n      await this.broadcastToRoom(connection.gameRoomId, {\n        type: 'chat_message',\n        message,\n        timestamp: Date.now()\n      });\n    } else {\n      // Global chat\n      this.broadcastToAll({\n        type: 'chat_message',\n        message,\n        timestamp: Date.now()\n      });\n    }\n  }\n  \n  private async handleRejoinRoom(connection: WSConnection, data: any) {\n    const { roomCode } = data;\n    \n    try {\n      const room = await this.storage.getGameRoom(roomCode);\n      if (!room) {\n        connection.ws.send(JSON.stringify({\n          type: 'error',\n          message: 'Room not found',\n          timestamp: Date.now()\n        }));\n        return;\n      }\n      \n      // Check if user was in this room\n      const participants = await this.storage.getGameParticipants(room.id);\n      const wasParticipant = participants.some(p => p.userId === connection.userId);\n      \n      if (!wasParticipant) {\n        connection.ws.send(JSON.stringify({\n          type: 'error',\n          message: 'You were not in this room',\n          timestamp: Date.now()\n        }));\n        return;\n      }\n      \n      // Check disconnect timeout (5 minutes)\n      const participant = participants.find(p => p.userId === connection.userId);\n      if (participant?.disconnectedAt) {\n        const disconnectTime = new Date(participant.disconnectedAt).getTime();\n        if (Date.now() - disconnectTime > 300000) { // 5 minutes\n          connection.ws.send(JSON.stringify({\n            type: 'error',\n            message: 'Reconnection timeout exceeded',\n            timestamp: Date.now()\n          }));\n          return;\n        }\n      }\n      \n      // Restore connection\n      const roomState = this.rooms.get(room.id);\n      if (roomState) {\n        const participantState = roomState.participants.get(connection.userId);\n        if (participantState) {\n          participantState.isConnected = true;\n          participantState.connectionId = connection.connectionId;\n          participantState.disconnectedAt = undefined;\n        }\n      }\n      \n      connection.gameRoomId = room.id;\n      \n      // Update database\n      await this.storage.updateParticipantConnection(room.id, connection.userId, true, connection.connectionId);\n      \n      // Send current game state\n      connection.ws.send(JSON.stringify({\n        type: 'rejoined_room',\n        roomCode,\n        roomState: roomState ? this.serializeRoomState(roomState) : null,\n        timestamp: Date.now()\n      }));\n      \n      // Broadcast reconnection\n      await this.broadcastToRoom(room.id, {\n        type: 'player_reconnected',\n        userId: connection.userId,\n        timestamp: Date.now()\n      }, connection.userId);\n      \n    } catch (error) {\n      console.error('Rejoin room error:', error);\n      connection.ws.send(JSON.stringify({\n        type: 'error',\n        message: 'Failed to rejoin room',\n        timestamp: Date.now()\n      }));\n    }\n  }\n  \n  private async handleDisconnection(ws: WebSocket) {\n    const connection = this.findConnection(ws);\n    if (!connection) return;\n    \n    // Remove from connections\n    this.connections.delete(connection.connectionId);\n    \n    // Handle room disconnection\n    if (connection.gameRoomId) {\n      const roomState = this.rooms.get(connection.gameRoomId);\n      if (roomState) {\n        const participant = roomState.participants.get(connection.userId);\n        if (participant) {\n          participant.isConnected = false;\n          participant.disconnectedAt = Date.now();\n          participant.connectionId = undefined;\n          \n          // Update database\n          await this.storage.updateParticipantConnection(\n            connection.gameRoomId,\n            connection.userId,\n            false,\n            null\n          );\n          \n          // If game is active, start AI takeover timer\n          if (roomState.status === 'active' && roomState.gameState) {\n            setTimeout(() => this.checkAITakeover(connection.gameRoomId!, connection.userId), 30000);\n          }\n          \n          // Broadcast disconnection\n          await this.broadcastToRoom(connection.gameRoomId, {\n            type: 'player_disconnected',\n            userId: connection.userId,\n            timestamp: Date.now()\n          });\n        }\n      }\n    }\n  }\n  \n  private async checkAITakeover(roomId: string, userId: string) {\n    const roomState = this.rooms.get(roomId);\n    if (!roomState) return;\n    \n    const participant = roomState.participants.get(userId);\n    if (!participant || participant.isConnected) return;\n    \n    // Convert to AI player\n    participant.isAI = true;\n    \n    // Update database\n    await this.storage.updateParticipantAI(roomId, userId, true);\n    \n    // Broadcast AI takeover\n    await this.broadcastToRoom(roomId, {\n      type: 'player_ai_takeover',\n      userId,\n      timestamp: Date.now()\n    });\n    \n    // Start AI turn if it's their turn\n    if (roomState.gameState?.currentPlayer === userId) {\n      await this.executeAITurn(roomId, userId);\n    }\n  }\n  \n  private async executeAITurn(roomId: string, userId: string) {\n    // Implement AI logic here\n    // For now, just end turn after a delay\n    setTimeout(async () => {\n      const roomState = this.rooms.get(roomId);\n      if (!roomState?.gameState) return;\n      \n      if (roomState.gameState.currentPlayer === userId) {\n        await this.processGameAction(roomState.gameState, 'end_turn', {}, userId);\n        \n        // Broadcast AI action\n        await this.broadcastToRoom(roomId, {\n          type: 'game_action',\n          action: 'end_turn',\n          actionData: {},\n          playerId: userId,\n          gameState: this.getClientGameState(roomState.gameState, null),\n          timestamp: Date.now()\n        });\n      }\n    }, 2000);\n  }\n  \n  private async endGame(roomId: string) {\n    const roomState = this.rooms.get(roomId);\n    if (!roomState || !roomState.gameState) return;\n    \n    // Calculate final scores and placements\n    const scores = Array.from(roomState.gameState.playerStates.entries())\n      .map(([userId, state]) => ({ userId, score: state.score }))\n      .sort((a, b) => a.score - b.score);\n    \n    // Calculate payouts\n    const prizePool = roomState.settings.betAmount * roomState.participants.size;\n    const payouts: { [userId: string]: number } = {};\n    \n    if (prizePool > 0) {\n      // Winner takes 60%, second place 30%, third place 10%\n      if (scores[0]) payouts[scores[0].userId] = Math.floor(prizePool * 0.6);\n      if (scores[1]) payouts[scores[1].userId] = Math.floor(prizePool * 0.3);\n      if (scores[2]) payouts[scores[2].userId] = Math.floor(prizePool * 0.1);\n    }\n    \n    // Update room status\n    roomState.status = 'finished';\n    \n    // Save to database\n    await this.storage.updateGameRoom(roomId, {\n      status: 'finished',\n      finishedAt: new Date(),\n      payouts\n    });\n    \n    // Award payouts and XP\n    for (let i = 0; i < scores.length; i++) {\n      const { userId, score } = scores[i];\n      const payout = payouts[userId] || 0;\n      const placement = i + 1;\n      \n      // Update participant record\n      await this.storage.updateParticipantResult(roomId, userId, placement, payout);\n      \n      // Award coins and XP\n      if (payout > 0) {\n        await this.storage.awardCurrency(userId, payout);\n      }\n      \n      const xpEarned = placement === 1 ? 100 : placement === 2 ? 50 : 25;\n      await this.storage.awardExperience(userId, xpEarned);\n      \n      // Save game history\n      await this.storage.saveGameHistory({\n        userId,\n        gameMode: 'online',\n        playerCount: roomState.participants.size,\n        rounds: roomState.settings.rounds,\n        finalScore: score,\n        placement,\n        won: placement === 1,\n        xpEarned,\n        coinsEarned: payout\n      });\n    }\n    \n    // Broadcast game end\n    await this.broadcastToRoom(roomId, {\n      type: 'game_ended',\n      scores,\n      payouts,\n      timestamp: Date.now()\n    });\n    \n    // Clean up room after delay\n    setTimeout(() => {\n      this.rooms.delete(roomId);\n    }, 60000); // Keep room for 1 minute for results viewing\n  }\n  \n  private async sendLobbyList(connection: WSConnection) {\n    const lobbies = await this.storage.getPublicLobbies();\n    \n    connection.ws.send(JSON.stringify({\n      type: 'lobby_list',\n      lobbies: lobbies.map(lobby => ({\n        code: lobby.code,\n        hostName: lobby.hostName,\n        playerCount: lobby.playerCount,\n        maxPlayers: lobby.maxPlayers,\n        betAmount: lobby.betAmount,\n        rounds: lobby.rounds,\n        status: lobby.status\n      })),\n      timestamp: Date.now()\n    }));\n  }\n  \n  private async broadcastLobbyUpdate() {\n    const lobbies = await this.storage.getPublicLobbies();\n    \n    const lobbyData = lobbies.map(lobby => ({\n      code: lobby.code,\n      hostName: lobby.hostName,\n      playerCount: lobby.playerCount,\n      maxPlayers: lobby.maxPlayers,\n      betAmount: lobby.betAmount,\n      rounds: lobby.rounds,\n      status: lobby.status\n    }));\n    \n    // Broadcast to all connected users\n    this.broadcastToAll({\n      type: 'lobby_update',\n      lobbies: lobbyData,\n      timestamp: Date.now()\n    });\n  }\n  \n  public async broadcastToRoom(roomId: string, message: any, excludeUserId?: string) {\n    const roomState = this.rooms.get(roomId);\n    if (!roomState) return;\n    \n    for (const [userId, participant] of roomState.participants) {\n      if (userId === excludeUserId) continue;\n      if (!participant.isConnected || !participant.connectionId) continue;\n      \n      const connection = this.connections.get(participant.connectionId);\n      if (connection && connection.ws.readyState === WebSocket.OPEN) {\n        connection.ws.send(JSON.stringify(message));\n      }\n    }\n  }\n  \n  private broadcastToAll(message: any) {\n    for (const connection of this.connections.values()) {\n      if (connection.ws.readyState === WebSocket.OPEN) {\n        connection.ws.send(JSON.stringify(message));\n      }\n    }\n  }\n  \n  private async restoreRoomState(roomId: string) {\n    const room = await this.storage.getGameRoomById(roomId);\n    if (!room) return;\n    \n    const participants = await this.storage.getGameParticipants(roomId);\n    \n    const roomState: RoomState = {\n      participants: new Map(),\n      spectators: new Set(),\n      gameState: room.serverGameState as AuthoritativeGameState || null,\n      lastActivityAt: room.lastActivityAt ? new Date(room.lastActivityAt).getTime() : Date.now(),\n      hostId: room.hostId,\n      crownHolderId: room.crownHolderId || room.hostId,\n      settings: room.settings as RoomSettings,\n      status: room.status as 'waiting' | 'active' | 'finished',\n      isPublished: room.isPublished || false,\n      isPrivate: room.isPrivate || false,\n      password: room.password || undefined\n    };\n    \n    for (const p of participants) {\n      roomState.participants.set(p.userId, {\n        userId: p.userId,\n        playerIndex: p.playerIndex,\n        isReady: p.isReady || false,\n        isConnected: p.isConnected || false,\n        connectionId: p.connectionId || undefined,\n        disconnectedAt: p.disconnectedAt ? new Date(p.disconnectedAt).getTime() : undefined,\n        isAI: p.isAiReplacement || false\n      });\n    }\n    \n    this.rooms.set(roomId, roomState);\n  }\n  \n  private serializeRoomState(roomState: RoomState): any {\n    return {\n      participants: Array.from(roomState.participants.values()),\n      spectators: Array.from(roomState.spectators),\n      gameState: roomState.gameState ? this.getClientGameState(roomState.gameState, null) : null,\n      hostId: roomState.hostId,\n      crownHolderId: roomState.crownHolderId,\n      settings: roomState.settings,\n      status: roomState.status,\n      isPublished: roomState.isPublished,\n      isPrivate: roomState.isPrivate\n    };\n  }\n  \n  private getClientGameState(gameState: AuthoritativeGameState, forUserId: string | null): any {\n    // Return sanitized game state for clients\n    // Hide other players' cards, etc.\n    return {\n      currentTurn: gameState.currentTurn,\n      currentPlayer: gameState.currentPlayer,\n      turnStartTime: gameState.turnStartTime,\n      turnTimeLimit: gameState.turnTimeLimit,\n      rounds: gameState.rounds,\n      currentRound: gameState.currentRound,\n      discardPile: gameState.discardPile,\n      lastAction: gameState.lastAction,\n      playerStates: Array.from(gameState.playerStates.entries()).map(([userId, state]) => ({\n        userId,\n        score: state.score,\n        cardCount: state.hand.length,\n        hasPeeked: state.hasPeeked,\n        // Only show cards to the player themselves\n        hand: forUserId === userId ? state.hand : Array(state.hand.length).fill('hidden')\n      }))\n    };\n  }\n  \n  private findConnection(ws: WebSocket): WSConnection | undefined {\n    for (const connection of this.connections.values()) {\n      if (connection.ws === ws) {\n        return connection;\n      }\n    }\n    return undefined;\n  }\n  \n  private generateConnectionId(): string {\n    return Math.random().toString(36).substring(2) + Date.now().toString(36);\n  }\n  \n  private generateRoomCode(): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let code = '';\n    for (let i = 0; i < 6; i++) {\n      code += chars[Math.floor(Math.random() * chars.length)];\n    }\n    return code;\n  }\n  \n  private shuffleDeck(): string[] {\n    const suits = ['hearts', 'diamonds', 'clubs', 'spades'];\n    const values = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\n    const deck: string[] = [];\n    \n    for (const suit of suits) {\n      for (const value of values) {\n        deck.push(`${value}_${suit}`);\n      }\n    }\n    \n    // Fisher-Yates shuffle\n    for (let i = deck.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [deck[i], deck[j]] = [deck[j], deck[i]];\n    }\n    \n    return deck;\n  }\n  \n  private dealCards(deck: string[], count: number): string[] {\n    return deck.splice(0, count);\n  }\n  \n  private startPingInterval() {\n    this.pingInterval = setInterval(() => {\n      const now = Date.now();\n      \n      for (const [id, connection] of this.connections) {\n        // Disconnect if no pong received for 60 seconds\n        if (connection.lastPing && now - connection.lastPing > 60000) {\n          console.log(`Disconnecting inactive connection: ${id}`);\n          connection.ws.close();\n          this.connections.delete(id);\n        } else if (connection.ws.readyState === WebSocket.OPEN) {\n          connection.ws.ping();\n        }\n      }\n    }, 30000); // Ping every 30 seconds\n  }\n  \n  private startIdleCheckInterval() {\n    setInterval(async () => {\n      const now = Date.now();\n      \n      for (const [roomId, roomState] of this.rooms) {\n        // Check for idle crown holders (4 minutes warning, 5 minutes action)\n        if (roomState.status === 'waiting' && roomState.participants.size > 0) {\n          const idleTime = now - roomState.lastActivityAt;\n          \n          if (idleTime > 300000) { // 5 minutes\n            // Auto-close room or transfer crown\n            if (roomState.participants.size === 1) {\n              // Close room\n              await this.closeIdleRoom(roomId);\n            } else {\n              // Transfer crown\n              await this.autoTransferCrown(roomId);\n            }\n          } else if (idleTime > 240000) { // 4 minutes\n            // Send warning\n            await this.sendIdleWarning(roomId);\n          }\n        }\n      }\n    }, 60000); // Check every minute\n  }\n  \n  private async closeIdleRoom(roomId: string) {\n    const roomState = this.rooms.get(roomId);\n    if (!roomState) return;\n    \n    // Notify players\n    await this.broadcastToRoom(roomId, {\n      type: 'room_closed',\n      reason: 'idle_timeout',\n      timestamp: Date.now()\n    });\n    \n    // Clean up\n    this.rooms.delete(roomId);\n    await this.storage.deleteGameRoom(roomId);\n    \n    // Update lobby list\n    await this.broadcastLobbyUpdate();\n  }\n  \n  private async autoTransferCrown(roomId: string) {\n    const roomState = this.rooms.get(roomId);\n    if (!roomState) return;\n    \n    // Find next player (lowest join order)\n    const participants = Array.from(roomState.participants.values())\n      .sort((a, b) => a.playerIndex - b.playerIndex);\n    \n    const currentCrownIndex = participants.findIndex(p => p.userId === roomState.crownHolderId);\n    const nextIndex = (currentCrownIndex + 1) % participants.length;\n    const newCrownHolder = participants[nextIndex];\n    \n    if (newCrownHolder) {\n      roomState.crownHolderId = newCrownHolder.userId;\n      roomState.hostId = newCrownHolder.userId;\n      roomState.lastActivityAt = Date.now();\n      \n      await this.storage.updateGameRoom(roomId, {\n        crownHolderId: newCrownHolder.userId,\n        hostId: newCrownHolder.userId,\n        lastActivityAt: new Date()\n      });\n      \n      await this.broadcastToRoom(roomId, {\n        type: 'crown_auto_transferred',\n        fromUserId: roomState.crownHolderId,\n        toUserId: newCrownHolder.userId,\n        reason: 'idle_timeout',\n        timestamp: Date.now()\n      });\n    }\n  }\n  \n  private async sendIdleWarning(roomId: string) {\n    const roomState = this.rooms.get(roomId);\n    if (!roomState) return;\n    \n    // Only send warning once\n    const room = await this.storage.getGameRoomById(roomId);\n    if (room?.idleWarningAt) return;\n    \n    await this.storage.updateGameRoom(roomId, {\n      idleWarningAt: new Date()\n    });\n    \n    await this.broadcastToRoom(roomId, {\n      type: 'idle_warning',\n      crownHolderId: roomState.crownHolderId,\n      timeRemaining: 60000, // 1 minute remaining\n      timestamp: Date.now()\n    });\n  }\n  \n  cleanup() {\n    clearInterval(this.pingInterval);\n    this.wss.close();\n  }\n}","size_bytes":40562},"client/src/lib/websocket.ts":{"content":"// WebSocket connection manager for multiplayer functionality\nexport type WSMessageType = \n  | 'connected' | 'authenticated' | 'error' | 'authenticate' | 'auth_error'\n  | 'room:created' | 'room:joined' | 'room:left' | 'room:deleted'\n  | 'room:create' | 'room:join' | 'room:leave'\n  | 'room:list:snapshot' | 'room:list:diff' | 'room:list:subscribe' | 'room:list:unsubscribe'\n  | 'player:joined' | 'player:left' | 'player:ready' | 'player:disconnected' | 'player:reconnected'\n  | 'host:changed' | 'settings:updated' | 'room:settings:update'\n  | 'game:started' | 'game:state' | 'game:move' | 'game:ended' | 'game:start'\n  | 'room:ready:set' | 'move:submit'\n  | 'session:pong' | 'session:ping';\n\nexport interface WSMessage {\n  type: WSMessageType;\n  [key: string]: any;\n}\n\nexport interface RoomCard {\n  code: string;\n  name: string;\n  visibility: 'public' | 'private';\n  isLocked: boolean;\n  hostName: string;\n  hostHasCrown: boolean;\n  playerCount: number;\n  maxPlayers: number;\n  rounds: number;\n  betCoins: number;\n  state: 'waiting' | 'active' | 'finished';\n}\n\ntype WSEventCallback = (message: WSMessage) => void;\n\nclass WebSocketManager {\n  private ws: WebSocket | null = null;\n  private url: string;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectDelay = 1000;\n  private listeners: Map<WSMessageType, Set<WSEventCallback>> = new Map();\n  private messageQueue: WSMessage[] = [];\n  private isConnecting = false;\n  private isAuthenticated = false;\n  private connectionId: string | null = null;\n  private pingInterval: NodeJS.Timeout | null = null;\n  private userId: string | null = null;\n\n  constructor() {\n    // Determine WebSocket URL based on environment\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const host = window.location.host;\n    this.url = `${protocol}//${host}/ws`;\n  }\n\n  connect(userId: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (this.ws?.readyState === WebSocket.OPEN) {\n        resolve();\n        return;\n      }\n\n      if (this.isConnecting) {\n        // Wait for current connection attempt\n        const checkConnection = setInterval(() => {\n          if (this.ws?.readyState === WebSocket.OPEN) {\n            clearInterval(checkConnection);\n            resolve();\n          } else if (!this.isConnecting) {\n            clearInterval(checkConnection);\n            reject(new Error('Connection failed'));\n          }\n        }, 100);\n        return;\n      }\n\n      this.isConnecting = true;\n      this.userId = userId;\n\n      try {\n        this.ws = new WebSocket(this.url);\n\n        this.ws.onopen = () => {\n          console.log('WebSocket connected');\n          this.isConnecting = false;\n          this.reconnectAttempts = 0;\n          \n          // Start ping interval\n          this.startPingInterval();\n          \n          // Authenticate immediately\n          this.send({ type: 'authenticate', userId });\n          \n          // Process queued messages\n          while (this.messageQueue.length > 0) {\n            const message = this.messageQueue.shift();\n            if (message) {\n              this.send(message);\n            }\n          }\n          \n          resolve();\n        };\n\n        this.ws.onmessage = (event) => {\n          try {\n            const message = JSON.parse(event.data) as WSMessage;\n            this.handleMessage(message);\n          } catch (error) {\n            console.error('Error parsing WebSocket message:', error);\n          }\n        };\n\n        this.ws.onerror = (error) => {\n          console.error('WebSocket error:', error);\n          this.isConnecting = false;\n          reject(error);\n        };\n\n        this.ws.onclose = () => {\n          console.log('WebSocket disconnected');\n          this.isConnecting = false;\n          this.isAuthenticated = false;\n          this.connectionId = null;\n          this.stopPingInterval();\n          \n          // Attempt reconnection if not manually closed\n          if (this.reconnectAttempts < this.maxReconnectAttempts) {\n            this.reconnectAttempts++;\n            console.log(`Reconnecting... (attempt ${this.reconnectAttempts})`);\n            setTimeout(() => {\n              if (this.userId) {\n                this.connect(this.userId).catch(console.error);\n              }\n            }, this.reconnectDelay * this.reconnectAttempts);\n          }\n        };\n      } catch (error) {\n        this.isConnecting = false;\n        reject(error);\n      }\n    });\n  }\n\n  disconnect() {\n    this.reconnectAttempts = this.maxReconnectAttempts; // Prevent auto-reconnect\n    this.stopPingInterval();\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n    this.isAuthenticated = false;\n    this.connectionId = null;\n    this.listeners.clear();\n    this.messageQueue = [];\n  }\n\n  private handleMessage(message: WSMessage) {\n    // Handle special messages\n    switch (message.type) {\n      case 'connected':\n        this.connectionId = message.connectionId;\n        break;\n      case 'authenticated':\n        this.isAuthenticated = true;\n        break;\n      case 'session:pong':\n        // Pong received, connection is healthy\n        break;\n    }\n\n    // Notify listeners\n    const callbacks = this.listeners.get(message.type);\n    if (callbacks) {\n      callbacks.forEach(callback => {\n        try {\n          callback(message);\n        } catch (error) {\n          console.error('Error in WebSocket listener:', error);\n        }\n      });\n    }\n  }\n\n  on(type: WSMessageType, callback: WSEventCallback) {\n    if (!this.listeners.has(type)) {\n      this.listeners.set(type, new Set());\n    }\n    this.listeners.get(type)!.add(callback);\n  }\n\n  off(type: WSMessageType, callback: WSEventCallback) {\n    const callbacks = this.listeners.get(type);\n    if (callbacks) {\n      callbacks.delete(callback);\n    }\n  }\n\n  send(message: WSMessage) {\n    if (this.ws?.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(message));\n    } else {\n      // Queue message if not connected\n      this.messageQueue.push(message);\n    }\n  }\n\n  // Room management methods\n  createRoom(options: {\n    name?: string;\n    visibility?: 'public' | 'private';\n    password?: string;\n    maxPlayers?: number;\n    rounds?: number;\n    betCoins?: number;\n  }) {\n    this.send({\n      type: 'room:create',\n      ...options\n    });\n  }\n\n  joinRoom(code: string, password?: string) {\n    this.send({\n      type: 'room:join',\n      code,\n      password\n    });\n  }\n\n  leaveRoom(code: string) {\n    this.send({\n      type: 'room:leave',\n      code\n    });\n  }\n\n  subscribeToRoomList() {\n    this.send({\n      type: 'room:list:subscribe'\n    });\n  }\n\n  unsubscribeFromRoomList() {\n    this.send({\n      type: 'room:list:unsubscribe'\n    });\n  }\n\n  updateRoomSettings(code: string, settings: {\n    name?: string;\n    visibility?: 'public' | 'private';\n    password?: string;\n    maxPlayers?: number;\n    rounds?: number;\n    betCoins?: number;\n  }) {\n    this.send({\n      type: 'room:settings:update',\n      code,\n      ...settings\n    });\n  }\n\n  setReady(code: string, ready: boolean) {\n    this.send({\n      type: 'room:ready:set',\n      code,\n      ready\n    });\n  }\n\n  startGame(code: string) {\n    this.send({\n      type: 'game:start',\n      code\n    });\n  }\n\n  submitMove(code: string, move: any) {\n    this.send({\n      type: 'move:submit',\n      code,\n      move\n    });\n  }\n\n  private startPingInterval() {\n    this.stopPingInterval();\n    this.pingInterval = setInterval(() => {\n      if (this.ws?.readyState === WebSocket.OPEN) {\n        this.send({\n          type: 'session:ping',\n          ts: Date.now()\n        });\n      }\n    }, 30000); // Ping every 30 seconds\n  }\n\n  private stopPingInterval() {\n    if (this.pingInterval) {\n      clearInterval(this.pingInterval);\n      this.pingInterval = null;\n    }\n  }\n\n  // Getters\n  get isConnected(): boolean {\n    return this.ws?.readyState === WebSocket.OPEN;\n  }\n\n  get isReady(): boolean {\n    return this.isConnected && this.isAuthenticated;\n  }\n\n  get connection(): { id: string | null; authenticated: boolean } {\n    return {\n      id: this.connectionId,\n      authenticated: this.isAuthenticated\n    };\n  }\n}\n\n// Export singleton instance\nexport const wsManager = new WebSocketManager();","size_bytes":8279},"server/websocket.ts":{"content":"import { WebSocket, WebSocketServer } from 'ws';\nimport { IncomingMessage } from 'http';\nimport { v4 as uuidv4 } from 'uuid';\nimport { db } from './db';\nimport { gameRooms, gameParticipants, roomAuditLog } from '../shared/schema';\nimport { eq, and, lt, gte, sql } from 'drizzle-orm';\nimport { \n  DebugLogger, \n  InvariantChecker, \n  AckTracker, \n  createCorrelationContext,\n  detectAndClassifyIssue,\n  SELF_DEBUG_MODE \n} from './lib/self-debug';\nimport { AutoStartManager } from './lib/auto-start';\n\ninterface WSClient {\n  id: string;\n  ws: WebSocket;\n  userId: string | null;\n  roomCode: string | null;\n  isAlive: boolean;\n  subscribedToList: boolean;\n}\n\ninterface RoomCard {\n  code: string;\n  name: string;\n  visibility: 'public' | 'private';\n  isLocked: boolean;\n  hostName: string;\n  hostHasCrown: boolean;\n  playerCount: number;\n  maxPlayers: number;\n  rounds: number;\n  betCoins: number;\n  state: 'waiting' | 'active' | 'finished';\n}\n\nclass WebSocketManager {\n  private wss: WebSocketServer | null = null;\n  private clients: Map<string, WSClient> = new Map();\n  private roomSubscribers: Set<string> = new Set();\n  private heartbeatInterval: NodeJS.Timeout | null = null;\n  private idempotentRequests: Map<string, any> = new Map();\n\n  initialize(server: any) {\n    this.wss = new WebSocketServer({ server, path: '/ws-rooms' });\n    \n    this.wss.on('connection', (ws: WebSocket, req: IncomingMessage) => {\n      const clientId = uuidv4();\n      const client: WSClient = {\n        id: clientId,\n        ws,\n        userId: null,\n        roomCode: null,\n        isAlive: true,\n        subscribedToList: false\n      };\n      \n      this.clients.set(clientId, client);\n      \n      const context = createCorrelationContext();\n      DebugLogger.log(context, 'ws.client_connected', { clientId });\n      \n      // Send connection acknowledgment\n      this.sendToClient(client, {\n        type: 'connected',\n        connectionId: clientId,\n        serverTs: Date.now(),\n        protocolVersion: '1.0.0'\n      });\n      \n      // Set up ping/pong for connection health\n      ws.on('pong', () => {\n        client.isAlive = true;\n      });\n      \n      ws.on('message', async (data: Buffer) => {\n        try {\n          const message = JSON.parse(data.toString());\n          await this.handleMessage(client, message);\n        } catch (error) {\n          const context = createCorrelationContext();\n          const classification = detectAndClassifyIssue(error);\n          DebugLogger.log(context, 'ws.message_error', { \n            error: error instanceof Error ? error.message : String(error), \n            classification,\n            clientId: client.id \n          });\n          this.sendError(client, 'Invalid message format');\n        }\n      });\n      \n      ws.on('close', () => {\n        this.handleDisconnect(client);\n      });\n      \n      ws.on('error', (error) => {\n        const context = createCorrelationContext();\n        DebugLogger.log(context, 'ws.connection_error', { \n          clientId,\n          error: error instanceof Error ? error.message : String(error) \n        });\n      });\n    });\n    \n    console.log('WebSocket server initialized on /ws-rooms');\n    \n    // Set up heartbeat to detect disconnected clients\n    this.heartbeatInterval = setInterval(() => {\n      this.wss?.clients.forEach((ws) => {\n        const client = Array.from(this.clients.values()).find(c => c.ws === ws);\n        if (client) {\n          if (!client.isAlive) {\n            console.log(`[WebSocket] Client ${client.id} failed to respond to ping, disconnecting`);\n            client.ws.terminate();\n            this.handleDisconnect(client);\n            return;\n          }\n          client.isAlive = false;\n          // Send ping as JSON message since browser WebSocket doesn't support ping frames\n          this.sendToClient(client, { type: 'ping' });\n        }\n      });\n    }, 30000); // 30 second heartbeat\n    \n    // Periodic cleanup for empty rooms\n    setInterval(async () => {\n      try {\n        // Find and delete empty rooms\n        const emptyRooms = await db\n          .select({ \n            id: gameRooms.id, \n            code: gameRooms.code,\n            playerCount: gameRooms.playerCount \n          })\n          .from(gameRooms)\n          .leftJoin(gameParticipants, and(\n            eq(gameParticipants.gameRoomId, gameRooms.id),\n            sql`${gameParticipants.leftAt} IS NULL`\n          ))\n          .where(and(\n            eq(gameRooms.status, 'waiting'),\n            sql`${gameParticipants.id} IS NULL`\n          ))\n          .groupBy(gameRooms.id, gameRooms.code, gameRooms.playerCount);\n        \n        for (const room of emptyRooms) {\n          console.log(`[WebSocket] Cleanup: Removing empty room ${room.code}`);\n          await db.delete(gameRooms).where(eq(gameRooms.id, room.id));\n        }\n      } catch (error) {\n        console.error('[WebSocket] Cleanup error:', error);\n      }\n    }, 60000); // Run cleanup every minute\n  }\n  \n  private async handleMessage(client: WSClient, message: any) {\n    const { type, ...payload } = message;\n    \n    switch (type) {\n      case 'auth':\n        await this.handleAuth(client, payload);\n        break;\n      case 'room:create':\n        await this.handleRoomCreate(client, payload);\n        break;\n      case 'room:join':\n        await this.handleRoomJoin(client, payload);\n        break;\n      case 'room:leave':\n        await this.handleRoomLeave(client, payload);\n        break;\n      case 'room:list:subscribe':\n        await this.handleRoomListSubscribe(client);\n        break;\n      case 'room:list:unsubscribe':\n        await this.handleRoomListUnsubscribe(client);\n        break;\n      case 'room:settings:update':\n        await this.handleRoomSettingsUpdate(client, payload);\n        break;\n      case 'room:ready:set':\n        await this.handleReadySet(client, payload);\n        break;\n      case 'game:start':\n        await this.handleGameStart(client, payload);\n        break;\n      case 'move:submit':\n        await this.handleMoveSubmit(client, payload);\n        break;\n      case 'session:ping':\n        this.handlePing(client, payload);\n        break;\n      case 'pong':\n        // Client responded to ping, mark as alive\n        client.isAlive = true;\n        break;\n      default:\n        this.sendError(client, `Unknown message type: ${type}`);\n    }\n  }\n  \n  private async handleAuth(client: WSClient, payload: { userId: string }) {\n    client.userId = payload.userId;\n    this.sendToClient(client, {\n      type: 'authenticated',\n      userId: payload.userId,\n      serverTs: Date.now()\n    });\n  }\n  \n  private async handleRoomCreate(client: WSClient, payload: any) {\n    const context = createCorrelationContext(undefined, undefined, client.userId || undefined, payload.clientTs);\n    DebugLogger.log(context, 'room.create.start', { payload, clientId: client.id });\n    \n    if (!client.userId) {\n      DebugLogger.log(context, 'room.create.auth_failed', { clientId: client.id });\n      this.sendError(client, 'Not authenticated');\n      return;\n    }\n    \n    const { name, visibility, password, maxPlayers, rounds, betCoins, idempotencyKey } = payload;\n    \n    // Check for idempotency\n    if (idempotencyKey && this.idempotentRequests.has(idempotencyKey)) {\n      const existingResult = this.idempotentRequests.get(idempotencyKey);\n      DebugLogger.log(context, 'room.create.idempotent_duplicate', { idempotencyKey });\n      this.sendToClient(client, existingResult);\n      return;\n    }\n    \n    // Generate unique room code with retry logic\n    let code = this.generateRoomCode();\n    let retryCount = 0;\n    \n    try {\n      // Ensure unique code\n      while (retryCount < 5) {\n        const existing = await db.select().from(gameRooms).where(eq(gameRooms.code, code)).limit(1);\n        if (existing.length === 0) break;\n        code = this.generateRoomCode();\n        retryCount++;\n      }\n      \n      DebugLogger.log(context, 'room.create.code_generated', { code, retryCount });\n      \n      // Start transaction for atomic room creation\n      const [room] = await db.insert(gameRooms).values({\n        code,\n        name: name || `${client.userId}'s Room`,\n        hostId: client.userId,\n        visibility: visibility || 'public',\n        isPublished: true,  // Always publish to Active Lobbies\n        passwordHash: password ? this.hashPassword(password) : null,\n        maxPlayers: maxPlayers || 4,\n        rounds: rounds || 9,\n        betAmount: betCoins || 0,\n        state: 'waiting',\n        playerCount: 1,\n        crownHolderId: client.userId,\n        settings: {\n          maxPlayers: maxPlayers || 4,\n          rounds: rounds || 9,\n          betCoins: betCoins || 0\n        },\n        players: [],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        lastActivityAt: new Date()\n      }).returning();\n      \n      // Add creator as first participant  \n      const [participant] = await db.insert(gameParticipants).values({\n        gameRoomId: room.id,\n        userId: client.userId,\n        joinOrder: 1,\n        playerIndex: 0,\n        isHost: true,\n        isReady: false,\n        connected: true,\n        connectionId: client.id,\n        betPaid: betCoins || 0\n      }).returning();\n      \n      // Capture state snapshot\n      const participants = await db.select().from(gameParticipants)\n        .where(and(\n          eq(gameParticipants.gameRoomId, room.id),\n          sql`${gameParticipants.leftAt} IS NULL`\n        ));\n      \n      const snapshot = DebugLogger.captureSnapshot(room, participants);\n      context.roomId = room.id;\n      context.roomCode = code;\n      \n      DebugLogger.log(context, 'room.create.committed', { \n        roomId: room.id, \n        code,\n        snapshot \n      });\n      \n      // Update client's room code\n      client.roomCode = code;\n      \n      // Prepare response\n      const response = {\n        type: 'room:created',\n        room: await this.getRoomCard(room),\n        serverTs: Date.now(),\n        eventId: uuidv4()\n      };\n      \n      // Store for idempotency\n      if (idempotencyKey) {\n        this.idempotentRequests.set(idempotencyKey, response);\n        setTimeout(() => this.idempotentRequests.delete(idempotencyKey), 60000);\n      }\n      \n      // Send room created event\n      this.sendToClient(client, response);\n      \n      // Track ACK\n      const ackStats = await AckTracker.waitForAcks(\n        response.eventId,\n        'room:created',\n        [client.id],\n        2000\n      );\n      \n      DebugLogger.log(context, 'room.create.ack_stats', ackStats);\n      \n      // Broadcast room update to list subscribers\n      await this.broadcastRoomListUpdate('added', room);\n      \n      // Log audit event\n      await this.logAuditEvent(room.id, client.userId, 'room_created', { code, name });\n      \n    } catch (error) {\n      const classification = detectAndClassifyIssue(error, { context });\n      DebugLogger.log(context, 'room.create.error', { \n        error: error instanceof Error ? error.message : String(error),\n        classification \n      });\n      DebugLogger.triggerTriage(\n        'Room creation failed',\n        classification,\n        context.roomId,\n        { error: error instanceof Error ? error.message : String(error) }\n      );\n      this.sendError(client, 'Failed to create room');\n    }\n  }\n  \n  private async handleRoomJoin(client: WSClient, payload: any) {\n    const { code, password } = payload;\n    const context = createCorrelationContext(undefined, code, client.userId || undefined, payload.clientTs);\n    DebugLogger.log(context, 'room.join.start', { code, clientId: client.id });\n    \n    if (!client.userId) {\n      DebugLogger.log(context, 'room.join.auth_failed', { clientId: client.id });\n      this.sendError(client, 'Not authenticated');\n      return;\n    }\n    \n    try {\n      // Find room\n      const [room] = await db.select().from(gameRooms).where(eq(gameRooms.code, code));\n      \n      if (!room) {\n        this.sendError(client, 'Room not found');\n        return;\n      }\n      \n      // Check room state\n      if (room.state !== 'waiting') {\n        this.sendError(client, 'Room is not accepting new players');\n        return;\n      }\n      \n      // Get actual current player count first\n      const [currentCount] = await db\n        .select({ count: sql<number>`COUNT(*)` })\n        .from(gameParticipants)\n        .where(and(\n          eq(gameParticipants.gameRoomId, room.id),\n          sql`${gameParticipants.leftAt} IS NULL`\n        ));\n      \n      // Check if room is actually full (use real count, not stale playerCount)\n      if (currentCount.count >= room.maxPlayers!) {\n        console.log(`[WebSocket] Room ${code} is full: ${currentCount.count}/${room.maxPlayers}`);\n        this.sendError(client, 'Room is full');\n        return;\n      }\n      \n      // Check password for private rooms\n      if (room.visibility === 'private' && room.passwordHash) {\n        if (!password || !this.verifyPassword(password, room.passwordHash)) {\n          this.sendError(client, 'Invalid password');\n          return;\n        }\n      }\n      \n      // Update context\n      context.roomId = room.id;\n      context.roomCode = code;\n      \n      // Check if already in room or reconnecting\n      const existing = await db.select().from(gameParticipants)\n        .where(and(\n          eq(gameParticipants.gameRoomId, room.id),\n          eq(gameParticipants.userId, client.userId),\n          sql`${gameParticipants.leftAt} IS NULL`\n        ));\n      \n      if (existing.length > 0) {\n        // Reconnection - update connection status\n        const participant = existing[0];\n        await db.update(gameParticipants)\n          .set({ \n            connected: true,\n            connectionId: client.id,\n            lastSeenAt: new Date()\n          })\n          .where(eq(gameParticipants.id, participant.id));\n        \n        DebugLogger.log(context, 'room.join.reconnected', { \n          userId: client.userId,\n          roomId: room.id \n        });\n        \n        // Update client's room code\n        client.roomCode = code;\n        \n        // Send reconnection confirmation\n        this.sendToClient(client, {\n          type: 'reconnected',\n          code,\n          serverTs: Date.now()\n        });\n        \n        // Notify others of reconnection\n        this.broadcastToRoom(code, {\n          type: 'player:reconnected',\n          userId: client.userId,\n          serverTs: Date.now()\n        }, client.id);\n        \n        return; // Don't add as new participant\n      }\n      \n      // Add participant - use actual count for join order\n      const joinOrder = currentCount.count + 1;\n      const [participant] = await db.insert(gameParticipants).values({\n        gameRoomId: room.id,\n        userId: client.userId,\n        joinOrder,\n        playerIndex: currentCount.count,\n        isHost: false,\n        isReady: false,\n        connected: true,\n        connectionId: client.id,\n        betPaid: room.betAmount,\n        joinedAt: new Date(),\n        lastSeenAt: new Date()\n      }).returning();\n      \n      DebugLogger.log(context, 'room.join.participant_added', { \n        participantId: participant.id,\n        joinOrder,\n        playerIndex: currentCount.count\n      });\n      \n      // Update room player count with actual count\n      const [actualCount] = await db\n        .select({ count: sql<number>`COUNT(*)` })\n        .from(gameParticipants)\n        .where(and(\n          eq(gameParticipants.gameRoomId, room.id),\n          sql`${gameParticipants.leftAt} IS NULL`\n        ));\n      \n      await db.update(gameRooms)\n        .set({ \n          playerCount: actualCount.count,\n          updatedAt: new Date(),\n          lastActivityAt: new Date()\n        })\n        .where(eq(gameRooms.id, room.id));\n      \n      // Update client's room code\n      client.roomCode = code;\n      \n      // Get updated room info - use the actual count we just calculated\n      const updatedRoom = { ...room, playerCount: actualCount.count };\n      \n      // Capture state snapshot after join\n      const participants = await db.select().from(gameParticipants)\n        .where(and(\n          eq(gameParticipants.gameRoomId, room.id),\n          sql`${gameParticipants.leftAt} IS NULL`\n        ));\n      \n      const snapshot = DebugLogger.captureSnapshot(updatedRoom, participants);\n      DebugLogger.log(context, 'room.join.committed', { snapshot });\n      \n      // Check invariants\n      InvariantChecker.checkRoomInvariants(updatedRoom, participants);\n      \n      // Send join confirmation with event ID for ACK tracking\n      const response = {\n        type: 'player:joined',\n        eventId: uuidv4(),\n        code,\n        player: {\n          id: client.userId,\n          joinOrder\n        },\n        serverTs: Date.now()\n      };\n      \n      // Broadcast to room members\n      this.broadcastToRoom(code, {\n        type: 'player:joined',\n        code,\n        player: {\n          id: client.userId,\n          joinOrder\n        },\n        serverTs: Date.now()\n      }, client.id);\n      \n      // Update room list if room became full\n      if (updatedRoom.playerCount >= updatedRoom.maxPlayers!) {\n        await this.broadcastRoomListUpdate('removed', updatedRoom);\n      } else {\n        await this.broadcastRoomListUpdate('updated', updatedRoom);\n      }\n      \n      // Log audit event\n      await this.logAuditEvent(room.id, client.userId, 'player_joined', { code });\n      \n    } catch (error) {\n      console.error('Error joining room:', error);\n      this.sendError(client, 'Failed to join room');\n    }\n  }\n  \n  private async handleRoomLeave(client: WSClient, payload: { code: string }) {\n    if (!client.userId) {\n      return;\n    }\n    \n    const { code } = payload;\n    \n    try {\n      // Find room and participant\n      const [room] = await db.select().from(gameRooms).where(eq(gameRooms.code, code));\n      \n      if (!room) {\n        return;\n      }\n      \n      const [participant] = await db.select().from(gameParticipants)\n        .where(and(\n          eq(gameParticipants.gameRoomId, room.id),\n          eq(gameParticipants.userId, client.userId)\n        ));\n      \n      if (!participant) {\n        return;\n      }\n      \n      // Mark as left\n      await db.update(gameParticipants)\n        .set({ \n          connected: false,\n          leftAt: new Date()\n        })\n        .where(eq(gameParticipants.id, participant.id));\n      \n      // Get actual connected participant count\n      const remainingParticipants = await db.select().from(gameParticipants)\n        .where(and(\n          eq(gameParticipants.gameRoomId, room.id),\n          sql`${gameParticipants.leftAt} IS NULL`\n        ));\n      \n      const actualPlayerCount = remainingParticipants.length;\n      \n      if (actualPlayerCount === 0) {\n        console.log(`[WebSocket] Room ${code} is now empty, deleting room from database`);\n        \n        // Delete all participants first\n        await db.delete(gameParticipants).where(eq(gameParticipants.gameRoomId, room.id));\n        \n        // Delete empty room\n        await db.delete(gameRooms).where(eq(gameRooms.id, room.id));\n        \n        // Broadcast room deleted\n        this.broadcastToRoom(code, {\n          type: 'room:deleted',\n          code,\n          serverTs: Date.now()\n        });\n        \n        // Remove from Active Lobbies\n        await this.broadcastRoomListUpdate('removed', room);\n      } else {\n        // Update room with actual player count\n        await db.update(gameRooms)\n          .set({ \n            playerCount: actualPlayerCount,\n            updatedAt: new Date(),\n            lastActivityAt: new Date()\n          })\n          .where(eq(gameRooms.id, room.id));\n        \n        // Handle host migration if needed\n        if (participant.isHost) {\n          await this.migrateHost(room.id, participant.userId);\n        }\n        \n        // Broadcast player left\n        this.broadcastToRoom(code, {\n          type: 'player:left',\n          code,\n          playerId: client.userId,\n          serverTs: Date.now()\n        }, client.id);\n        \n        // Update room list based on new player count\n        const maxPlayers = (room.settings as any)?.maxPlayers || room.maxPlayers || 4;\n        if (room.playerCount >= maxPlayers && actualPlayerCount < maxPlayers) {\n          // Room was full, now has space - add it back to Active Lobbies\n          const updatedRoom = { ...room, playerCount: actualPlayerCount };\n          console.log(`[WebSocket] Room ${code} now has space (${actualPlayerCount}/${maxPlayers}), adding to Active Lobbies`);\n          await this.broadcastRoomListUpdate('added', updatedRoom);\n        } else {\n          const updatedRoom = { ...room, playerCount: actualPlayerCount };\n          await this.broadcastRoomListUpdate('updated', updatedRoom);\n        }\n      }\n      \n      // Clear client's room code\n      client.roomCode = null;\n      \n      // Log audit event\n      await this.logAuditEvent(room.id, client.userId, 'player_left', { code });\n      \n    } catch (error) {\n      console.error('Error leaving room:', error);\n    }\n  }\n  \n  private async handleRoomListSubscribe(client: WSClient) {\n    client.subscribedToList = true;\n    this.roomSubscribers.add(client.id);\n    \n    // Send current room list snapshot\n    const rooms = await this.getPublicRooms();\n    this.sendToClient(client, {\n      type: 'room:list:snapshot',\n      rooms,\n      serverTs: Date.now()\n    });\n  }\n  \n  private handleRoomListUnsubscribe(client: WSClient) {\n    client.subscribedToList = false;\n    this.roomSubscribers.delete(client.id);\n  }\n  \n  private async handleRoomSettingsUpdate(client: WSClient, payload: any) {\n    const context = createCorrelationContext(undefined, payload.code, client.userId || undefined);\n    DebugLogger.log(context, 'room.settings.update.start', { \n      code: payload.code,\n      settings: payload.settings,\n      clientId: client.id \n    });\n    \n    if (!client.userId) {\n      DebugLogger.log(context, 'room.settings.update.auth_failed', { clientId: client.id });\n      this.sendError(client, 'Not authenticated');\n      return;\n    }\n    \n    const { code, settings } = payload;\n    \n    try {\n      // Find room\n      const [room] = await db.select().from(gameRooms).where(eq(gameRooms.code, code));\n      \n      if (!room) {\n        DebugLogger.log(context, 'room.settings.update.room_not_found', { code });\n        this.sendError(client, 'Room not found');\n        return;\n      }\n      \n      // Check if user is the host/crown holder\n      if (room.crownHolderId !== client.userId) {\n        DebugLogger.log(context, 'room.settings.update.not_host', { \n          userId: client.userId,\n          crownHolderId: room.crownHolderId \n        });\n        this.sendError(client, 'Only the host can update settings');\n        return;\n      }\n      \n      // Check if game hasn't started\n      if (room.state !== 'waiting') {\n        DebugLogger.log(context, 'room.settings.update.game_started', { state: room.state });\n        this.sendError(client, 'Cannot update settings after game has started');\n        return;\n      }\n      \n      // Update room settings - preserve all existing settings\n      const currentSettings: any = room.settings || {};\n      const updatedSettings = {\n        ...currentSettings,\n        // Only update fields that were explicitly provided\n        ...(settings.maxPlayers !== undefined && { maxPlayers: settings.maxPlayers }),\n        ...(settings.rounds !== undefined && { rounds: settings.rounds }),\n        ...(settings.betCoins !== undefined && { betCoins: settings.betCoins })\n      };\n      \n      await db.update(gameRooms)\n        .set({ \n          settings: updatedSettings,\n          maxPlayers: updatedSettings.maxPlayers,\n          rounds: updatedSettings.rounds,\n          betAmount: updatedSettings.betCoins,\n          updatedAt: new Date()\n        })\n        .where(eq(gameRooms.id, room.id));\n      \n      DebugLogger.log(context, 'room.settings.update.success', { \n        roomId: room.id,\n        code,\n        settings: updatedSettings \n      });\n      \n      // Get updated room data with participants\n      const [updatedRoom] = await db.select().from(gameRooms).where(eq(gameRooms.id, room.id));\n      const participants = await db.select().from(gameParticipants)\n        .where(and(\n          eq(gameParticipants.gameRoomId, room.id),\n          sql`${gameParticipants.leftAt} IS NULL`\n        ));\n      \n      // Broadcast settings update to all room members\n      const eventId = uuidv4();\n      this.broadcastToRoom(code, {\n        type: 'room:settings:updated',\n        eventId,\n        code,\n        settings: updatedSettings,\n        room: {\n          ...updatedRoom,\n          participants\n        },\n        serverTs: Date.now()\n      });\n      \n      // Always broadcast to room list subscribers to update Active Lobbies\n      await this.broadcastRoomListUpdate('updated', updatedRoom);\n      \n    } catch (error) {\n      const classification = detectAndClassifyIssue(error, { context });\n      DebugLogger.log(context, 'room.settings.update.error', { \n        error: error instanceof Error ? error.message : String(error),\n        classification \n      });\n      this.sendError(client, 'Failed to update settings');\n    }\n  }\n  \n  private async handleReadySet(client: WSClient, payload: { code: string; ready: boolean }) {\n    const context = createCorrelationContext(undefined, payload.code, client.userId || undefined);\n    DebugLogger.log(context, 'room.ready.start', { \n      code: payload.code, \n      ready: payload.ready,\n      clientId: client.id \n    });\n    \n    if (!client.userId) {\n      DebugLogger.log(context, 'room.ready.auth_failed', { clientId: client.id });\n      this.sendError(client, 'Not authenticated');\n      return;\n    }\n    \n    const { code, ready } = payload;\n    \n    try {\n      // Find room\n      const [room] = await db.select().from(gameRooms).where(eq(gameRooms.code, code));\n      \n      if (!room) {\n        DebugLogger.log(context, 'room.ready.room_not_found', { code });\n        this.sendError(client, 'Room not found');\n        return;\n      }\n      \n      context.roomId = room.id;\n      context.roomCode = code;\n      \n      // Find participant\n      const [participant] = await db.select().from(gameParticipants)\n        .where(and(\n          eq(gameParticipants.gameRoomId, room.id),\n          eq(gameParticipants.userId, client.userId),\n          sql`${gameParticipants.leftAt} IS NULL`\n        ));\n      \n      if (!participant) {\n        DebugLogger.log(context, 'room.ready.participant_not_found', { \n          userId: client.userId,\n          roomId: room.id \n        });\n        this.sendError(client, 'Not in room');\n        return;\n      }\n      \n      // Update ready state\n      await db.update(gameParticipants)\n        .set({ \n          isReady: ready,\n          lastSeenAt: new Date()\n        })\n        .where(eq(gameParticipants.id, participant.id));\n      \n      DebugLogger.log(context, 'room.ready.state_updated', { \n        participantId: participant.id,\n        ready \n      });\n      \n      // Get all participants to check auto-start\n      const participants = await db.select().from(gameParticipants)\n        .where(and(\n          eq(gameParticipants.gameRoomId, room.id),\n          sql`${gameParticipants.leftAt} IS NULL`\n        ));\n      \n      // Capture snapshot\n      const snapshot = DebugLogger.captureSnapshot(room, participants);\n      DebugLogger.log(context, 'room.ready.snapshot', { snapshot });\n      \n      // Broadcast ready state change\n      // Get updated room data with participants\n      const [updatedRoom] = await db.select().from(gameRooms).where(eq(gameRooms.id, room.id));\n      const updatedParticipants = await db.select().from(gameParticipants)\n        .where(and(\n          eq(gameParticipants.gameRoomId, room.id),\n          sql`${gameParticipants.leftAt} IS NULL`\n        ));\n      \n      const eventId = uuidv4();\n      this.broadcastToRoom(code, {\n        type: 'player:ready',\n        eventId,\n        code,\n        playerId: client.userId,\n        ready,\n        room: {\n          ...updatedRoom,\n          participants: updatedParticipants\n        },\n        serverTs: Date.now()\n      });\n      \n      // Check and trigger auto-start if conditions are met\n      const autoStartResult = await AutoStartManager.checkAndAutoStart(room.id);\n      \n      DebugLogger.log(context, 'room.ready.autostart_result', {\n        started: autoStartResult.started,\n        reason: autoStartResult.reason,\n        playerCount: participants.length,\n        allReady: participants.every(p => p.isReady)\n      });\n      \n      if (autoStartResult.started) {\n        // Auto-start was triggered, wait for it to complete\n        setTimeout(async () => {\n          // Get updated room state\n          const [updatedRoom] = await db.select().from(gameRooms).where(eq(gameRooms.id, room.id));\n          \n          if (updatedRoom && updatedRoom.state === 'active') {\n            // Broadcast game started event\n            const gameStartEventId = uuidv4();\n            const gameStartEvent = {\n              type: 'game:started',\n              eventId: gameStartEventId,\n              code,\n              gameState: updatedRoom.gameState,\n              serverTs: Date.now()\n            };\n            \n            this.broadcastToRoom(code, gameStartEvent);\n            \n            // Track ACKs for game:started\n            const clientIds = Array.from(this.clients.values())\n              .filter(c => c.roomCode === code)\n              .map(c => c.id);\n            \n            const ackStats = await AckTracker.waitForAcks(\n              gameStartEventId,\n              'game:started',\n              clientIds,\n              3000\n            );\n            \n            DebugLogger.log(context, 'room.ready.game_started_acks', ackStats);\n          }\n        }, 2500); // Wait slightly more than the 2s auto-start delay\n      }\n      \n      // Log audit event\n      await this.logAuditEvent(room.id, client.userId, 'ready_changed', { ready });\n      \n    } catch (error) {\n      const classification = detectAndClassifyIssue(error, { context });\n      DebugLogger.log(context, 'room.ready.error', { \n        error: error instanceof Error ? error.message : String(error),\n        classification \n      });\n      this.sendError(client, 'Failed to update ready state');\n    }\n  }\n  \n  private async handleGameStart(client: WSClient, payload: { code: string }) {\n    // Implementation for game start\n    // TODO: Implement this method\n  }\n  \n  private async handleMoveSubmit(client: WSClient, payload: any) {\n    // Implementation for game moves\n    // TODO: Implement this method\n  }\n  \n  private handlePing(client: WSClient, payload: { ts: number }) {\n    this.sendToClient(client, {\n      type: 'session:pong',\n      clientTs: payload.ts,\n      serverTs: Date.now()\n    });\n  }\n  \n  private async handleDisconnect(client: WSClient) {\n    console.log(`WebSocket client disconnected: ${client.id}`);\n    \n    // Don't immediately mark as left - allow time for reconnection\n    if (client.roomCode && client.userId) {\n      // Mark as disconnected but don't remove from room yet\n      try {\n        const [room] = await db.select().from(gameRooms).where(eq(gameRooms.code, client.roomCode));\n        if (room) {\n          // Just mark as disconnected, don't set leftAt\n          await db.update(gameParticipants)\n            .set({ \n              connected: false,\n              lastSeenAt: new Date()\n            })\n            .where(and(\n              eq(gameParticipants.gameRoomId, room.id),\n              eq(gameParticipants.userId, client.userId)\n            ));\n          \n          // Notify room of disconnect\n          this.broadcastToRoom(client.roomCode, {\n            type: 'player:disconnected',\n            userId: client.userId,\n            serverTs: Date.now()\n          }, client.id);\n        }\n      } catch (error) {\n        console.error('Error handling disconnect:', error);\n      }\n    }\n    \n    // Remove from subscribers\n    this.roomSubscribers.delete(client.id);\n    \n    // Remove client\n    this.clients.delete(client.id);\n  }\n  \n  private sendToClient(client: WSClient, data: any) {\n    if (client.ws.readyState === WebSocket.OPEN) {\n      client.ws.send(JSON.stringify(data));\n    }\n  }\n  \n  private sendError(client: WSClient, message: string, context?: any) {\n    this.sendToClient(client, {\n      type: 'error',\n      message,\n      context,\n      serverTs: Date.now()\n    });\n  }\n  \n  private broadcastToRoom(roomCode: string, data: any, excludeClientId?: string) {\n    let broadcastCount = 0;\n    this.clients.forEach(client => {\n      if (client.roomCode === roomCode && client.id !== excludeClientId) {\n        this.sendToClient(client, data);\n        broadcastCount++;\n      }\n    });\n    \n    // Debug log for broadcasts\n    if (data.type) {\n      console.log(`[WebSocket] Broadcast ${data.type} to ${broadcastCount} clients in room ${roomCode}`);\n    }\n  }\n  \n  private async broadcastRoomListUpdate(action: 'added' | 'updated' | 'removed', room: any) {\n    const roomCard = action === 'removed' ? null : await this.getRoomCard(room);\n    \n    const diff = {\n      type: 'room:list:diff',\n      [action]: action === 'removed' ? [room.code] : [roomCard],\n      serverTs: Date.now()\n    };\n    \n    this.roomSubscribers.forEach(clientId => {\n      const client = this.clients.get(clientId);\n      if (client) {\n        this.sendToClient(client, diff);\n      }\n    });\n  }\n  \n  private async getRoomCard(room: any): Promise<RoomCard> {\n    // Get host info\n    const host = await db.select().from(gameParticipants)\n      .where(and(\n        eq(gameParticipants.gameRoomId, room.id),\n        eq(gameParticipants.isHost, true)\n      ))\n      .limit(1);\n    \n    // Use settings from room.settings if available, otherwise fall back to room fields\n    const settings = room.settings || {};\n    \n    return {\n      code: room.code,\n      name: room.name || 'Unnamed Room',\n      visibility: room.visibility || 'public',\n      isLocked: room.visibility === 'private',\n      hostName: host[0]?.userId || 'Unknown',\n      hostHasCrown: true,\n      playerCount: room.playerCount || 0,\n      maxPlayers: settings.maxPlayers || room.maxPlayers || 4,\n      rounds: settings.rounds || room.rounds || 9,\n      betCoins: settings.betCoins || room.betAmount || 0,\n      state: room.state || 'waiting'\n    };\n  }\n  \n  private async getPublicRooms(): Promise<RoomCard[]> {\n    const rooms = await db.select().from(gameRooms)\n      .where(and(\n        eq(gameRooms.visibility, 'public'),\n        eq(gameRooms.state, 'waiting'),\n        lt(gameRooms.playerCount, gameRooms.maxPlayers)\n      ));\n    \n    const roomCards = await Promise.all(rooms.map(room => this.getRoomCard(room)));\n    return roomCards;\n  }\n  \n  private async migrateHost(roomId: string, oldHostId: string) {\n    // Get next player by join order\n    const participants = await db.select().from(gameParticipants)\n      .where(and(\n        eq(gameParticipants.gameRoomId, roomId),\n        eq(gameParticipants.connected, true)\n      ))\n      .orderBy(gameParticipants.joinOrder);\n    \n    if (participants.length === 0) {\n      return;\n    }\n    \n    const newHost = participants[0];\n    \n    // Update old host\n    await db.update(gameParticipants)\n      .set({ isHost: false })\n      .where(and(\n        eq(gameParticipants.gameRoomId, roomId),\n        eq(gameParticipants.userId, oldHostId)\n      ));\n    \n    // Update new host\n    await db.update(gameParticipants)\n      .set({ isHost: true })\n      .where(eq(gameParticipants.id, newHost.id));\n    \n    // Update room\n    await db.update(gameRooms)\n      .set({ \n        hostId: newHost.userId,\n        crownHolderId: newHost.userId,\n        updatedAt: new Date()\n      })\n      .where(eq(gameRooms.id, roomId));\n    \n    // Broadcast host change\n    const room = await db.select().from(gameRooms).where(eq(gameRooms.id, roomId));\n    if (room[0]) {\n      this.broadcastToRoom(room[0].code, {\n        type: 'host:changed',\n        code: room[0].code,\n        hostId: newHost.userId,\n        serverTs: Date.now()\n      });\n    }\n    \n    // Log audit event\n    await this.logAuditEvent(roomId, newHost.userId, 'host_transfer', { \n      oldHostId, \n      newHostId: newHost.userId \n    });\n  }\n  \n  private async logAuditEvent(roomId: string, actorId: string | null, type: string, payload: any) {\n    try {\n      await db.insert(roomAuditLog).values({\n        roomId,\n        actorId,\n        type,\n        payload\n      });\n    } catch (error) {\n      console.error('Error logging audit event:', error);\n    }\n  }\n  \n  private generateRoomCode(): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let code = '';\n    for (let i = 0; i < 6; i++) {\n      code += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return code;\n  }\n  \n  private hashPassword(password: string): string {\n    // Simple hash for demo - in production use bcrypt\n    return Buffer.from(password).toString('base64');\n  }\n  \n  private verifyPassword(password: string, hash: string): boolean {\n    return Buffer.from(password).toString('base64') === hash;\n  }\n  \n  shutdown() {\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n    }\n    \n    this.clients.forEach(client => {\n      client.ws.close();\n    });\n    \n    this.wss?.close();\n  }\n}\n\nexport const wsManager = new WebSocketManager();","size_bytes":37486},"server/lib/auto-start.ts":{"content":"// Auto-start logic for multiplayer rooms\nimport { db } from '../db';\nimport { gameRooms, gameParticipants } from '../../shared/schema';\nimport { eq, and, sql } from 'drizzle-orm';\nimport { \n  DebugLogger, \n  InvariantChecker,\n  createCorrelationContext,\n  AckTracker,\n  SELF_DEBUG_MODE\n} from './self-debug';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport interface AutoStartResult {\n  started: boolean;\n  reason?: string;\n  participants?: any[];\n  room?: any;\n}\n\nexport class AutoStartManager {\n  private static pendingStarts: Map<string, NodeJS.Timeout> = new Map();\n  \n  static async checkAndAutoStart(roomId: string): Promise<AutoStartResult> {\n    const context = createCorrelationContext(roomId);\n    DebugLogger.log(context, 'autostart.check.start', { roomId });\n    \n    try {\n      // Get room and participants\n      const [room] = await db.select().from(gameRooms).where(eq(gameRooms.id, roomId));\n      \n      if (!room) {\n        DebugLogger.log(context, 'autostart.check.room_not_found', { roomId });\n        return { started: false, reason: 'Room not found' };\n      }\n      \n      context.roomCode = room.code;\n      \n      // Get active participants\n      const participants = await db.select().from(gameParticipants)\n        .where(and(\n          eq(gameParticipants.gameRoomId, roomId),\n          sql`${gameParticipants.leftAt} IS NULL`\n        ));\n      \n      // Check auto-start conditions\n      const canAutoStart = InvariantChecker.checkAutoStartConditions(room, participants);\n      \n      if (!canAutoStart) {\n        const notReadyCount = participants.filter(p => !p.isReady).length;\n        const reason = room.state !== 'waiting' ? 'Room not in waiting state' :\n                      participants.length < 2 ? `Not enough players (${participants.length}/2 min)` :\n                      notReadyCount > 0 ? `${notReadyCount} player(s) not ready` :\n                      'Unknown reason';\n        \n        DebugLogger.log(context, 'autostart.check.conditions_not_met', {\n          roomId,\n          state: room.state,\n          playerCount: participants.length,\n          readyCount: participants.filter(p => p.isReady).length,\n          reason\n        });\n        \n        return { started: false, reason, participants, room };\n      }\n      \n      // All conditions met - check if we already have a pending start\n      if (this.pendingStarts.has(roomId)) {\n        DebugLogger.log(context, 'autostart.check.already_pending', { roomId });\n        return { started: false, reason: 'Auto-start already pending' };\n      }\n      \n      // Set a 2-second delay before auto-starting (per spec)\n      DebugLogger.log(context, 'autostart.scheduling', { \n        roomId,\n        delayMs: 2000,\n        playerCount: participants.length \n      });\n      \n      const timeout = setTimeout(async () => {\n        await this.executeAutoStart(roomId, room, participants);\n        this.pendingStarts.delete(roomId);\n      }, 2000);\n      \n      this.pendingStarts.set(roomId, timeout);\n      \n      return { started: true, reason: 'Auto-start scheduled', participants, room };\n      \n    } catch (error) {\n      DebugLogger.log(context, 'autostart.check.error', { \n        error: error instanceof Error ? error.message : String(error) \n      });\n      DebugLogger.triggerTriage(\n        'Auto-start check failed',\n        'AUTOSTART_CONDITION_FALSE',\n        roomId,\n        { error: error instanceof Error ? error.message : String(error) }\n      );\n      return { started: false, reason: 'Error checking auto-start conditions' };\n    }\n  }\n  \n  static async executeAutoStart(roomId: string, room: any, participants: any[]): Promise<void> {\n    const context = createCorrelationContext(roomId, room.code);\n    DebugLogger.log(context, 'autostart.execute.start', { \n      roomId, \n      playerCount: participants.length \n    });\n    \n    try {\n      // Double-check conditions haven't changed\n      const [currentRoom] = await db.select().from(gameRooms).where(eq(gameRooms.id, roomId));\n      const currentParticipants = await db.select().from(gameParticipants)\n        .where(and(\n          eq(gameParticipants.gameRoomId, roomId),\n          sql`${gameParticipants.leftAt} IS NULL`\n        ));\n      \n      const stillCanStart = InvariantChecker.checkAutoStartConditions(currentRoom, currentParticipants);\n      \n      if (!stillCanStart) {\n        DebugLogger.log(context, 'autostart.execute.conditions_changed', { roomId });\n        DebugLogger.triggerTriage(\n          'Auto-start conditions changed during delay',\n          'AUTOSTART_CONDITION_FALSE',\n          roomId,\n          { \n            originalPlayerCount: participants.length,\n            currentPlayerCount: currentParticipants.length,\n            allReady: currentParticipants.every(p => p.isReady)\n          }\n        );\n        return;\n      }\n      \n      // Generate initial game state\n      const rngSeed = Math.random().toString(36).substring(7);\n      const initialGameState = {\n        rngSeed,\n        currentTurn: 0,\n        currentPlayer: currentParticipants[0].userId,\n        roundNumber: 1,\n        phase: 'peek',\n        startedAt: new Date().toISOString()\n      };\n      \n      DebugLogger.log(context, 'autostart.execute.state_prepared', { \n        roomId,\n        rngSeed,\n        initialPlayer: currentParticipants[0].userId\n      });\n      \n      // Update room state to active\n      await db.update(gameRooms)\n        .set({\n          state: 'active',\n          gameState: initialGameState,\n          startedAt: new Date(),\n          updatedAt: new Date()\n        })\n        .where(eq(gameRooms.id, roomId));\n      \n      DebugLogger.log(context, 'autostart.execute.state_persisted', { roomId });\n      \n      // Capture snapshot after state change\n      const updatedRoom = { ...currentRoom, state: 'active', gameState: initialGameState };\n      const snapshot = DebugLogger.captureSnapshot(updatedRoom, currentParticipants);\n      \n      DebugLogger.log(context, 'autostart.execute.snapshot_captured', { \n        roomId,\n        snapshot \n      });\n      \n      // Check invariants after state change\n      InvariantChecker.checkRoomInvariants(updatedRoom, currentParticipants);\n      \n      // Emit game:started event (this should be done by the WebSocket manager)\n      DebugLogger.log(context, 'autostart.execute.complete', { \n        roomId,\n        state: 'active',\n        playerCount: currentParticipants.length\n      });\n      \n    } catch (error) {\n      DebugLogger.log(context, 'autostart.execute.error', { \n        error: error instanceof Error ? error.message : String(error) \n      });\n      \n      DebugLogger.triggerTriage(\n        'Auto-start execution failed',\n        error instanceof Error && error.message.includes('seed') ? 'RNG_SEED_MISSING' : \n        error instanceof Error && error.message.includes('state') ? 'STATE_NOT_PERSISTED' : \n        'UNKNOWN',\n        roomId,\n        { error: error instanceof Error ? error.message : String(error) }\n      );\n      \n      // Rollback if possible\n      try {\n        await db.update(gameRooms)\n          .set({ state: 'waiting' })\n          .where(eq(gameRooms.id, roomId));\n      } catch (rollbackError) {\n        DebugLogger.log(context, 'autostart.execute.rollback_failed', { \n          error: rollbackError instanceof Error ? rollbackError.message : String(rollbackError) \n        });\n      }\n    }\n  }\n  \n  static cancelPendingStart(roomId: string): void {\n    if (this.pendingStarts.has(roomId)) {\n      const context = createCorrelationContext(roomId);\n      DebugLogger.log(context, 'autostart.cancelled', { roomId });\n      \n      clearTimeout(this.pendingStarts.get(roomId)!);\n      this.pendingStarts.delete(roomId);\n    }\n  }\n}","size_bytes":7709},"server/lib/self-debug.ts":{"content":"// Self-Debugging System for Multiplayer Rooms\n// Implements structured logging, state snapshots, invariant assertions, and automatic triage\n\nimport { v4 as uuidv4 } from 'uuid';\nimport { GameRoom, GameParticipant } from '@shared/schema';\n\n// Configuration\nexport const SELF_DEBUG_MODE = process.env.NODE_ENV !== 'production';\nexport const PROTOCOL_VERSION = '1.0.0';\n\n// Correlation tracking\nexport interface CorrelationContext {\n  requestId: string;\n  roomOpId: string;\n  roomCode?: string;\n  roomId?: string;\n  playerId?: string;\n  serverTs: number;\n  protocolVersion: string;\n  clientTs?: number;\n}\n\n// State snapshot structure (redacted, no PII)\nexport interface StateSnapshot {\n  roomId: string;\n  code: string;\n  state: string;\n  playerCount: number;\n  maxPlayers: number;\n  visibility: string;\n  hostId: string;\n  players: Array<{\n    id: string;\n    ready: boolean;\n    connected: boolean;\n    joinOrder: number;\n  }>;\n  rounds: number;\n  bet: number;\n  serverTs: number;\n  protocolVersion: string;\n  rngSeed?: string;\n  turnId?: string;\n}\n\n// Triage bundle for debugging\nexport interface TriageBundle {\n  triggerId: string;\n  trigger: string;\n  classification: TriageClassification;\n  logs: string[];\n  snapshots: StateSnapshot[];\n  ackStatistics: AckStatistics;\n  listingDecision?: string;\n  failureReason?: string;\n  timestamp: number;\n}\n\nexport type TriageClassification = \n  | 'IDEMPOTENCY_DUPLICATE'\n  | 'EMIT_BEFORE_COMMIT'\n  | 'AUTOSTART_CONDITION_FALSE'\n  | 'STATE_NOT_PERSISTED'\n  | 'CLIENT_NOT_SUBSCRIBED'\n  | 'RNG_SEED_MISSING'\n  | 'INITIAL_STATE_MISSING'\n  | 'PROTOCOL_MISMATCH'\n  | 'LISTING_INVARIANT_MISMATCH'\n  | 'UNKNOWN';\n\nexport interface AckStatistics {\n  eventType: string;\n  expectedClients: number;\n  ackedClients: number;\n  ackRate: number;\n  timeout: boolean;\n}\n\n// Logger with structured output\nexport class DebugLogger {\n  private static logs: Map<string, string[]> = new Map();\n  private static snapshots: Map<string, StateSnapshot[]> = new Map();\n  private static triageBundles: TriageBundle[] = [];\n\n  static log(context: CorrelationContext, event: string, data?: any) {\n    if (!SELF_DEBUG_MODE) return;\n\n    const logEntry = JSON.stringify({\n      ...context,\n      event,\n      data,\n      timestamp: Date.now()\n    });\n\n    console.log(logEntry);\n\n    // Store for triage\n    const key = context.roomId || context.requestId;\n    if (!this.logs.has(key)) {\n      this.logs.set(key, []);\n    }\n    this.logs.get(key)!.push(logEntry);\n\n    // Keep only last 100 logs per key\n    const logs = this.logs.get(key)!;\n    if (logs.length > 100) {\n      logs.shift();\n    }\n  }\n\n  static captureSnapshot(room: GameRoom, participants: GameParticipant[]): StateSnapshot {\n    const snapshot: StateSnapshot = {\n      roomId: room.id,\n      code: room.code,\n      state: room.state,\n      playerCount: room.playerCount,\n      maxPlayers: room.maxPlayers,\n      visibility: room.visibility,\n      hostId: room.hostId,\n      players: participants.map(p => ({\n        id: p.userId,\n        ready: p.isReady || false,\n        connected: p.connected,\n        joinOrder: p.joinOrder\n      })),\n      rounds: room.rounds,\n      bet: room.betAmount,\n      serverTs: Date.now(),\n      protocolVersion: PROTOCOL_VERSION\n    };\n\n    if (SELF_DEBUG_MODE) {\n      const key = room.id;\n      if (!this.snapshots.has(key)) {\n        this.snapshots.set(key, []);\n      }\n      this.snapshots.get(key)!.push(snapshot);\n      \n      // Keep only last 10 snapshots\n      const snapshots = this.snapshots.get(key)!;\n      if (snapshots.length > 10) {\n        snapshots.shift();\n      }\n    }\n\n    return snapshot;\n  }\n\n  static triggerTriage(\n    trigger: string,\n    classification: TriageClassification,\n    roomId?: string,\n    additionalData?: any\n  ): TriageBundle {\n    const bundle: TriageBundle = {\n      triggerId: uuidv4(),\n      trigger,\n      classification,\n      logs: roomId ? (this.logs.get(roomId) || []) : [],\n      snapshots: roomId ? (this.snapshots.get(roomId) || []) : [],\n      ackStatistics: additionalData?.ackStats || { \n        eventType: 'unknown',\n        expectedClients: 0,\n        ackedClients: 0,\n        ackRate: 0,\n        timeout: false\n      },\n      listingDecision: additionalData?.listingDecision,\n      failureReason: additionalData?.failureReason,\n      timestamp: Date.now()\n    };\n\n    this.triageBundles.push(bundle);\n    \n    // Keep only last 50 bundles\n    if (this.triageBundles.length > 50) {\n      this.triageBundles.shift();\n    }\n\n    console.error('TRIAGE TRIGGERED:', JSON.stringify(bundle, null, 2));\n    \n    return bundle;\n  }\n\n  static getTriageBundles(): TriageBundle[] {\n    return [...this.triageBundles];\n  }\n\n  static clearLogs(roomId: string) {\n    this.logs.delete(roomId);\n    this.snapshots.delete(roomId);\n  }\n}\n\n// Invariant assertions\nexport class InvariantChecker {\n  static checkRoomInvariants(room: GameRoom, participants: GameParticipant[]): void {\n    if (!SELF_DEBUG_MODE) return;\n\n    const context: CorrelationContext = {\n      requestId: uuidv4(),\n      roomOpId: uuidv4(),\n      roomId: room.id,\n      roomCode: room.code,\n      serverTs: Date.now(),\n      protocolVersion: PROTOCOL_VERSION\n    };\n\n    // Invariant 1: playerCount <= maxPlayers\n    if (room.playerCount > room.maxPlayers) {\n      DebugLogger.triggerTriage(\n        'Player count exceeds max players',\n        'LISTING_INVARIANT_MISMATCH',\n        room.id,\n        { room, participants }\n      );\n      throw new Error(`Invariant violation: playerCount (${room.playerCount}) > maxPlayers (${room.maxPlayers})`);\n    }\n\n    // Invariant 2: state must be valid\n    const validStates = ['waiting', 'active', 'finished'];\n    if (!validStates.includes(room.state)) {\n      DebugLogger.triggerTriage(\n        'Invalid room state',\n        'LISTING_INVARIANT_MISMATCH',\n        room.id,\n        { room, state: room.state }\n      );\n      throw new Error(`Invariant violation: invalid state '${room.state}'`);\n    }\n\n    // Invariant 3: Listing rule\n    const shouldBeListed = room.visibility === 'public' && \n                          room.state === 'waiting' && \n                          room.playerCount < room.maxPlayers;\n    \n    const isListed = room.isPublished;\n    \n    if (shouldBeListed !== isListed) {\n      DebugLogger.log(context, 'listing_invariant_mismatch', {\n        shouldBeListed,\n        isListed,\n        visibility: room.visibility,\n        state: room.state,\n        playerCount: room.playerCount,\n        maxPlayers: room.maxPlayers\n      });\n    }\n\n    // Invariant 4: playerCount should match actual participants\n    const activeParticipants = participants.filter(p => !p.leftAt);\n    if (room.playerCount !== activeParticipants.length) {\n      DebugLogger.triggerTriage(\n        'Player count mismatch',\n        'LISTING_INVARIANT_MISMATCH',\n        room.id,\n        { \n          roomPlayerCount: room.playerCount,\n          actualCount: activeParticipants.length,\n          participants\n        }\n      );\n    }\n\n    // Invariant 5: Must have a host\n    if (!room.hostId) {\n      DebugLogger.triggerTriage(\n        'Room has no host',\n        'LISTING_INVARIANT_MISMATCH',\n        room.id,\n        { room }\n      );\n    }\n  }\n\n  static checkAutoStartConditions(room: GameRoom, participants: GameParticipant[]): boolean {\n    const activeParticipants = participants.filter(p => !p.leftAt);\n    const allReady = activeParticipants.every(p => p.isReady);\n    const hasMinPlayers = activeParticipants.length >= 2;\n    \n    const canAutoStart = room.state === 'waiting' && allReady && hasMinPlayers;\n    \n    if (SELF_DEBUG_MODE) {\n      const context: CorrelationContext = {\n        requestId: uuidv4(),\n        roomOpId: uuidv4(),\n        roomId: room.id,\n        roomCode: room.code,\n        serverTs: Date.now(),\n        protocolVersion: PROTOCOL_VERSION\n      };\n      \n      DebugLogger.log(context, 'autostart_check', {\n        canAutoStart,\n        state: room.state,\n        allReady,\n        hasMinPlayers,\n        activeCount: activeParticipants.length,\n        readyStates: activeParticipants.map(p => ({ id: p.userId, ready: p.isReady }))\n      });\n    }\n    \n    return canAutoStart;\n  }\n}\n\n// ACK tracking for critical events\nexport class AckTracker {\n  private static pendingAcks: Map<string, {\n    eventType: string;\n    expectedClients: Set<string>;\n    ackedClients: Set<string>;\n    timeout: NodeJS.Timeout;\n    resolve: (stats: AckStatistics) => void;\n  }> = new Map();\n\n  static async waitForAcks(\n    eventId: string,\n    eventType: string,\n    clientIds: string[],\n    timeoutMs: number = 2000\n  ): Promise<AckStatistics> {\n    return new Promise((resolve) => {\n      const expectedClients = new Set(clientIds);\n      const ackedClients = new Set<string>();\n\n      const timeout = setTimeout(() => {\n        const pending = this.pendingAcks.get(eventId);\n        if (pending) {\n          const stats: AckStatistics = {\n            eventType,\n            expectedClients: expectedClients.size,\n            ackedClients: pending.ackedClients.size,\n            ackRate: expectedClients.size > 0 ? pending.ackedClients.size / expectedClients.size : 0,\n            timeout: true\n          };\n          \n          this.pendingAcks.delete(eventId);\n          resolve(stats);\n          \n          // Trigger triage if ACK rate is too low\n          if (stats.ackRate < 0.6 && SELF_DEBUG_MODE) {\n            DebugLogger.triggerTriage(\n              'Low ACK rate for critical event',\n              'CLIENT_NOT_SUBSCRIBED',\n              undefined,\n              { ackStats: stats }\n            );\n          }\n        }\n      }, timeoutMs);\n\n      this.pendingAcks.set(eventId, {\n        eventType,\n        expectedClients,\n        ackedClients,\n        timeout,\n        resolve\n      });\n    });\n  }\n\n  static recordAck(eventId: string, clientId: string): void {\n    const pending = this.pendingAcks.get(eventId);\n    if (pending) {\n      pending.ackedClients.add(clientId);\n      \n      // Check if we have quorum (60%)\n      const ackRate = pending.ackedClients.size / pending.expectedClients.size;\n      if (ackRate >= 0.6) {\n        clearTimeout(pending.timeout);\n        const stats: AckStatistics = {\n          eventType: pending.eventType,\n          expectedClients: pending.expectedClients.size,\n          ackedClients: pending.ackedClients.size,\n          ackRate,\n          timeout: false\n        };\n        this.pendingAcks.delete(eventId);\n        pending.resolve(stats);\n      }\n    }\n  }\n}\n\n// Generate correlation context\nexport function createCorrelationContext(\n  roomId?: string,\n  roomCode?: string,\n  playerId?: string,\n  clientTs?: number\n): CorrelationContext {\n  return {\n    requestId: uuidv4(),\n    roomOpId: uuidv4(),\n    roomId,\n    roomCode,\n    playerId,\n    serverTs: Date.now(),\n    protocolVersion: PROTOCOL_VERSION,\n    clientTs\n  };\n}\n\n// Automatic triage detection\nexport function detectAndClassifyIssue(error: any, context?: any): TriageClassification {\n  const errorMessage = error?.message || error?.toString() || '';\n  \n  if (errorMessage.includes('duplicate key') || errorMessage.includes('already exists')) {\n    return 'IDEMPOTENCY_DUPLICATE';\n  }\n  \n  if (errorMessage.includes('emit before commit')) {\n    return 'EMIT_BEFORE_COMMIT';\n  }\n  \n  if (errorMessage.includes('state not persisted')) {\n    return 'STATE_NOT_PERSISTED';\n  }\n  \n  if (errorMessage.includes('protocol') || errorMessage.includes('version')) {\n    return 'PROTOCOL_MISMATCH';\n  }\n  \n  if (errorMessage.includes('seed') || errorMessage.includes('rng')) {\n    return 'RNG_SEED_MISSING';\n  }\n  \n  if (errorMessage.includes('initial') || errorMessage.includes('game state')) {\n    return 'INITIAL_STATE_MISSING';\n  }\n  \n  if (context?.autostart === false) {\n    return 'AUTOSTART_CONDITION_FALSE';\n  }\n  \n  if (context?.ackRate && context.ackRate < 0.6) {\n    return 'CLIENT_NOT_SUBSCRIBED';\n  }\n  \n  return 'UNKNOWN';\n}","size_bytes":11921},"server/lib/verification-suite.ts":{"content":"// Auto Verification Suite for Multiplayer Rooms\nimport { WebSocket } from 'ws';\nimport { v4 as uuidv4 } from 'uuid';\nimport { db } from '../db';\nimport { gameRooms, gameParticipants, users } from '../../shared/schema';\nimport { eq, and, sql } from 'drizzle-orm';\nimport { \n  DebugLogger,\n  SELF_DEBUG_MODE,\n  createCorrelationContext\n} from './self-debug';\n\nexport interface VerificationResult {\n  scenario: string;\n  pass: boolean;\n  timestamps: {\n    start: number;\n    end: number;\n    duration: number;\n  };\n  ackRate?: number;\n  snapshotIds?: string[];\n  errors?: string[];\n  details?: any;\n}\n\nexport interface VerificationReport {\n  timestamp: number;\n  results: VerificationResult[];\n  summary: {\n    total: number;\n    passed: number;\n    failed: number;\n    passRate: number;\n  };\n  triageBundles?: any[];\n}\n\nclass TestClient {\n  private ws: WebSocket | null = null;\n  private userId: string;\n  private messages: any[] = [];\n  private connected: boolean = false;\n  private connectionId: string | null = null;\n  \n  constructor(userId: string) {\n    this.userId = userId;\n  }\n  \n  async connect(url: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.ws = new WebSocket(url);\n      \n      this.ws.on('open', () => {\n        this.connected = true;\n        resolve();\n      });\n      \n      this.ws.on('message', (data: Buffer) => {\n        const message = JSON.parse(data.toString());\n        this.messages.push(message);\n        \n        if (message.type === 'connected') {\n          this.connectionId = message.connectionId;\n          // Authenticate\n          this.send({ type: 'auth', userId: this.userId });\n        }\n        \n        // Send ACKs for critical events\n        if (message.eventId) {\n          this.send({ \n            type: 'ack', \n            eventId: message.eventId,\n            clientId: this.connectionId \n          });\n        }\n      });\n      \n      this.ws.on('error', (error) => {\n        console.error('TestClient error:', error);\n        reject(error);\n      });\n      \n      this.ws.on('close', () => {\n        this.connected = false;\n      });\n    });\n  }\n  \n  send(data: any): void {\n    if (this.ws && this.connected) {\n      this.ws.send(JSON.stringify(data));\n    }\n  }\n  \n  async waitForMessage(type: string, timeout: number = 5000): Promise<any> {\n    const startTime = Date.now();\n    \n    while (Date.now() - startTime < timeout) {\n      const message = this.messages.find(m => m.type === type);\n      if (message) {\n        return message;\n      }\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n    \n    throw new Error(`Timeout waiting for message type: ${type}`);\n  }\n  \n  disconnect(): void {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n  \n  clearMessages(): void {\n    this.messages = [];\n  }\n}\n\nexport class VerificationSuite {\n  private wsUrl: string;\n  private testUsers: string[] = [];\n  \n  constructor(wsUrl: string = 'ws://localhost:5000/ws-rooms') {\n    this.wsUrl = wsUrl;\n  }\n  \n  async setup(): Promise<void> {\n    // Create test users\n    for (let i = 0; i < 4; i++) {\n      const userId = `test-user-${uuidv4()}`;\n      await db.insert(users).values({\n        id: userId,\n        email: `test${i}@test.com`,\n        currency: 1000,\n        level: 1,\n        experience: 0\n      });\n      this.testUsers.push(userId);\n    }\n  }\n  \n  async cleanup(): Promise<void> {\n    // Clean up test data\n    for (const userId of this.testUsers) {\n      await db.delete(users).where(eq(users.id, userId));\n    }\n    this.testUsers = [];\n  }\n  \n  async runAll(): Promise<VerificationReport> {\n    const startTime = Date.now();\n    const results: VerificationResult[] = [];\n    \n    if (!SELF_DEBUG_MODE) {\n      console.warn('Warning: Running verification suite without SELF_DEBUG_MODE enabled');\n    }\n    \n    // Setup test environment\n    await this.setup();\n    \n    try {\n      // Run all scenarios\n      results.push(await this.testScenario1_CreateAndList());\n      results.push(await this.testScenario2_JoinUntilFull());\n      results.push(await this.testScenario3_LeaveAndRelist());\n      results.push(await this.testScenario4_AllReadyAutoStart());\n      results.push(await this.testScenario5_DisconnectAndRejoin());\n      results.push(await this.testScenario6_LastPlayerLeaveDelete());\n      \n    } catch (error) {\n      console.error('Verification suite error:', error);\n    } finally {\n      await this.cleanup();\n    }\n    \n    // Get triage bundles if any failures\n    const failedCount = results.filter(r => !r.pass).length;\n    const triageBundles = failedCount > 0 ? DebugLogger.getTriageBundles() : [];\n    \n    const report: VerificationReport = {\n      timestamp: Date.now(),\n      results,\n      summary: {\n        total: results.length,\n        passed: results.filter(r => r.pass).length,\n        failed: failedCount,\n        passRate: results.length > 0 ? \n          (results.filter(r => r.pass).length / results.length) : 0\n      },\n      triageBundles\n    };\n    \n    console.log('\\n=== Verification Suite Report ===');\n    console.log(`Total Scenarios: ${report.summary.total}`);\n    console.log(`Passed: ${report.summary.passed}`);\n    console.log(`Failed: ${report.summary.failed}`);\n    console.log(`Pass Rate: ${(report.summary.passRate * 100).toFixed(1)}%`);\n    console.log(`Duration: ${Date.now() - startTime}ms`);\n    \n    if (failedCount > 0) {\n      console.log('\\nFailed Scenarios:');\n      results.filter(r => !r.pass).forEach(r => {\n        console.log(`  - ${r.scenario}: ${r.errors?.join(', ')}`);\n      });\n    }\n    \n    return report;\n  }\n  \n  async testScenario1_CreateAndList(): Promise<VerificationResult> {\n    const scenario = 'Create → List';\n    const startTime = Date.now();\n    const errors: string[] = [];\n    \n    try {\n      const client = new TestClient(this.testUsers[0]);\n      await client.connect(this.wsUrl);\n      \n      // Subscribe to room list\n      client.send({ type: 'room:list:subscribe' });\n      await client.waitForMessage('room:list:snapshot');\n      \n      // Create room\n      const idempotencyKey = uuidv4();\n      client.send({\n        type: 'room:create',\n        name: 'Test Room',\n        visibility: 'public',\n        maxPlayers: 4,\n        rounds: 9,\n        betCoins: 0,\n        idempotencyKey\n      });\n      \n      const created = await client.waitForMessage('room:created');\n      if (!created.room) {\n        errors.push('Room not created');\n      }\n      \n      // Check if room appears in list\n      const listUpdate = await client.waitForMessage('room:list:diff');\n      if (!listUpdate.added || listUpdate.added.length === 0) {\n        errors.push('Room not added to public list');\n      }\n      \n      client.disconnect();\n      \n      return {\n        scenario,\n        pass: errors.length === 0,\n        timestamps: {\n          start: startTime,\n          end: Date.now(),\n          duration: Date.now() - startTime\n        },\n        errors\n      };\n      \n    } catch (error) {\n      return {\n        scenario,\n        pass: false,\n        timestamps: {\n          start: startTime,\n          end: Date.now(),\n          duration: Date.now() - startTime\n        },\n        errors: [error instanceof Error ? error.message : String(error)]\n      };\n    }\n  }\n  \n  async testScenario2_JoinUntilFull(): Promise<VerificationResult> {\n    const scenario = 'Join Until Full → Instant Delist';\n    const startTime = Date.now();\n    const errors: string[] = [];\n    \n    try {\n      // Create room with max 2 players\n      const host = new TestClient(this.testUsers[0]);\n      await host.connect(this.wsUrl);\n      \n      host.send({\n        type: 'room:create',\n        name: 'Small Room',\n        visibility: 'public',\n        maxPlayers: 2,\n        rounds: 5,\n        betCoins: 0\n      });\n      \n      const created = await host.waitForMessage('room:created');\n      const roomCode = created.room.code;\n      \n      // Second player joins\n      const player2 = new TestClient(this.testUsers[1]);\n      await player2.connect(this.wsUrl);\n      player2.send({ type: 'room:list:subscribe' });\n      \n      player2.send({\n        type: 'room:join',\n        code: roomCode\n      });\n      \n      await player2.waitForMessage('player:joined');\n      \n      // Check if room was delisted\n      const listUpdate = await player2.waitForMessage('room:list:diff', 2000);\n      if (!listUpdate.removed || !listUpdate.removed.includes(roomCode)) {\n        errors.push('Room not instantly delisted when full');\n      }\n      \n      host.disconnect();\n      player2.disconnect();\n      \n      return {\n        scenario,\n        pass: errors.length === 0,\n        timestamps: {\n          start: startTime,\n          end: Date.now(),\n          duration: Date.now() - startTime\n        },\n        errors\n      };\n      \n    } catch (error) {\n      return {\n        scenario,\n        pass: false,\n        timestamps: {\n          start: startTime,\n          end: Date.now(),\n          duration: Date.now() - startTime\n        },\n        errors: [error instanceof Error ? error.message : String(error)]\n      };\n    }\n  }\n  \n  async testScenario3_LeaveAndRelist(): Promise<VerificationResult> {\n    const scenario = 'Leave From Full → Instant Relist';\n    const startTime = Date.now();\n    const errors: string[] = [];\n    \n    try {\n      // Create and fill room\n      const host = new TestClient(this.testUsers[0]);\n      const player2 = new TestClient(this.testUsers[1]);\n      \n      await host.connect(this.wsUrl);\n      await player2.connect(this.wsUrl);\n      \n      host.send({\n        type: 'room:create',\n        name: 'Test Room',\n        visibility: 'public',\n        maxPlayers: 2,\n        rounds: 5,\n        betCoins: 0\n      });\n      \n      const created = await host.waitForMessage('room:created');\n      const roomCode = created.room.code;\n      \n      player2.send({\n        type: 'room:join',\n        code: roomCode\n      });\n      \n      await player2.waitForMessage('player:joined');\n      \n      // Player 2 leaves\n      player2.send({\n        type: 'room:leave',\n        code: roomCode\n      });\n      \n      // Subscribe to list updates\n      const observer = new TestClient(this.testUsers[2]);\n      await observer.connect(this.wsUrl);\n      observer.send({ type: 'room:list:subscribe' });\n      \n      // Check if room is relisted\n      const listUpdate = await observer.waitForMessage('room:list:diff', 2000);\n      if (!listUpdate.added || listUpdate.added.length === 0) {\n        errors.push('Room not instantly relisted after player left');\n      }\n      \n      host.disconnect();\n      player2.disconnect();\n      observer.disconnect();\n      \n      return {\n        scenario,\n        pass: errors.length === 0,\n        timestamps: {\n          start: startTime,\n          end: Date.now(),\n          duration: Date.now() - startTime\n        },\n        errors\n      };\n      \n    } catch (error) {\n      return {\n        scenario,\n        pass: false,\n        timestamps: {\n          start: startTime,\n          end: Date.now(),\n          duration: Date.now() - startTime\n        },\n        errors: [error instanceof Error ? error.message : String(error)]\n      };\n    }\n  }\n  \n  async testScenario4_AllReadyAutoStart(): Promise<VerificationResult> {\n    const scenario = 'All Ready → Auto-start Exactly Once';\n    const startTime = Date.now();\n    const errors: string[] = [];\n    let ackRate = 0;\n    \n    try {\n      // Create room with 2 players\n      const host = new TestClient(this.testUsers[0]);\n      const player2 = new TestClient(this.testUsers[1]);\n      \n      await host.connect(this.wsUrl);\n      await player2.connect(this.wsUrl);\n      \n      host.send({\n        type: 'room:create',\n        name: 'Auto Start Test',\n        visibility: 'public',\n        maxPlayers: 2,\n        rounds: 5,\n        betCoins: 0\n      });\n      \n      const created = await host.waitForMessage('room:created');\n      const roomCode = created.room.code;\n      \n      player2.send({\n        type: 'room:join',\n        code: roomCode\n      });\n      \n      await player2.waitForMessage('player:joined');\n      \n      // Both players set ready\n      host.clearMessages();\n      player2.clearMessages();\n      \n      host.send({\n        type: 'room:ready:set',\n        code: roomCode,\n        ready: true\n      });\n      \n      player2.send({\n        type: 'room:ready:set',\n        code: roomCode,\n        ready: true\n      });\n      \n      // Wait for game to start (should happen within 2-3 seconds)\n      const gameStartHost = await host.waitForMessage('game:started', 4000);\n      const gameStartPlayer2 = await player2.waitForMessage('game:started', 4000);\n      \n      if (!gameStartHost || !gameStartPlayer2) {\n        errors.push('Game did not auto-start when all players ready');\n      }\n      \n      // Check that it started exactly once\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const extraStarts = host.messages.filter(m => m.type === 'game:started').length;\n      if (extraStarts > 1) {\n        errors.push(`Game started ${extraStarts} times instead of once`);\n      }\n      \n      // Calculate ACK rate (both clients should have ACKed)\n      ackRate = gameStartHost && gameStartPlayer2 ? 1.0 : 0.5;\n      \n      host.disconnect();\n      player2.disconnect();\n      \n      return {\n        scenario,\n        pass: errors.length === 0,\n        timestamps: {\n          start: startTime,\n          end: Date.now(),\n          duration: Date.now() - startTime\n        },\n        ackRate,\n        errors\n      };\n      \n    } catch (error) {\n      return {\n        scenario,\n        pass: false,\n        timestamps: {\n          start: startTime,\n          end: Date.now(),\n          duration: Date.now() - startTime\n        },\n        ackRate,\n        errors: [error instanceof Error ? error.message : String(error)]\n      };\n    }\n  }\n  \n  async testScenario5_DisconnectAndRejoin(): Promise<VerificationResult> {\n    const scenario = 'Disconnect During Active → AI Takeover → Rejoin';\n    const startTime = Date.now();\n    const errors: string[] = [];\n    \n    try {\n      // This scenario requires game to be active\n      // For now, we'll test the connection/disconnection mechanics\n      \n      const host = new TestClient(this.testUsers[0]);\n      await host.connect(this.wsUrl);\n      \n      host.send({\n        type: 'room:create',\n        name: 'Rejoin Test',\n        visibility: 'public',\n        maxPlayers: 2,\n        rounds: 5,\n        betCoins: 0\n      });\n      \n      const created = await host.waitForMessage('room:created');\n      const roomCode = created.room.code;\n      \n      // Disconnect\n      host.disconnect();\n      \n      // Wait a moment\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Reconnect\n      const hostReconnect = new TestClient(this.testUsers[0]);\n      await hostReconnect.connect(this.wsUrl);\n      \n      hostReconnect.send({\n        type: 'room:join',\n        code: roomCode\n      });\n      \n      // Should be able to rejoin if within window\n      try {\n        const rejoined = await hostReconnect.waitForMessage('room:rejoined', 2000);\n        if (!rejoined) {\n          errors.push('Could not rejoin room within window');\n        }\n      } catch {\n        // Alternative: might get regular join response\n        const joined = await hostReconnect.waitForMessage('player:joined', 2000);\n        if (!joined) {\n          errors.push('Could not rejoin room');\n        }\n      }\n      \n      hostReconnect.disconnect();\n      \n      return {\n        scenario,\n        pass: errors.length === 0,\n        timestamps: {\n          start: startTime,\n          end: Date.now(),\n          duration: Date.now() - startTime\n        },\n        errors\n      };\n      \n    } catch (error) {\n      return {\n        scenario,\n        pass: false,\n        timestamps: {\n          start: startTime,\n          end: Date.now(),\n          duration: Date.now() - startTime\n        },\n        errors: [error instanceof Error ? error.message : String(error)]\n      };\n    }\n  }\n  \n  async testScenario6_LastPlayerLeaveDelete(): Promise<VerificationResult> {\n    const scenario = 'Last Player Leaves → Immediate Delete';\n    const startTime = Date.now();\n    const errors: string[] = [];\n    \n    try {\n      const host = new TestClient(this.testUsers[0]);\n      await host.connect(this.wsUrl);\n      \n      host.send({\n        type: 'room:create',\n        name: 'Delete Test',\n        visibility: 'public',\n        maxPlayers: 4,\n        rounds: 5,\n        betCoins: 0\n      });\n      \n      const created = await host.waitForMessage('room:created');\n      const roomCode = created.room.code;\n      \n      // Host leaves (last player)\n      host.send({\n        type: 'room:leave',\n        code: roomCode\n      });\n      \n      // Check if room is deleted\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // Try to query the room from database\n      const rooms = await db.select().from(gameRooms)\n        .where(eq(gameRooms.code, roomCode));\n      \n      if (rooms.length > 0) {\n        errors.push('Room not immediately deleted when last player left');\n      }\n      \n      host.disconnect();\n      \n      return {\n        scenario,\n        pass: errors.length === 0,\n        timestamps: {\n          start: startTime,\n          end: Date.now(),\n          duration: Date.now() - startTime\n        },\n        errors\n      };\n      \n    } catch (error) {\n      return {\n        scenario,\n        pass: false,\n        timestamps: {\n          start: startTime,\n          end: Date.now(),\n          duration: Date.now() - startTime\n        },\n        errors: [error instanceof Error ? error.message : String(error)]\n      };\n    }\n  }\n}\n\n// Export for use in server\nexport async function runVerificationSuite(): Promise<VerificationReport> {\n  const suite = new VerificationSuite();\n  return await suite.runAll();\n}","size_bytes":17962},"server/routes-debug.ts":{"content":"// Debug and verification routes for the self-debugging system\nimport { Router } from 'express';\nimport { DebugLogger } from './lib/self-debug';\nimport { runVerificationSuite } from './lib/verification-suite';\n\nconst router = Router();\n\n// Get current triage bundles\nrouter.get('/api/debug/triage-bundles', async (req, res) => {\n  try {\n    const bundles = DebugLogger.getTriageBundles();\n    res.json({\n      count: bundles.length,\n      bundles: bundles.slice(-10) // Last 10 bundles\n    });\n  } catch (error) {\n    res.status(500).json({ \n      message: 'Failed to get triage bundles',\n      error: error instanceof Error ? error.message : String(error)\n    });\n  }\n});\n\n// Run verification suite\nrouter.post('/api/debug/verify', async (req, res) => {\n  try {\n    const report = await runVerificationSuite();\n    res.json(report);\n  } catch (error) {\n    res.status(500).json({ \n      message: 'Verification suite failed',\n      error: error instanceof Error ? error.message : String(error)\n    });\n  }\n});\n\n// Check system health\nrouter.get('/api/debug/health', (req, res) => {\n  res.json({\n    status: 'healthy',\n    selfDebugMode: process.env.NODE_ENV !== 'production',\n    protocolVersion: '1.0.0',\n    timestamp: Date.now()\n  });\n});\n\nexport default router;","size_bytes":1265},"client/src/pages/Lobby.tsx":{"content":"import { useEffect, useState, useRef } from 'react';\nimport { useLocation } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { queryClient } from '@/lib/queryClient';\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Crown, Users, Settings, Copy, Check, Timer, User } from 'lucide-react';\nimport { toast } from \"@/hooks/use-toast\";\nimport { Label } from \"@/components/ui/label\";\nimport { Home } from 'lucide-react';\nimport { useAuth } from '@/hooks/useAuth';\n\ninterface RoomParticipant {\n  userId: string;\n  username: string;\n  isHost: boolean;\n  isReady: boolean;\n  joinOrder: number;\n  joinedAt: string;\n}\n\ninterface GameRoom {\n  id: string;\n  code: string;\n  hostId: string;\n  crownHolderId: string;\n  betAmount: number;\n  maxPlayers: number;\n  currentPlayers: number;\n  settings: {\n    rounds: number;\n    mode: string;\n  };\n  status: string;\n  settingsLocked: boolean;\n  participants?: RoomParticipant[];\n}\n\nexport default function Lobby() {\n  const [location, setLocation] = useLocation();\n  const { user } = useAuth();\n  const [roomCode, setRoomCode] = useState<string>('');\n  const [isCopied, setIsCopied] = useState(false);\n  const [localSettings, setLocalSettings] = useState({ rounds: 9, maxPlayers: 4 });\n  const [selectedRounds, setSelectedRounds] = useState(9);\n  const [selectedPlayers, setSelectedPlayers] = useState(4);\n  const [isReady, setIsReady] = useState(false);\n  const [autoStartCountdown, setAutoStartCountdown] = useState<number | null>(null);\n  const wsRef = useRef<WebSocket | null>(null);\n  const [roomData, setRoomData] = useState<GameRoom | null>(null);\n\n  // Extract room code from URL\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const code = params.get('room');\n    if (!code) {\n      toast({\n        title: \"Error\",\n        description: \"No room code provided\",\n        variant: \"destructive\"\n      });\n      setLocation('/multiplayer');\n      return;\n    }\n    setRoomCode(code.toUpperCase());\n  }, [setLocation]);\n\n  // Fetch initial room data\n  const { data: initialRoom, isLoading, refetch } = useQuery<GameRoom>({\n    queryKey: [`/api/game-rooms/${roomCode}`],\n    enabled: !!roomCode,\n    refetchInterval: 2000 // Poll every 2 seconds to keep data fresh\n  });\n\n  // Connect to WebSocket for real-time updates\n  useEffect(() => {\n    if (!roomCode || !user) return;\n\n    // Use wss:// for HTTPS, ws:// for HTTP\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const ws = new WebSocket(`${protocol}//${window.location.host}/ws-rooms`);\n    wsRef.current = ws;\n\n    ws.onopen = () => {\n      // Send authentication first\n      ws.send(JSON.stringify({\n        type: 'authenticate',\n        userId: user.id\n      }));\n      \n      // Then join the room after authentication\n      setTimeout(() => {\n        ws.send(JSON.stringify({\n          type: 'room:join',\n          code: roomCode\n        }));\n      }, 100);\n    };\n\n    ws.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data);\n        \n        // Handle ping/pong for heartbeat\n        if (message.type === 'ping') {\n          ws.send(JSON.stringify({ type: 'pong' }));\n          return;\n        }\n        \n        handleWebSocketMessage(message);\n      } catch (error) {\n        console.error('WebSocket message parse error:', error);\n      }\n    };\n\n    ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      toast({\n        title: \"Connection Error\",\n        description: \"Lost connection to game server\",\n        variant: \"destructive\"\n      });\n    };\n\n    ws.onclose = () => {\n      console.log('WebSocket connection closed');\n    };\n\n    return () => {\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.send(JSON.stringify({\n          type: 'room:leave',\n          code: roomCode\n        }));\n      }\n      ws.close();\n    };\n  }, [roomCode, user]);\n\n  const handleWebSocketMessage = (message: any) => {\n    switch (message.type) {\n      case 'room:joined':\n        // Successfully joined room\n        if (message.room) setRoomData(message.room);\n        break;\n        \n      case 'reconnected':\n        // Successfully reconnected to room\n        console.log('[Lobby] Reconnected to room');\n        toast({\n          title: \"Reconnected\",\n          description: \"Successfully reconnected to the room\",\n        });\n        break;\n        \n      case 'player:reconnected':\n        // Another player reconnected\n        if (message.userId !== user?.id) {\n          toast({\n            title: \"Player Reconnected\",\n            description: \"A player reconnected to the room\",\n          });\n        }\n        break;\n        \n      case 'player:disconnected':\n        // Another player disconnected temporarily\n        if (message.userId !== user?.id) {\n          toast({\n            title: \"Player Disconnected\",\n            description: \"A player lost connection (may reconnect)\",\n            variant: \"default\",\n          });\n        }\n        break;\n        \n      case 'room:update':\n        setRoomData(message.room);\n        break;\n      \n      case 'player:joined':\n        toast({\n          title: \"Player Joined\",\n          description: `A player joined the room`,\n        });\n        if (message.room) setRoomData(message.room);\n        break;\n      \n      case 'player:left':\n        toast({\n          title: \"Player Left\",\n          description: `A player left the room`,\n        });\n        if (message.room) setRoomData(message.room);\n        break;\n      \n      case 'player:ready':\n        console.log('[Lobby] Received player:ready message:', message);\n        // Update room data with participant info\n        if (message.room) {\n          setRoomData(message.room);\n          // Also update the ready status for the current user\n          const currentParticipant = message.room.participants?.find((p: any) => p.userId === user?.id);\n          if (currentParticipant) {\n            console.log('[Lobby] Updating ready status for current user:', currentParticipant.isReady);\n            setIsReady(currentParticipant.isReady);\n          }\n        }\n        // Refresh room data to ensure consistency\n        queryClient.invalidateQueries({ queryKey: [`/api/game-rooms/${roomCode}`] });\n        break;\n      \n      case 'room:settings:updated':\n        console.log('[Lobby] Received settings update:', message);\n        // Update local settings and room data\n        if (message.settings) {\n          // Use server settings directly, don't fall back to local\n          setLocalSettings({ \n            rounds: message.settings.rounds, \n            maxPlayers: message.settings.maxPlayers \n          });\n        }\n        if (message.room) {\n          setRoomData(message.room);\n        }\n        // Refresh room data to ensure consistency\n        queryClient.invalidateQueries({ queryKey: [`/api/game-rooms/${roomCode}`] });\n        // Also refresh Active Lobbies list\n        queryClient.invalidateQueries({ queryKey: ['/api/game-rooms/all-lobbies'] });\n        break;\n      \n      case 'game:auto_start:countdown':\n        setAutoStartCountdown(message.seconds);\n        break;\n      \n      case 'room:started':\n      case 'game:started':\n        // Navigate to game with all settings\n        const gameUrl = `/game?mode=online&room=${roomCode}&rounds=${message.settings?.rounds || 9}`;\n        setLocation(gameUrl);\n        break;\n      \n      case 'room:host:changed':\n        toast({\n          title: \"Host Changed\",\n          description: message.reason || \"Crown has been transferred\",\n        });\n        if (message.room) setRoomData(message.room);\n        break;\n      \n      case 'error':\n        toast({\n          title: \"Error\",\n          description: message.message,\n          variant: \"destructive\"\n        });\n        break;\n    }\n  };\n\n  const handleCopyCode = () => {\n    navigator.clipboard.writeText(roomCode);\n    setIsCopied(true);\n    toast({\n      title: \"Room Code Copied\",\n      description: `Share this code: ${roomCode}`,\n    });\n    setTimeout(() => setIsCopied(false), 2000);\n  };\n\n  const handleReady = () => {\n    if (!wsRef.current || !user) return;\n    \n    const newReadyState = !isReady;\n    \n    // Send ready status to server\n    wsRef.current.send(JSON.stringify({\n      type: 'room:ready:set',\n      code: roomCode,\n      ready: newReadyState\n    }));\n    \n    // Don't update local state immediately - wait for server response\n    // This ensures we're always in sync with the server\n  };\n\n  const handleUpdateSettings = (field: 'rounds' | 'maxPlayers', value: number) => {\n    if (!wsRef.current || !user || !isHost) return;\n    \n    if (field === 'rounds') {\n      setSelectedRounds(value);\n    } else {\n      setSelectedPlayers(value);\n    }\n    \n    const newSettings = { ...localSettings, [field]: value };\n    setLocalSettings(newSettings);\n    \n    wsRef.current.send(JSON.stringify({\n      type: 'room:settings:update',\n      code: roomCode,\n      settings: newSettings  // Send all settings to ensure proper sync\n    }));\n  };\n\n  const handleStartGame = () => {\n    if (!wsRef.current || !user || !isHost) return;\n    \n    wsRef.current.send(JSON.stringify({\n      type: 'room:start',\n      code: roomCode\n    }));\n  };\n\n  const handleLeaveRoom = () => {\n    if (wsRef.current && user) {\n      wsRef.current.send(JSON.stringify({\n        type: 'room:leave',\n        code: roomCode\n      }));\n    }\n    setLocation('/multiplayer');\n  };\n\n  // Use WebSocket room data if available, otherwise use initial query data\n  const room = roomData || initialRoom;\n  const isHost = room?.crownHolderId === user?.id;\n  const participants = room?.participants || [];\n  // Find current user's participant data to check if they're ready\n  const currentUserParticipant = participants.find(p => p.userId === user?.id);\n  const userIsReady = currentUserParticipant?.isReady || false;\n  \n  // Update local ready state when participant data changes\n  useEffect(() => {\n    if (currentUserParticipant) {\n      setIsReady(currentUserParticipant.isReady);\n    }\n  }, [currentUserParticipant?.isReady]);\n  \n  const readyCount = participants.filter(p => p.isReady).length;\n  const allReady = participants.length >= 2 && readyCount === participants.length;\n\n  useEffect(() => {\n    if (room) {\n      setLocalSettings({\n        rounds: room.settings.rounds,\n        maxPlayers: room.maxPlayers\n      });\n      setSelectedRounds(room.settings.rounds);\n      setSelectedPlayers(room.maxPlayers);\n    }\n  }, [room]);\n\n  if (isLoading || !room) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen\" style={{ backgroundColor: '#2a3f5f' }}>\n      {/* Header */}\n      <header className=\"flex items-center justify-between px-6 py-4\">\n        <div className=\"flex items-center gap-4\">\n          <Button\n            variant=\"ghost\"\n            onClick={handleLeaveRoom}\n            className=\"text-gray-400 hover:text-white hover:bg-gray-700/50 transition-colors px-3 py-2\"\n            data-testid=\"button-leave-lobby\"\n          >\n            <Home className=\"w-5 h-5 mr-2\" />\n            <span>Leave Lobby</span>\n          </Button>\n          \n          <div>\n            <h1 className=\"text-xl font-semibold text-white\">Game Lobby</h1>\n            <div className=\"flex items-center gap-2 mt-1\">\n              <span className=\"font-mono text-lg text-yellow-400\">{roomCode}</span>\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={handleCopyCode}\n                className=\"text-gray-400 hover:text-white p-1\"\n                data-testid=\"button-copy-code\"\n              >\n                {isCopied ? <Check className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n              </Button>\n              <Badge className=\"bg-blue-600/20 text-blue-400 border-blue-600/30\">\n                {room.betAmount === 0 ? 'Free Play' : `${room.betAmount} Coins`}\n              </Badge>\n            </div>\n          </div>\n        </div>\n        \n        {autoStartCountdown !== null && (\n          <Badge className=\"bg-green-600/20 text-green-400 border-green-600/30 animate-pulse\">\n            <Timer className=\"h-4 w-4 mr-1\" />\n            Starting in {autoStartCountdown}s\n          </Badge>\n        )}\n      </header>\n\n      <div className=\"px-6 pb-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Players Section */}\n          <div className=\"lg:col-span-2 bg-gray-800/50 rounded-lg p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h2 className=\"text-lg font-semibold text-white flex items-center gap-2\">\n                <Users className=\"h-5 w-5\" />\n                Players ({participants.length}/{room.maxPlayers})\n              </h2>\n            </div>\n            \n            <div className=\"space-y-3\">\n              {participants.map((participant) => (\n                <div\n                  key={participant.userId}\n                  className=\"flex items-center justify-between p-4 bg-gray-900/50 rounded-lg border border-gray-700/50\"\n                  data-testid={`player-${participant.userId}`}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-10 h-10 bg-blue-600/20 rounded-full flex items-center justify-center\">\n                      <User className=\"h-5 w-5 text-blue-400\" />\n                    </div>\n                    <span className=\"font-medium text-white\">{participant.username}</span>\n                    {participant.userId === room.crownHolderId && (\n                      <Crown className=\"h-5 w-5 text-yellow-400\" />\n                    )}\n                  </div>\n                  <Badge \n                    className={participant.isReady \n                      ? \"bg-green-600/20 text-green-400 border-green-600/30\" \n                      : \"bg-gray-700/50 text-gray-400 border-gray-600\"\n                    }\n                  >\n                    {participant.isReady ? \"Ready\" : \"Not Ready\"}\n                  </Badge>\n                </div>\n              ))}\n              \n              {/* Empty slots */}\n              {Array.from({ length: room.maxPlayers - participants.length }).map((_, i) => (\n                <div\n                  key={`empty-${i}`}\n                  className=\"flex items-center justify-between p-4 border-2 border-dashed border-gray-700/50 rounded-lg\"\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-10 h-10 border-2 border-dashed border-gray-600 rounded-full flex items-center justify-center\">\n                      <User className=\"h-5 w-5 text-gray-600\" />\n                    </div>\n                    <span className=\"text-gray-500\">Waiting for player...</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"mt-6 flex gap-3\">\n              <Button\n                onClick={handleReady}\n                className={isReady \n                  ? \"flex-1 bg-gray-700 hover:bg-gray-600 text-white\" \n                  : \"flex-1 bg-green-600 hover:bg-green-700 text-white\"\n                }\n                data-testid=\"button-ready\"\n              >\n                {isReady ? \"Unready\" : \"Ready\"}\n              </Button>\n              \n              {isHost && (\n                <Button\n                  onClick={handleStartGame}\n                  disabled={participants.length !== localSettings.maxPlayers || !participants.every((p: any) => p.isReady) || room.settingsLocked}\n                  className=\"flex-1 bg-blue-600 hover:bg-blue-700 text-white disabled:bg-gray-700 disabled:text-gray-500\"\n                  data-testid=\"button-start-game\"\n                >\n                  Start Game\n                </Button>\n              )}\n            </div>\n          </div>\n\n          {/* Settings Section */}\n          <div className=\"bg-gray-800/50 rounded-lg p-6\">\n            <h2 className=\"text-lg font-semibold text-white flex items-center gap-2 mb-4\">\n              <Settings className=\"h-5 w-5\" />\n              Game Settings\n            </h2>\n            <p className=\"text-sm text-gray-400 mb-6\">\n              {isHost ? \"Configure your game\" : \"Set by host\"}\n            </p>\n\n            <div className=\"space-y-6\">\n              {/* Rounds Selection */}\n              <div>\n                <Label className=\"text-white mb-3 block\">Rounds</Label>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <Button\n                    onClick={() => handleUpdateSettings('rounds', 5)}\n                    disabled={!isHost || room.settingsLocked}\n                    className={selectedRounds === 5 \n                      ? \"bg-blue-600 text-white hover:bg-blue-700\" \n                      : \"bg-gray-700 text-gray-300 hover:bg-gray-600\"\n                    }\n                    data-testid=\"button-rounds-5\"\n                  >\n                    5 Rounds\n                  </Button>\n                  <Button\n                    onClick={() => handleUpdateSettings('rounds', 9)}\n                    disabled={!isHost || room.settingsLocked}\n                    className={selectedRounds === 9 \n                      ? \"bg-blue-600 text-white hover:bg-blue-700\" \n                      : \"bg-gray-700 text-gray-300 hover:bg-gray-600\"\n                    }\n                    data-testid=\"button-rounds-9\"\n                  >\n                    9 Rounds\n                  </Button>\n                </div>\n              </div>\n\n              {/* Players Selection */}\n              <div>\n                <Label className=\"text-white mb-3 block\">Max Players</Label>\n                <div className=\"grid grid-cols-3 gap-2\">\n                  <Button\n                    onClick={() => handleUpdateSettings('maxPlayers', 2)}\n                    disabled={!isHost || room.settingsLocked || participants.length > 2}\n                    className={selectedPlayers === 2 \n                      ? \"bg-blue-600 text-white hover:bg-blue-700\" \n                      : \"bg-gray-700 text-gray-300 hover:bg-gray-600 disabled:bg-gray-800 disabled:text-gray-600\"\n                    }\n                    data-testid=\"button-players-2\"\n                  >\n                    2\n                  </Button>\n                  <Button\n                    onClick={() => handleUpdateSettings('maxPlayers', 3)}\n                    disabled={!isHost || room.settingsLocked || participants.length > 3}\n                    className={selectedPlayers === 3 \n                      ? \"bg-blue-600 text-white hover:bg-blue-700\" \n                      : \"bg-gray-700 text-gray-300 hover:bg-gray-600 disabled:bg-gray-800 disabled:text-gray-600\"\n                    }\n                    data-testid=\"button-players-3\"\n                  >\n                    3\n                  </Button>\n                  <Button\n                    onClick={() => handleUpdateSettings('maxPlayers', 4)}\n                    disabled={!isHost || room.settingsLocked || participants.length > 4}\n                    className={selectedPlayers === 4 \n                      ? \"bg-blue-600 text-white hover:bg-blue-700\" \n                      : \"bg-gray-700 text-gray-300 hover:bg-gray-600 disabled:bg-gray-800 disabled:text-gray-600\"\n                    }\n                    data-testid=\"button-players-4\"\n                  >\n                    4\n                  </Button>\n                </div>\n              </div>\n\n              {/* Game Info */}\n              <div className=\"pt-4 border-t border-gray-700\">\n                <div className=\"text-sm text-gray-400 space-y-2\">\n                  <p className=\"flex items-center gap-2\">\n                    <span className=\"w-2 h-2 bg-blue-400 rounded-full\"></span>\n                    {selectedRounds} rounds to play\n                  </p>\n                  <p className=\"flex items-center gap-2\">\n                    <span className=\"w-2 h-2 bg-blue-400 rounded-full\"></span>\n                    {selectedPlayers} players maximum\n                  </p>\n                  <p className=\"flex items-center gap-2\">\n                    <span className=\"w-2 h-2 bg-blue-400 rounded-full\"></span>\n                    {room.betAmount === 0 ? 'Free play' : `${room.betAmount} coins stake`}\n                  </p>\n                  <p className=\"flex items-center gap-2\">\n                    <span className=\"w-2 h-2 bg-yellow-400 rounded-full\"></span>\n                    Prize pool: {room.betAmount * participants.length} coins\n                  </p>\n                </div>\n              </div>\n\n              {allReady && (\n                <div className=\"p-3 bg-green-600/10 border border-green-600/20 rounded-lg\">\n                  <p className=\"text-sm text-green-400 font-medium\">\n                    All players ready! Game will start soon...\n                  </p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":21381},"client/src/pages/OnlineMultiplayer.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ToggleGroup, ToggleGroupItem } from \"@/components/ui/toggle-group\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { ArrowLeft, Users, Settings, Trophy, Coins, DollarSign, Star, Crown } from \"lucide-react\";\nimport { STAKE_BRACKETS, type StakeBracket, type GameRoom } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface StakeOption {\n  value: StakeBracket;\n  label: string;\n  coins: number;\n  icon: React.ReactNode;\n  color: string;\n}\n\nconst STAKE_OPTIONS: StakeOption[] = [\n  { value: \"free\", label: STAKE_BRACKETS.free.label, coins: STAKE_BRACKETS.free.entryFee, icon: <Trophy className=\"w-4 h-4\" />, color: \"bg-gray-500\" },\n  { value: \"low\", label: STAKE_BRACKETS.low.label, coins: STAKE_BRACKETS.low.entryFee, icon: <Coins className=\"w-4 h-4\" />, color: \"bg-green-500\" },\n  { value: \"medium\", label: STAKE_BRACKETS.medium.label, coins: STAKE_BRACKETS.medium.entryFee, icon: <DollarSign className=\"w-4 h-4\" />, color: \"bg-blue-500\" },\n  { value: \"high\", label: STAKE_BRACKETS.high.label, coins: STAKE_BRACKETS.high.entryFee, icon: <Star className=\"w-4 h-4\" />, color: \"bg-purple-500\" },\n  { value: \"premium\", label: STAKE_BRACKETS.premium.label, coins: STAKE_BRACKETS.premium.entryFee, icon: <Crown className=\"w-4 h-4\" />, color: \"bg-yellow-500\" },\n];\n\nexport default function OnlineMultiplayer() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [selectedStake, setSelectedStake] = useState<StakeBracket>(() => {\n    // Load persisted stake from localStorage\n    const saved = localStorage.getItem(\"selectedStake\");\n    return (saved as StakeBracket) || \"free\";\n  });\n  \n  const [activeRooms, setActiveRooms] = useState<GameRoom[]>([]);\n  const [roomsLoading, setRoomsLoading] = useState(true);\n  const wsRef = useRef<WebSocket | null>(null);\n  \n  // Create Room Dialog state\n  const [createRoomOpen, setCreateRoomOpen] = useState(false);\n  const [playerCount, setPlayerCount] = useState(\"4\");\n  const [roundCount, setRoundCount] = useState(\"9\");\n\n  // Persist stake selection to localStorage\n  useEffect(() => {\n    localStorage.setItem(\"selectedStake\", selectedStake);\n  }, [selectedStake]);\n\n  // WebSocket connection for real-time room updates\n  useEffect(() => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    const connectWebSocket = () => {\n      const ws = new WebSocket(wsUrl);\n      wsRef.current = ws;\n      \n      ws.onopen = () => {\n        console.log(\"WebSocket connected\");\n        // Subscribe to rooms with the selected stake bracket\n        ws.send(JSON.stringify({\n          type: 'subscribe_rooms',\n          stakeBracket: selectedStake\n        }));\n      };\n      \n      ws.onmessage = (event) => {\n        const data = JSON.parse(event.data);\n        \n        if (data.type === 'rooms_snapshot') {\n          // Clear and replace with fresh data when switching stakes\n          setActiveRooms(data.rooms || []);\n          setRoomsLoading(false);\n        }\n        \n        if (data.type === 'rooms_update') {\n          // Update existing rooms list\n          setActiveRooms(data.rooms || []);\n        }\n        \n        if (data.type === 'error') {\n          console.error('WebSocket error:', data.message);\n        }\n      };\n      \n      ws.onerror = (error) => {\n        console.error(\"WebSocket error:\", error);\n        setRoomsLoading(false);\n      };\n      \n      ws.onclose = () => {\n        console.log(\"WebSocket connection closed\");\n        // Attempt to reconnect after 3 seconds\n        setTimeout(connectWebSocket, 3000);\n      };\n    };\n    \n    connectWebSocket();\n    \n    return () => {\n      if (wsRef.current?.readyState === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({ type: 'unsubscribe_rooms' }));\n        wsRef.current.close();\n      }\n    };\n  }, [selectedStake]);\n  \n  // Create room mutation\n  const createRoomMutation = useMutation({\n    mutationFn: async (params: { maxPlayers: number; rounds: number }) => {\n      const res = await apiRequest(\"POST\", \"/api/rooms/create\", { \n        stakeBracket: selectedStake,\n        rounds: params.rounds,\n        maxPlayers: params.maxPlayers\n      });\n      return await res.json();\n    },\n    onSuccess: (response: any) => {\n      if (response.success && response.gameSnapshot) {\n        console.log(\"Room created, navigating to game:\", response.gameSnapshot.code);\n        toast({\n          title: \"Game Starting!\",\n          description: `Joining table...`,\n          duration: 2000\n        });\n        setCreateRoomOpen(false);\n        // Navigate directly to Game View with the game snapshot\n        setTimeout(() => {\n          navigate(`/game?room=${response.gameSnapshot.code}`);\n        }, 100);\n      } else {\n        toast({\n          title: \"Failed to create room\",\n          description: response.message || \"Please try again\",\n          variant: \"destructive\"\n        });\n      }\n    },\n    onError: (error) => {\n      console.error(\"Failed to create room:\", error);\n      toast({\n        title: \"Error creating room\",\n        description: \"Please try again later\",\n        variant: \"destructive\"\n      });\n    }\n  });\n  \n  const handleCreateRoom = () => {\n    createRoomMutation.mutate({\n      maxPlayers: parseInt(playerCount),\n      rounds: parseInt(roundCount)\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-900 via-green-800 to-green-900 p-4\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4\">\n          <h1 className=\"text-3xl sm:text-4xl font-bold text-white\">Online Multiplayer</h1>\n          \n          {/* Navigation Controls */}\n          <div className=\"flex flex-wrap gap-2\">\n            <Button variant=\"outline\" className=\"bg-white/10 backdrop-blur border-white/20 text-white hover:bg-white/20\">\n              <Users className=\"w-4 h-4 mr-2\" />\n              Social\n            </Button>\n            <Button variant=\"outline\" className=\"bg-white/10 backdrop-blur border-white/20 text-white hover:bg-white/20\">\n              <Settings className=\"w-4 h-4 mr-2\" />\n              Settings\n            </Button>\n            <Link href=\"/\">\n              <Button variant=\"outline\" className=\"bg-white/10 backdrop-blur border-white/20 text-white hover:bg-white/20\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Main Menu\n              </Button>\n            </Link>\n          </div>\n        </div>\n\n        {/* Stake Filter Section */}\n        <Card className=\"mb-6 bg-black/20 backdrop-blur border-white/10\">\n          <CardContent className=\"p-4 sm:p-6\">\n            <h2 className=\"text-xl font-semibold text-white mb-4\">Select Stake Level</h2>\n            \n            <ToggleGroup \n              type=\"single\" \n              value={selectedStake} \n              onValueChange={(value) => value && setSelectedStake(value as StakeBracket)}\n              className=\"flex flex-wrap gap-2\"\n            >\n              {STAKE_OPTIONS.map((stake) => (\n                <ToggleGroupItem\n                  key={stake.value}\n                  value={stake.value}\n                  className={`\n                    flex flex-col items-center gap-1 p-3 sm:p-4 min-w-[80px] sm:min-w-[100px]\n                    bg-white/10 hover:bg-white/20 data-[state=on]:bg-white/30 \n                    border border-white/20 data-[state=on]:border-white/40\n                    text-white transition-all\n                  `}\n                  data-testid={`stake-filter-${stake.value}`}\n                >\n                  <div className={`p-2 rounded-full ${stake.color} bg-opacity-20`}>\n                    {stake.icon}\n                  </div>\n                  <span className=\"font-semibold text-sm sm:text-base\">{stake.label}</span>\n                  <span className=\"text-xs sm:text-sm opacity-80\">\n                    {stake.coins === 0 ? \"Free\" : `${stake.coins} coins`}\n                  </span>\n                </ToggleGroupItem>\n              ))}\n            </ToggleGroup>\n\n            <div className=\"mt-4 text-white/70 text-sm\">\n              <span>Selected: </span>\n              <Badge className=\"ml-2\" variant=\"secondary\">\n                {STAKE_OPTIONS.find(s => s.value === selectedStake)?.label} Stakes\n              </Badge>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Active Rooms Section */}\n        <Card className=\"bg-black/20 backdrop-blur border-white/10\">\n          <CardContent className=\"p-4 sm:p-6\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <div className=\"flex items-center gap-3\">\n                <h2 className=\"text-xl font-semibold text-white\">Active Rooms</h2>\n                <Badge variant=\"outline\" className=\"text-white border-white/20\">\n                  {selectedStake === \"free\" ? \"Free Play\" : `${STAKE_OPTIONS.find(s => s.value === selectedStake)?.coins} Coins Entry`}\n                </Badge>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button \n                  size=\"sm\"\n                  className=\"bg-green-600 hover:bg-green-700 text-white\"\n                  onClick={() => setCreateRoomOpen(true)}\n                >\n                  Create Room\n                </Button>\n                <Button \n                  size=\"sm\"\n                  variant=\"outline\" \n                  className=\"bg-white/10 backdrop-blur border-white/20 text-white hover:bg-white/20\"\n                >\n                  Quick Match\n                </Button>\n              </div>\n            </div>\n\n            {roomsLoading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <div className=\"text-white/60\">Loading rooms...</div>\n              </div>\n            ) : activeRooms.length === 0 ? (\n              /* Empty State */\n              <div className=\"flex flex-col items-center justify-center py-12 text-white/60\">\n                <Users className=\"w-16 h-16 mb-4 opacity-40\" />\n                <p className=\"text-lg font-medium mb-2\">No Active Rooms</p>\n                <p className=\"text-sm text-center max-w-sm\">\n                  No rooms are currently available at this stake level. \n                  Create a new room or wait for other players to join.\n                </p>\n                \n                <div className=\"mt-6 flex flex-col sm:flex-row gap-2\">\n                  <Button \n                    className=\"bg-green-600 hover:bg-green-700 text-white\"\n                    onClick={() => setCreateRoomOpen(true)}\n                  >\n                    Create Room\n                  </Button>\n                  <Button variant=\"outline\" className=\"bg-white/10 backdrop-blur border-white/20 text-white hover:bg-white/20\">\n                    Quick Match\n                  </Button>\n                </div>\n              </div>\n            ) : (\n              /* Room list */\n              <div className=\"space-y-3\" data-testid=\"active-rooms-list\">\n                {activeRooms.map((room) => {\n                  const players = room.players as any[];\n                  const maxPlayers = room.maxPlayers || 4;\n                  const settings = room.settings as any;\n                  const rounds = settings?.rounds || 9;\n                  const currentStake = STAKE_BRACKETS[room.stakeBracket as StakeBracket] || STAKE_BRACKETS.free;\n                  \n                  return (\n                    <div \n                      key={room.id} \n                      className=\"p-4 bg-white/10 rounded-lg border border-white/20 hover:bg-white/15 transition-all\"\n                      data-testid={`room-${room.code}`}\n                    >\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-2\">\n                            <p className=\"text-white font-semibold text-lg\">Room {room.code}</p>\n                            <Badge className=\"bg-white/20 text-white border-white/30\">\n                              {currentStake.label}\n                            </Badge>\n                          </div>\n                          \n                          <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-2 text-sm\">\n                            <div className=\"flex items-center gap-1 text-white/80\">\n                              <Users className=\"w-4 h-4\" />\n                              <span>{players.length} / {maxPlayers} players</span>\n                            </div>\n                            \n                            <div className=\"flex items-center gap-1 text-white/80\">\n                              <Trophy className=\"w-4 h-4\" />\n                              <span>{rounds} rounds</span>\n                            </div>\n                            \n                            {currentStake.entryFee > 0 && (\n                              <div className=\"flex items-center gap-1 text-yellow-400\">\n                                <Coins className=\"w-4 h-4\" />\n                                <span>{currentStake.entryFee} coins</span>\n                              </div>\n                            )}\n                          </div>\n                          \n                          {/* Player names preview */}\n                          <div className=\"mt-2 text-white/60 text-xs\">\n                            {players.slice(0, 3).map((p: any, idx: number) => p.name || `Player ${idx + 1}`).join(\", \")}\n                            {players.length > 3 && ` +${players.length - 3} more`}\n                          </div>\n                        </div>\n                        \n                        <Button \n                          size=\"sm\" \n                          className=\"bg-green-600 hover:bg-green-700 text-white ml-4\"\n                          onClick={async () => {\n                            try {\n                              // Join the room first to claim a seat\n                              const response = await apiRequest(\"POST\", `/api/rooms/${room.code}/join`);\n                              const result = await response.json();\n                              \n                              if (result.success || result.alreadySeated) {\n                                // Navigate directly to game view with the room code\n                                navigate(`/game?room=${room.code}`);\n                              } else {\n                                toast({\n                                  title: \"Failed to join\",\n                                  description: result.message || \"Table might be full\",\n                                  variant: \"destructive\"\n                                });\n                              }\n                            } catch (error) {\n                              console.error(\"Error joining room:\", error);\n                              toast({\n                                title: \"Error\",\n                                description: \"Failed to join table\",\n                                variant: \"destructive\"\n                              });\n                            }\n                          }}\n                          data-testid={`button-join-${room.code}`}\n                        >\n                          Join\n                        </Button>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Mobile-friendly bottom navigation */}\n        <div className=\"sm:hidden fixed bottom-0 left-0 right-0 bg-black/80 backdrop-blur border-t border-white/20 p-4\">\n          <div className=\"flex justify-around\">\n            <Button variant=\"ghost\" className=\"text-white flex-col gap-1 h-auto py-2\">\n              <Trophy className=\"w-5 h-5\" />\n              <span className=\"text-xs\">Rooms</span>\n            </Button>\n            <Button variant=\"ghost\" className=\"text-white flex-col gap-1 h-auto py-2\">\n              <Users className=\"w-5 h-5\" />\n              <span className=\"text-xs\">Social</span>\n            </Button>\n            <Button variant=\"ghost\" className=\"text-white flex-col gap-1 h-auto py-2\">\n              <Settings className=\"w-5 h-5\" />\n              <span className=\"text-xs\">Settings</span>\n            </Button>\n          </div>\n        </div>\n        \n        {/* Create Room Dialog */}\n        <Dialog open={createRoomOpen} onOpenChange={setCreateRoomOpen}>\n          <DialogContent className=\"bg-gray-900 text-white border-gray-700\">\n            <DialogHeader>\n              <DialogTitle>Create New Game Room</DialogTitle>\n              <DialogDescription className=\"text-gray-400\">\n                Configure your game settings and start playing\n              </DialogDescription>\n            </DialogHeader>\n            \n            <div className=\"space-y-6 py-4\">\n              {/* Player Count Selection */}\n              <div className=\"space-y-3\">\n                <Label className=\"text-sm font-medium\">Number of Players</Label>\n                <RadioGroup value={playerCount} onValueChange={setPlayerCount}>\n                  <div className=\"flex gap-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"2\" id=\"players-2\" />\n                      <Label htmlFor=\"players-2\" className=\"cursor-pointer\">2 Players</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"3\" id=\"players-3\" />\n                      <Label htmlFor=\"players-3\" className=\"cursor-pointer\">3 Players</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"4\" id=\"players-4\" />\n                      <Label htmlFor=\"players-4\" className=\"cursor-pointer\">4 Players</Label>\n                    </div>\n                  </div>\n                </RadioGroup>\n              </div>\n              \n              {/* Rounds Selection */}\n              <div className=\"space-y-3\">\n                <Label className=\"text-sm font-medium\">Number of Rounds</Label>\n                <RadioGroup value={roundCount} onValueChange={setRoundCount}>\n                  <div className=\"flex gap-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"5\" id=\"rounds-5\" />\n                      <Label htmlFor=\"rounds-5\" className=\"cursor-pointer\">5 Rounds (Quick)</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"9\" id=\"rounds-9\" />\n                      <Label htmlFor=\"rounds-9\" className=\"cursor-pointer\">9 Rounds (Standard)</Label>\n                    </div>\n                  </div>\n                </RadioGroup>\n              </div>\n              \n              {/* Stake Information */}\n              <div className=\"p-3 bg-gray-800 rounded-lg\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-400\">Stake Level:</span>\n                  <Badge className=\"bg-green-600 text-white\">\n                    {STAKE_OPTIONS.find(s => s.value === selectedStake)?.label}\n                  </Badge>\n                </div>\n                {selectedStake !== \"free\" && (\n                  <div className=\"flex items-center justify-between mt-2\">\n                    <span className=\"text-sm text-gray-400\">Entry Fee:</span>\n                    <span className=\"text-yellow-400 font-semibold\">\n                      {STAKE_OPTIONS.find(s => s.value === selectedStake)?.coins} coins\n                    </span>\n                  </div>\n                )}\n              </div>\n            </div>\n            \n            <DialogFooter>\n              <Button\n                variant=\"outline\"\n                onClick={() => setCreateRoomOpen(false)}\n                className=\"bg-gray-800 text-white border-gray-700 hover:bg-gray-700\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleCreateRoom}\n                disabled={createRoomMutation.isPending}\n                className=\"bg-green-600 hover:bg-green-700 text-white\"\n              >\n                {createRoomMutation.isPending ? \"Creating Game...\" : \"Start Game\"}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":21323},"client/src/pages/RoomView.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { \n  Users, \n  Trophy, \n  Clock, \n  Copy, \n  CheckCircle2,\n  ArrowLeft,\n  Loader2,\n  Settings\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface RoomData {\n  id: string;\n  code: string;\n  hostId: string;\n  players: any[];\n  maxPlayers: number;\n  stakeBracket: string;\n  settings: {\n    rounds: number;\n    timeLimit: number | null;\n    allowSpectators: boolean;\n  };\n  status: string;\n  playerCount: number;\n  version: number;\n  isActive: boolean;\n  createdAt: string;\n}\n\nconst STAKE_LABELS: Record<string, { label: string; coins: number; color: string }> = {\n  free: { label: \"Free Play\", coins: 0, color: \"bg-green-500\" },\n  low: { label: \"Low Stakes\", coins: 10, color: \"bg-blue-500\" },\n  medium: { label: \"Medium Stakes\", coins: 50, color: \"bg-purple-500\" },\n  high: { label: \"High Stakes\", coins: 100, color: \"bg-orange-500\" },\n  vip: { label: \"VIP Stakes\", coins: 500, color: \"bg-red-500\" }\n};\n\nexport default function RoomView() {\n  const { code } = useParams<{ code: string }>();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [codeCopied, setCodeCopied] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const [showEditSettings, setShowEditSettings] = useState(false);\n  const [editForm, setEditForm] = useState({\n    rounds: 9,\n    maxPlayers: 4,\n    stakeBracket: \"free\"\n  });\n\n  // Fetch room details\n  const { data: room, isLoading, error } = useQuery<RoomData>({\n    queryKey: [`/api/rooms/${code}`],\n    refetchInterval: 2000, // Poll for updates\n    enabled: !!code\n  });\n\n  // Update settings mutation - must be before any conditional returns\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (settings: typeof editForm) => {\n      const res = await apiRequest(\"PATCH\", `/api/rooms/${code}/settings`, settings);\n      return await res.json();\n    },\n    onSuccess: (data: any) => {\n      if (data.success) {\n        toast({\n          title: \"Settings Updated\",\n          description: \"Room settings have been updated successfully\"\n        });\n        setShowEditSettings(false);\n        // Invalidate and refetch room data\n        queryClient.invalidateQueries({ queryKey: [`/api/rooms/${code}`] });\n      } else {\n        toast({\n          title: \"Update Failed\",\n          description: data.message || \"Failed to update room settings\",\n          variant: \"destructive\"\n        });\n      }\n    },\n    onError: (error) => {\n      console.error(\"Failed to update settings:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update room settings\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Leave room mutation\n  const leaveRoomMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"POST\", `/api/rooms/${code}/leave`);\n      const data = await res.json();\n      if (!data.success) {\n        throw new Error(data.message || \"Failed to leave room\");\n      }\n      return data;\n    },\n    onSuccess: (data: any) => {\n      if (data.roomDeleted) {\n        toast({\n          title: \"Room closed\",\n          description: \"The room was deleted as you were the last player\",\n          duration: 2000\n        });\n      } else {\n        toast({\n          title: \"Left room\",\n          description: data.newHost ? \"Host transferred to another player\" : \"You have left the room\",\n          duration: 2000\n        });\n      }\n      // Navigate back to multiplayer lobby\n      navigate(\"/online-multiplayer\");\n    },\n    onError: (error) => {\n      console.error(\"Failed to leave room:\", error);\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to leave room\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Initialize edit form when room data changes - must be before any conditional returns\n  useEffect(() => {\n    if (room) {\n      setEditForm({\n        rounds: room.settings.rounds || 9,\n        maxPlayers: room.maxPlayers || 4,\n        stakeBracket: room.stakeBracket || \"free\"\n      });\n    }\n  }, [room]);\n\n  // WebSocket connection for real-time updates\n  useEffect(() => {\n    if (!code) return;\n\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    const ws = new WebSocket(wsUrl);\n\n    ws.onopen = () => {\n      console.log(\"Room View WebSocket connected\");\n      setIsConnected(true);\n      // Subscribe to this specific room\n      ws.send(JSON.stringify({ \n        type: \"subscribe_room\", \n        roomCode: code \n      }));\n    };\n\n    ws.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      if (data.type === \"room_update\" && data.room?.code === code) {\n        // Room update received - the query will refetch automatically\n        console.log(\"Room update received:\", data.room);\n      }\n    };\n\n    ws.onclose = () => {\n      console.log(\"Room View WebSocket disconnected\");\n      setIsConnected(false);\n    };\n\n    return () => {\n      ws.close();\n    };\n  }, [code]);\n\n  const handleCopyCode = () => {\n    if (room?.code) {\n      navigator.clipboard.writeText(room.code);\n      setCodeCopied(true);\n      toast({\n        title: \"Room code copied!\",\n        description: `Share code ${room.code} with other players`,\n      });\n      setTimeout(() => setCodeCopied(false), 2000);\n    }\n  };\n\n  const handleStartGame = () => {\n    // TODO: Implement game start logic\n    toast({\n      title: \"Starting game...\",\n      description: \"Preparing the game room\",\n    });\n  };\n\n  const handleLeaveRoom = () => {\n    leaveRoomMutation.mutate();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-emerald-900 via-emerald-800 to-emerald-900 p-4 flex items-center justify-center\">\n        <Card className=\"bg-black/40 backdrop-blur border-white/20\">\n          <CardContent className=\"p-8 flex flex-col items-center\">\n            <Loader2 className=\"w-8 h-8 text-white animate-spin mb-4\" />\n            <p className=\"text-white\">Loading room details...</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (error || !room) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-emerald-900 via-emerald-800 to-emerald-900 p-4 flex items-center justify-center\">\n        <Card className=\"bg-black/40 backdrop-blur border-white/20\">\n          <CardContent className=\"p-8\">\n            <p className=\"text-red-400 mb-4\">Room not found or error loading room</p>\n            <Button \n              onClick={() => navigate(\"/online-multiplayer\")}\n              className=\"bg-white/20 hover:bg-white/30 text-white\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Lobby\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const stake = STAKE_LABELS[room.stakeBracket] || STAKE_LABELS.free;\n  const isHost = user?.id === room.hostId;\n  const canEditSettings = isHost && room.status === \"room\";\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-emerald-900 via-emerald-800 to-emerald-900 p-4\">\n      <div className=\"max-w-4xl mx-auto space-y-4\">\n        {/* Header */}\n        <Card className=\"bg-black/40 backdrop-blur border-white/20\">\n          <CardHeader>\n            <div className=\"flex justify-between items-start\">\n              <div>\n                <CardTitle className=\"text-3xl text-white mb-2\">\n                  Room {room.code}\n                </CardTitle>\n                <div className=\"flex items-center gap-2\">\n                  <Badge className={`${stake.color} text-white`}>\n                    {stake.label}\n                  </Badge>\n                  {stake.coins > 0 && (\n                    <Badge variant=\"outline\" className=\"text-white border-white/20\">\n                      {stake.coins} coins entry\n                    </Badge>\n                  )}\n                  {isConnected && (\n                    <Badge className=\"bg-green-600 text-white\">\n                      Live\n                    </Badge>\n                  )}\n                </div>\n              </div>\n              <Button\n                onClick={handleLeaveRoom}\n                variant=\"outline\"\n                className=\"bg-white/10 border-white/20 text-white hover:bg-white/20\"\n                disabled={leaveRoomMutation.isPending}\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                {leaveRoomMutation.isPending ? \"Leaving...\" : \"Leave Room\"}\n              </Button>\n            </div>\n          </CardHeader>\n        </Card>\n\n        {/* Room Info */}\n        <div className=\"grid md:grid-cols-2 gap-4\">\n          {/* Game Settings */}\n          <Card className=\"bg-black/40 backdrop-blur border-white/20\">\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <CardTitle className=\"text-white\">Game Settings</CardTitle>\n                {canEditSettings && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    className=\"bg-white/10 border-white/20 text-white hover:bg-white/20\"\n                    onClick={() => setShowEditSettings(true)}\n                  >\n                    <Settings className=\"w-4 h-4 mr-2\" />\n                    Edit\n                  </Button>\n                )}\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex items-center justify-between text-white\">\n                <div className=\"flex items-center gap-2\">\n                  <Trophy className=\"w-4 h-4 text-yellow-400\" />\n                  <span>Rounds</span>\n                </div>\n                <span className=\"font-semibold\">{room.settings.rounds}</span>\n              </div>\n              \n              <Separator className=\"bg-white/10\" />\n              \n              <div className=\"flex items-center justify-between text-white\">\n                <div className=\"flex items-center gap-2\">\n                  <Clock className=\"w-4 h-4 text-blue-400\" />\n                  <span>Time Limit</span>\n                </div>\n                <span className=\"font-semibold\">\n                  {room.settings.timeLimit ? `${room.settings.timeLimit}s` : \"None\"}\n                </span>\n              </div>\n              \n              <Separator className=\"bg-white/10\" />\n              \n              <div className=\"flex items-center justify-between text-white\">\n                <div className=\"flex items-center gap-2\">\n                  <Users className=\"w-4 h-4 text-green-400\" />\n                  <span>Max Players</span>\n                </div>\n                <span className=\"font-semibold\">{room.maxPlayers}</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Room Code Share */}\n          <Card className=\"bg-black/40 backdrop-blur border-white/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Invite Players</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-white/70 text-sm mb-4\">\n                Share this code with friends to join your room\n              </p>\n              <div className=\"flex gap-2\">\n                <div className=\"flex-1 bg-white/10 border border-white/20 rounded-lg px-4 py-3\">\n                  <p className=\"text-2xl font-bold text-white tracking-wider text-center\">\n                    {room.code}\n                  </p>\n                </div>\n                <Button\n                  onClick={handleCopyCode}\n                  variant=\"outline\"\n                  className=\"bg-white/10 border-white/20 text-white hover:bg-white/20\"\n                >\n                  {codeCopied ? (\n                    <CheckCircle2 className=\"w-5 h-5\" />\n                  ) : (\n                    <Copy className=\"w-5 h-5\" />\n                  )}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Players */}\n        <Card className=\"bg-black/40 backdrop-blur border-white/20\">\n          <CardHeader>\n            <div className=\"flex justify-between items-center\">\n              <CardTitle className=\"text-white\">\n                Players ({room.playerCount}/{room.maxPlayers})\n              </CardTitle>\n              {room.status === \"room\" && (\n                <Badge variant=\"outline\" className=\"text-yellow-400 border-yellow-400\">\n                  Waiting for players...\n                </Badge>\n              )}\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid gap-3\">\n              {room.players.map((player: any, index: number) => (\n                <div \n                  key={player.id || index}\n                  className=\"flex items-center justify-between p-3 bg-white/10 rounded-lg\"\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-10 h-10 rounded-full bg-white/20 flex items-center justify-center\">\n                      <Users className=\"w-5 h-5 text-white\" />\n                    </div>\n                    <div>\n                      <p className=\"text-white font-medium\">\n                        {player.name || player.email || \"Player\"}\n                      </p>\n                      {player.id === room.hostId && (\n                        <Badge className=\"bg-yellow-600 text-white text-xs\">\n                          Host\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                  <Badge variant=\"outline\" className=\"text-green-400 border-green-400\">\n                    Ready\n                  </Badge>\n                </div>\n              ))}\n              \n              {/* Empty slots */}\n              {Array.from({ length: room.maxPlayers - room.playerCount }).map((_, index) => (\n                <div \n                  key={`empty-${index}`}\n                  className=\"flex items-center p-3 bg-white/5 rounded-lg border border-white/10 border-dashed\"\n                >\n                  <div className=\"w-10 h-10 rounded-full bg-white/10 flex items-center justify-center mr-3\">\n                    <Users className=\"w-5 h-5 text-white/40\" />\n                  </div>\n                  <p className=\"text-white/40\">Waiting for player...</p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Action Buttons */}\n        {isHost && room.status === \"room\" && (\n          <Card className=\"bg-black/40 backdrop-blur border-white/20\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex justify-center gap-4\">\n                <Button\n                  onClick={handleStartGame}\n                  className=\"bg-green-600 hover:bg-green-700 text-white px-8\"\n                  disabled={room.playerCount < 2}\n                >\n                  {room.playerCount < 2 ? \"Waiting for players...\" : \"Start Game\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Edit Settings Dialog */}\n      <Dialog open={showEditSettings} onOpenChange={setShowEditSettings}>\n        <DialogContent className=\"bg-black/95 border-white/20 text-white\">\n          <DialogHeader>\n            <DialogTitle>Edit Room Settings</DialogTitle>\n            <DialogDescription className=\"text-white/70\">\n              Update the room settings. Changes will apply immediately.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"grid gap-4 py-4\">\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"rounds\" className=\"text-right text-white\">\n                Rounds\n              </Label>\n              <Select\n                value={editForm.rounds.toString()}\n                onValueChange={(value) => setEditForm({ ...editForm, rounds: parseInt(value) })}\n              >\n                <SelectTrigger className=\"col-span-3 bg-white/10 border-white/20 text-white\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"5\">5 Rounds</SelectItem>\n                  <SelectItem value=\"9\">9 Rounds</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"maxPlayers\" className=\"text-right text-white\">\n                Max Players\n              </Label>\n              <Select\n                value={editForm.maxPlayers.toString()}\n                onValueChange={(value) => setEditForm({ ...editForm, maxPlayers: parseInt(value) })}\n                disabled={room.playerCount > 2}\n              >\n                <SelectTrigger className=\"col-span-3 bg-white/10 border-white/20 text-white\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"2\" disabled={room.playerCount > 2}>2 Players</SelectItem>\n                  <SelectItem value=\"3\" disabled={room.playerCount > 3}>3 Players</SelectItem>\n                  <SelectItem value=\"4\">4 Players</SelectItem>\n                </SelectContent>\n              </Select>\n              {editForm.maxPlayers < room.playerCount && (\n                <p className=\"col-span-4 text-sm text-red-400\">\n                  Cannot set max players below current player count ({room.playerCount})\n                </p>\n              )}\n            </div>\n            \n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"stakeBracket\" className=\"text-right text-white\">\n                Stake Level\n              </Label>\n              <Select\n                value={editForm.stakeBracket}\n                onValueChange={(value) => setEditForm({ ...editForm, stakeBracket: value })}\n              >\n                <SelectTrigger className=\"col-span-3 bg-white/10 border-white/20 text-white\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"free\">Free Play</SelectItem>\n                  <SelectItem value=\"low\">Low Stakes (10 coins)</SelectItem>\n                  <SelectItem value=\"medium\">Medium Stakes (50 coins)</SelectItem>\n                  <SelectItem value=\"high\">High Stakes (100 coins)</SelectItem>\n                  <SelectItem value=\"premium\">Premium Stakes (500 coins)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowEditSettings(false)}\n              className=\"bg-white/10 border-white/20 text-white hover:bg-white/20\"\n              disabled={updateSettingsMutation.isPending}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={() => updateSettingsMutation.mutate(editForm)}\n              className=\"bg-green-600 hover:bg-green-700 text-white\"\n              disabled={updateSettingsMutation.isPending || editForm.maxPlayers < room.playerCount}\n            >\n              {updateSettingsMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":20448},"client/src/pages/GameWrapper.tsx":{"content":"import Game from '@/pages/Game';\nimport MultiplayerGame from '@/pages/MultiplayerGame';\n\nexport default function GameWrapper() {\n  // Check if there's a room parameter in the URL\n  const params = new URLSearchParams(window.location.search);\n  const roomCode = params.get('room');\n  \n  // If there's a room code, use MultiplayerGame, otherwise use regular Game\n  if (roomCode) {\n    return <MultiplayerGame />;\n  }\n  \n  return <Game />;\n}","size_bytes":437}},"version":1}