Solo Mode Triggered Instead of Multiplayer

Issue: The codebase has a full single-player (solo vs AI) mode, and some of that logic is bleeding into the multiplayer flow. For example, when the host created a room, the app still called startGame with mode='online' but then set up players as if it were a local game (with You and “Player X” placeholders). This effectively started a pseudo-solo game (just without AI flags) on the client. It suggests that the multiplayer route was not properly separated – the game initialization routine was shared, causing the “Solo” setup (dealing cards, setting up grids immediately) to run even for an online game. This is the wrong mode being loaded, as noted in the fix notes. The symptom was that the host might see AI or empty opponent slots pre-filled, or the game not waiting for real players.

Expected: Solo mode and Online mode must be fully decoupled. Creating or joining an online room should never trigger the single-player game initialization or AI routines. The code should explicitly guard against mounting any solo/A.I. components when in online mode. In practice, the client navigation after creating a room should go to a dedicated MultiplayerGame view (which uses the server snapshot) rather than the generic Game page that auto-starts a solo game. The server already logs the mode as online during room creation; the client needs to honor that by switching to the online UI. We see a partial implementation: the Game.tsx file even warns “forcing online mode” if a room code is present, but then it still proceeds to call the normal startGame. Instead, it should perhaps redirect to or incorporate the MultiplayerGame logic. The correct behavior is: On room creation, host lands in the Multiplayer table view with open seats (no AI). If any part of a solo game component tries to initialize (e.g. dealing cards locally or starting the AI turn loop), it should be blocked when gameMode==='online'. This may require refactoring the initialization so that online mode simply waits for server data rather than creating any local game state. By ensuring the app only uses server-driven state in multiplayer, we avoid accidentally running a solo/A.I. match in what should be an online session.